/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SearchPanel.java
 *
 * Created on Sep 10, 2011, 11:33:38 AM
 */
package edu.coeia.searching;

import edu.coeia.cases.Case;

import edu.coeia.gutil.GuiUtil;
import edu.coeia.gutil.GUIComponent ;
import edu.coeia.util.Utilities;
import edu.coeia.util.FilesPath ;
import edu.coeia.util.MetaDataExtraction ;

import java.awt.BorderLayout;
import java.awt.event.InputEvent;

import javax.swing.JOptionPane ;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode ;
import javax.swing.JFrame;

import java.io.File ;

import java.util.List; 
import java.util.logging.Logger;
import java.util.logging.Level;

import chrriis.dj.nativeswing.swtimpl.components.JWebBrowser;
import org.apache.tika.Tika;


/**
 *
 * @author wajdyessam
 */
public class SearchPanel extends javax.swing.JPanel {

    private JWebBrowser fileBrowser = new JWebBrowser();
    
    private Case index;
    private final static Logger logger = Logger.getLogger(FilesPath.LOG_NAMESPACE);
    
    /** Creates new form SearchPanel */
    public SearchPanel(Case aIndex) {
        initComponents();
        
        this.index = aIndex;
        
        // add file browser
        fileBrowser.setBarsVisible(false);
        fileBrowser.setStatusBarVisible(false);
        //fileRenderPanel.add(fileBrowser, BorderLayout.CENTER);  
        
//        Utilities.packColumns(searchTable, 0);
        disableNotIndexedComponent();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headerPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        queryTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        startSearchingButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        headerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Search Options"));

        jLabel1.setText("Query: ");

        queryTextField.setText(" ");

        jLabel2.setForeground(new java.awt.Color(0, 51, 255));
        jLabel2.setText("Advanced Search");

        startSearchingButton.setText("Search");
        startSearchingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startSearchingButtonActionPerformed(evt);
            }
        });

        jLabel3.setForeground(new java.awt.Color(0, 0, 255));
        jLabel3.setText("Clear");

        javax.swing.GroupLayout headerPanelLayout = new javax.swing.GroupLayout(headerPanel);
        headerPanel.setLayout(headerPanelLayout);
        headerPanelLayout.setHorizontalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(headerPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(queryTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                        .addGap(10, 10, 10)
                        .addComponent(startSearchingButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headerPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)))
                .addContainerGap())
        );
        headerPanelLayout.setVerticalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(queryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startSearchingButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void startSearchingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startSearchingButtonActionPerformed
    }//GEN-LAST:event_startSearchingButtonActionPerformed

    
    
//    private void tableMouseEvent(java.awt.event.MouseEvent evt) {
//        if ( (evt.getModifiersEx() & InputEvent.BUTTON3_DOWN_MASK ) != 0 ) {
//            if ( searchTable.isEnabled() )
//                GuiUtil.showPopup(evt);
//        }
//    }
//    
//    private void resultTableClicked(java.awt.event.MouseEvent evt) {
//        // set summary panel
//        try {
//            if ( (evt.getModifiersEx() & InputEvent.BUTTON3_DOWN_MASK ) != 0 ) {
//                GuiUtil.showPopup(evt);
//                return ;
//            }
//
//            // other click event
//            int row = searchTable.getSelectedRow();
//            String filePath = (String) searchTable.getValueAt(row, 0);
//
//            //showInformation(filePath);
//        }
//        catch (Exception e ){
//            logger.log(Level.SEVERE, "Uncaught exception", e);
//        }
//    }
//    
//    private void showAdvancedSearch() {
//        AdvancedSearchDialog asd = new AdvancedSearchDialog(null, true, index.getExtensionAllowed());
//        asd.setVisible(true);
//
//        String query = asd.getQuery() ;
//        List<String> ext = asd.getSupportedExtensions() ;
//
//        if ( query == null || query.isEmpty() )
//            return ;
//
//        if ( ext == null || ext.isEmpty())
//            return ;
//
//        queryTextField.setText(query);
//        startSearching(ext);
//    }
//    
//    private void clusterPathTreeAction() {
//        try {
//            DefaultMutableTreeNode node = (DefaultMutableTreeNode) clusterPathTree.getLastSelectedPathComponent();
//            if ( node == null || node.isRoot() || ! node.isLeaf()) {
//                return ;
//            }
//            
//            String filePath= node.getUserObject().toString();
//            //showInformation(filePath);
//       }
//       catch (Exception e ){
//           logger.log(Level.SEVERE, "Uncaught exception", e);
//       }
//    }
//    
//    private void clusterTypeTreeAction() {
//        try {
//            DefaultMutableTreeNode node = (DefaultMutableTreeNode) clusterTypeTree.getLastSelectedPathComponent();
//            if ( node == null || node.isRoot() || ! node.isLeaf()) {
//                return ;
//            }
//
//            String filePath= node.getUserObject().toString();
//            //showInformation(filePath);
//       }
//       catch (Exception e ){
//       }
//    }
    
//    private void showInformation (String filePath) throws Exception {
//        File fileName = new File(filePath);
//        String keyword = queryTextField.getText().trim();
//        String extension = Utilities.getExtension(fileName);
//        
//        searchFileNameLbl.setText(fileName.getName());
//        searchFileExtensionLbl.setText(extension);
//        searchFileSizeLbl.setText(fileName.length() + "");
//
//        // set summary panel and file rendered panel depen on file
//        if (extension.equalsIgnoreCase("txt")) {
//            String content = Utilities.getFileContent(fileName) ;
//            String highlither = "<span style=\"background-color: #FFFF00\">" + keyword +  "</span>" ;
//            String rep = content.replace(keyword, highlither);
//            fileBrowser.setHTMLContent(rep);
//        }
//        else if ( extension.equalsIgnoreCase("pdf") ) {
//            //fileBrowser.navigate(filePath + "#search= " + keyword + "");
//            String content = parseFile(fileName);
//            String highlither = "<span style=\"background-color: #FFFF00\">" + keyword +  "</span>" ;
//            String rep = content.replace(keyword, highlither);
//            fileBrowser.setHTMLContent(rep);
//        }
//        else if ( extension.equalsIgnoreCase("html") ||
//                  extension.equalsIgnoreCase("htm") ||
//                  extension.equalsIgnoreCase("mht") ) {
//            //fileBrowser.navigate(filePath);
//            String content = parseFile(fileName);
//            String highlither = "<span style=\"background-color: #FFFF00\">" + keyword +  "</span>" ;
//            String rep = content.replace(keyword, highlither);
//            fileBrowser.setHTMLContent(rep);
//        }
//        else if ( extension.equalsIgnoreCase("doc")) {
//            String content = parseFile(fileName);
//            String highlither = "<span style=\"background-color: #FFFF00\">" + keyword +  "</span>" ;
//            String rep = content.replace(keyword, highlither);
//            fileBrowser.setHTMLContent(rep);
//        }
//
//        // show matadata information for file
//        String metaData = MetaDataExtraction.getMetaData(filePath);
//        metaDataTextArea.setText(metaData);
//
//        fileRenderPanel.validate();
//    }
    
    private String parseFile(final File filePath) {
        Tika tika = new Tika();
        String bodyText = "" ;
        
        try {
            bodyText = tika.parseToString(filePath);
        }
        catch (Exception e ){
            
        }
        
        return (bodyText);
    }
    
    private void startSearching (List<String> supportedExtension) {
//        removeSearchField(false,false);

        if ( index.getIndexStatus() == false ) {
            JOptionPane.showMessageDialog(this, "please do the indexing operation first before do any operation",
                    "Case is not indexed",JOptionPane.ERROR_MESSAGE );
            return ;
        }

        File indexLocation = new File (index.getIndexLocation() + "\\" + FilesPath.INDEX_PATH);
        String queryString = queryTextField.getText().trim();

        if ( queryString.isEmpty() ) {
            JOptionPane.showMessageDialog(this, "please fill the query string and choose an index location");
            return  ;
        }

//        Utilities.packColumns(searchTable, 2);
//        searchProgressBard.setIndeterminate(true);
//
//        GUIComponent searchGUI = new GUIComponent(searchProgressBard,searchTable,searchingDateLbl,indexDirLbl2,
//            userQueryLbl,searchTime, supportedExtension , clusterPathTree,clusterTypeTree);
//
//         SearcherThread sThread = new SearcherThread(indexLocation,queryString,searchGUI);
//         sThread.execute();
    }

//    private void removeSearchField (boolean all, boolean restCheckBox) {
//        searchProgressBard.setIndeterminate(false); 
//
//        ( (DefaultTableModel) searchTable.getModel() ).getDataVector().removeAllElements();
//        ( (DefaultTableModel) searchTable.getModel() ).fireTableDataChanged();
//        
//        fileBrowser.setHTMLContent("");
//
//        if ( all ) {
//            queryTextField.setText("");
//        }
//
//        if ( restCheckBox ) {
//        }
//    }
    
    private void disableNotIndexedComponent () {
        if ( index.getDocumentInIndex().isEmpty() ) {
            startSearchingButton.setEnabled(false);
            //clearFieldsButton.setEnabled(false);
            //keywordsListButton.setEnabled(false);
        }
    }
    
    public void setSearchKeyword (String text) {
        queryTextField.setText(text);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel headerPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField queryTextField;
    private javax.swing.JButton startSearchingButton;
    // End of variables declaration//GEN-END:variables
}
