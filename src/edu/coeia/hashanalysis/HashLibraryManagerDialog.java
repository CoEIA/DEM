/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * HashLibraryManagerDialog.java
 *
 * Created on Dec 17, 2011, 10:40:58 AM
 */
package edu.coeia.hashanalysis;

import edu.coeia.cases.Case;
import edu.coeia.util.FileUtil;
import edu.coeia.util.FilesPath;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JFrame;

/**
 *
 * @author wajdyessam
 */
public class HashLibraryManagerDialog extends javax.swing.JDialog {

    private Case caseObject; 
    private List<HashCategory> hashCategories ;
    private HashSetItemsPanel hashSetItemsPanel ;
    private HashLibraryManager hashLibraryManger ;
    private JFrame parent; 
    
    /** Creates new form HashLibraryManagerDialog */
    public HashLibraryManagerDialog(java.awt.Frame parent, boolean modal, Case aCase) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(parent);
        
        this.parent = (JFrame) parent ;
        this.caseObject = aCase;
        this.hashCategories = new ArrayList<HashCategory>();
        this.hashLibraryManger = new HashLibraryManager();
        
        this.initializeHashSet();
        this.disableButtonWhenEmptyHashSet();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        importButton = new javax.swing.JButton();
        exportButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        hashSetsComboBox = new javax.swing.JComboBox();
        loadButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Hash Library Manager");

        viewPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Hash Set Items"));
        viewPanel.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Controls"));

        importButton.setText("Import");
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        exportButton.setText("Export");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(exportButton, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                    .addComponent(importButton, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                    .addComponent(removeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                    .addComponent(closeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(importButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(exportButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(removeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 147, Short.MAX_VALUE)
                .addComponent(closeButton)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Hash Set Selection"));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel1.setText("Select Hash Set:");

        loadButton.setText("Load");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hashSetsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(loadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(hashSetsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loadButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(viewPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 581, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(viewPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        HashCategory hashCategory = this.getSelectedHashCategory();
        
        this.hashSetItemsPanel = new HashSetItemsPanel(hashCategory.getItems());
        
        this.viewPanel.removeAll();
        this.viewPanel.add(this.hashSetItemsPanel);
        this.viewPanel.revalidate();
    }//GEN-LAST:event_loadButtonActionPerformed

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        importHashSet();
        
        this.resetItems();
        this.initializeHashSet();
        this.disableButtonWhenEmptyHashSet();
    }//GEN-LAST:event_importButtonActionPerformed

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        exportHashSet(this.getSelectedHashCategory());
    }//GEN-LAST:event_exportButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        HashCategory hashCategory = this.getSelectedHashCategory();
        this.hashLibraryManger.remove(hashCategory);
        
        this.resetItems();
        this.initializeHashSet();
        this.disableButtonWhenEmptyHashSet();
    }//GEN-LAST:event_removeButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed
    
    private HashCategory getSelectedHashCategory() {
        int index = this.hashSetsComboBox.getSelectedIndex();
        HashCategory hashCategory = this.hashCategories.get(index);
        
        return (hashCategory);
    }
    
    private void initializeHashSet() {
        String hashSetLocation = FilesPath.HASH_LIBRARY_PATH;
        List<File> hashSetsLocation = getHashSets(hashSetLocation);
        
        for(File file: hashSetsLocation) {
            HashCategory hashCategory = getHashCategory(file);
            this.hashCategories.add(hashCategory);
            this.hashSetsComboBox.addItem(hashCategory.getName());
        }
    }
    
    private void resetItems() {
        this.hashCategories.clear();
        this.hashSetsComboBox.removeAllItems();
        this.viewPanel.removeAll();
        this.viewPanel.revalidate();
        this.disableButtonWhenEmptyHashSet();
    }
    
    private List<File> getHashSets(final String hashLocation) {
        List<File> files = new ArrayList<File>();
        
        File file = new File(hashLocation);
        FileFilter fileFilter = new FileFilter() {
            @Override
            public boolean accept(File file) {
                return file.isFile() && file.getAbsolutePath().endsWith(FilesPath.HASH_SET_EXTENSION);
            }
        };
        
        files.addAll(Arrays.asList(file.listFiles(fileFilter)));
        return files;
    }
    
    private HashCategory getHashCategory(final File file) {
        HashCategory hashCategory = null;
        
        try {
            hashCategory = FileUtil.readObject(file);
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        
        return hashCategory;
    }
    
    private void disableButtonWhenEmptyHashSet() {
        if (this.hashCategories.isEmpty() ) {
            this.hashSetsComboBox.setEnabled(false);
            this.loadButton.setEnabled(false);
            this.exportButton.setEnabled(false);
            this.removeButton.setEnabled(false);
        }
        else {
            this.hashSetsComboBox.setEnabled(true);
            this.loadButton.setEnabled(true);
            this.exportButton.setEnabled(true);
            this.removeButton.setEnabled(true);
        }
    }
    
    private void importHashSet() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.addChoosableFileFilter(new javax.swing.filechooser.FileFilter() {
            @Override
            public boolean accept(File f) {
                return ( f.isFile() && f.getAbsolutePath().endsWith(FilesPath.HASH_SET_EXTENSION) );
            }

            @Override
            public String getDescription() {
                return String.format("DEM HASH SET");
            }
        });
        
        int result = fileChooser.showOpenDialog(this.parent);
        if ( result == JFileChooser.APPROVE_OPTION ) {
            File file = fileChooser.getSelectedFile();
            
            try {
                String filePath = FilesPath.HASH_LIBRARY_PATH + "\\" + file.getName();
                FileUtil.saveObject(new FileInputStream(file), filePath);
            }
            catch(Exception e){ 
                e.printStackTrace();
            }
        }
    }
    
    private void exportHashSet(final HashCategory hashCategory) {
        String filePath = FilesPath.HASH_LIBRARY_PATH + "\\" + hashCategory.getName() 
                + FilesPath.HASH_SET_EXTENSION ;
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setSelectedFile(new File(hashCategory.getName() + FilesPath.HASH_SET_EXTENSION));
        
        int result = fileChooser.showSaveDialog(this.parent);
        if ( result == JFileChooser.APPROVE_OPTION ) {
            File file = fileChooser.getSelectedFile();
            try {
                FileUtil.saveObject(new FileInputStream(filePath), file.getAbsolutePath());
            }
            catch(Exception e) { 
                e.printStackTrace(); 
            }
        }
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JButton exportButton;
    private javax.swing.JComboBox hashSetsComboBox;
    private javax.swing.JButton importButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton loadButton;
    private javax.swing.JButton removeButton;
    private javax.swing.JPanel viewPanel;
    // End of variables declaration//GEN-END:variables
}
