package edu.coeia.cases;

import chrriis.dj.nativeswing.swtimpl.components.JDirectoryDialog;

import edu.coeia.cases.EmailConfiguration.SOURCE;
import edu.coeia.util.FilesPath;
import edu.coeia.util.FilesFilter;
import edu.coeia.onlinemail.EmailDownloaderDialog;

import edu.coeia.onlinemail.OnlineEmailDownloader;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JFileChooser;
import javax.swing.DefaultListModel;
import java.util.List;
import java.util.ArrayList;
import java.io.File;
import java.awt.CardLayout;

import java.util.Date;
import javax.swing.JFrame;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/*
 * IndexWizard.java
 *
 * @author wajdyessam
 * 
 * Created on Jul 13, 2010, 2:00:51 PM
 * 
 */
public class CaseWizardDialog extends javax.swing.JDialog implements Runnable {

    private Case currentCase;
    private String PATH = FilesPath.CASES_PATH;
    private String CaseSource;
    
    private JFileChooser fileChooser;
    boolean indexTheCase = false;   // index the case after create it
    /*
     * Wizard CardLayout - Panels Names
     */
    private String[] cardsName = {"indexInfoPanel", "CaseWizardA1", "CaseWizardA2", "CaseWizardA3"};
    private int currentIndex = 0;

    /** Creates new form IndexWizard */
    public CaseWizardDialog(java.awt.Frame parent, boolean modal, boolean isFullVersion) {
        super(parent, modal);
        initComponents();
       
        UserNameGmailTextField.setEnabled(false);
        PasswordGmailTextField.setEnabled(false);
        UserNameHotmailTextField.setEnabled(false);
        PasswordHotmailTextField.setEnabled(false);
        ProgramFilesRadioButton.setVisible(false);
        WindowsFilesRadioButton.setVisible(false);

        // show first card indexInfoPanel and disable back button and finish button
        showPanel(cardsName[0], indexWizardPanel);
        backButton.setEnabled(false);
        finishButton.setEnabled(false);

        setLocationRelativeTo(parent);

        // add listener for index name text feild
        caseNameTextField.getDocument().addDocumentListener(new DocumentListener() {

            public void insertUpdate(DocumentEvent e) {
                checkforCaseLocationPath();
            }

            public void removeUpdate(DocumentEvent e) {
                checkforCaseLocationPath();
            }

            public void changedUpdate(DocumentEvent e) {
            }
        });



    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DataSourceButtonGroup = new javax.swing.ButtonGroup();
        YesNoIndexButtonGroup = new javax.swing.ButtonGroup();
        YesNoMD5HashButtonGroup = new javax.swing.ButtonGroup();
        indexWizardPanel = new javax.swing.JPanel();
        indexInfoPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        caseNameTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        caseLocationTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        investigatorTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();
        CaseWizardA1 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        LocalDriveRadioButton = new javax.swing.JRadioButton();
        LocalFolderRadioButton = new javax.swing.JRadioButton();
        EncaseImageRadioButton = new javax.swing.JRadioButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        UserNameGmailTextField = new javax.swing.JTextField();
        UserNameHotmailTextField = new javax.swing.JTextField();
        GmailCheckBox = new javax.swing.JCheckBox();
        HotmailCheckBox = new javax.swing.JCheckBox();
        PasswordGmailTextField = new javax.swing.JPasswordField();
        PasswordHotmailTextField = new javax.swing.JPasswordField();
        CaseWizardA2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        NoIndexRadioButton = new javax.swing.JRadioButton();
        DetectClusterCaseRadioButton = new javax.swing.JCheckBox();
        ExportRadioButton = new javax.swing.JCheckBox();
        jLabel15 = new javax.swing.JLabel();
        YesIndexRadioButton = new javax.swing.JRadioButton();
        DetectClusterLibraryRadioButton = new javax.swing.JCheckBox();
        NoMD5RadioButton = new javax.swing.JRadioButton();
        jLabel14 = new javax.swing.JLabel();
        YesMD5RadioButton = new javax.swing.JRadioButton();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        CaseWizardA3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        CacheImageCheckBox = new javax.swing.JCheckBox();
        ExcludeSystemFilesCheckBox = new javax.swing.JCheckBox();
        IndexZipCheckBox = new javax.swing.JCheckBox();
        WindowsFilesRadioButton = new javax.swing.JRadioButton();
        ProgramFilesRadioButton = new javax.swing.JRadioButton();
        IndexEmbeddedFilesCheckBox = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        IndexChatCheckBox = new javax.swing.JCheckBox();
        DetectBrowserCheckBox = new javax.swing.JCheckBox();
        indexFooterPanel = new javax.swing.JPanel();
        finishButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        indexHeaderPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Digital Evidence Miner: Create Index Wizard");
        setResizable(false);

        indexWizardPanel.setMaximumSize(new java.awt.Dimension(608, 361));
        indexWizardPanel.setPreferredSize(new java.awt.Dimension(608, 361));
        indexWizardPanel.setLayout(new java.awt.CardLayout());

        indexInfoPanel.setMaximumSize(new java.awt.Dimension(608, 361));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel1.setText("Case Name:");

        caseNameTextField.setText(" ");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel2.setText("Case Location:");

        caseLocationTextField.setEditable(false);
        caseLocationTextField.setText(" ");

        browseButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        browseButton.setText("Browse...");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel3.setText("Investigator Name:");

        investigatorTextField.setText(" ");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel4.setText("Description:");

        descriptionTextArea.setColumns(20);
        descriptionTextArea.setFont(new java.awt.Font("Courier New", 1, 18));
        descriptionTextArea.setRows(5);
        jScrollPane1.setViewportView(descriptionTextArea);

        javax.swing.GroupLayout indexInfoPanelLayout = new javax.swing.GroupLayout(indexInfoPanel);
        indexInfoPanel.setLayout(indexInfoPanelLayout);
        indexInfoPanelLayout.setHorizontalGroup(
            indexInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(indexInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(indexInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(indexInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(caseNameTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, indexInfoPanelLayout.createSequentialGroup()
                        .addComponent(caseLocationTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(browseButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE)
                    .addComponent(investigatorTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE))
                .addContainerGap())
        );
        indexInfoPanelLayout.setVerticalGroup(
            indexInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(indexInfoPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(indexInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(caseNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(indexInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(caseLocationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(indexInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(jLabel3)
                    .addComponent(investigatorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(indexInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                    .addComponent(jLabel4))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        indexWizardPanel.add(indexInfoPanel, "indexInfoPanel");
        indexInfoPanel.getAccessibleContext().setAccessibleName("");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel9.setText("What type of evidence (Data Source) you want to add:");

        DataSourceButtonGroup.add(LocalDriveRadioButton);
        LocalDriveRadioButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        LocalDriveRadioButton.setText("Local Drive");
        LocalDriveRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LocalDriveRadioButtonActionPerformed(evt);
            }
        });

        DataSourceButtonGroup.add(LocalFolderRadioButton);
        LocalFolderRadioButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        LocalFolderRadioButton.setText("Local Folder");
        LocalFolderRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LocalFolderRadioButtonActionPerformed(evt);
            }
        });

        DataSourceButtonGroup.add(EncaseImageRadioButton);
        EncaseImageRadioButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        EncaseImageRadioButton.setText("Encase Image");
        EncaseImageRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EncaseImageRadioButtonActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel10.setText("Would you like to import online e-mail accounts:");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel11.setText("Username");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel12.setText("Password");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel13.setText("Provider");

        UserNameGmailTextField.setText("S2v2012@gmail.com");
        UserNameGmailTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UserNameGmailTextFieldActionPerformed(evt);
            }
        });

        UserNameHotmailTextField.setText("masregyptian@hotmail.com");

        GmailCheckBox.setText("Gmail");
        GmailCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GmailCheckBoxActionPerformed(evt);
            }
        });

        HotmailCheckBox.setText("Hotmail");
        HotmailCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HotmailCheckBoxActionPerformed(evt);
            }
        });

        PasswordGmailTextField.setText("s2v123456789");

        PasswordHotmailTextField.setText("windows98");

        javax.swing.GroupLayout CaseWizardA1Layout = new javax.swing.GroupLayout(CaseWizardA1);
        CaseWizardA1.setLayout(CaseWizardA1Layout);
        CaseWizardA1Layout.setHorizontalGroup(
            CaseWizardA1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CaseWizardA1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CaseWizardA1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addGroup(CaseWizardA1Layout.createSequentialGroup()
                        .addGroup(CaseWizardA1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LocalFolderRadioButton)
                            .addComponent(LocalDriveRadioButton)
                            .addComponent(EncaseImageRadioButton)
                            .addGroup(CaseWizardA1Layout.createSequentialGroup()
                                .addGroup(CaseWizardA1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel12))
                                .addGap(39, 39, 39)
                                .addGroup(CaseWizardA1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(GmailCheckBox)
                                    .addComponent(UserNameGmailTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                                    .addComponent(PasswordGmailTextField)))
                            .addComponent(jLabel10))
                        .addGap(61, 61, 61)
                        .addGroup(CaseWizardA1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(HotmailCheckBox)
                            .addComponent(PasswordHotmailTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                            .addComponent(UserNameHotmailTextField))))
                .addContainerGap(93, Short.MAX_VALUE))
        );
        CaseWizardA1Layout.setVerticalGroup(
            CaseWizardA1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CaseWizardA1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addGap(28, 28, 28)
                .addComponent(LocalDriveRadioButton)
                .addGap(18, 18, 18)
                .addComponent(LocalFolderRadioButton)
                .addGap(18, 18, 18)
                .addComponent(EncaseImageRadioButton)
                .addGap(31, 31, 31)
                .addComponent(jLabel10)
                .addGap(30, 30, 30)
                .addGroup(CaseWizardA1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(GmailCheckBox)
                    .addComponent(HotmailCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(CaseWizardA1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(UserNameGmailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UserNameHotmailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(CaseWizardA1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(PasswordGmailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PasswordHotmailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36))
        );

        indexWizardPanel.add(CaseWizardA1, "CaseWizardA1");

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Additonal Options"));

        YesNoIndexButtonGroup.add(NoIndexRadioButton);
        NoIndexRadioButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        NoIndexRadioButton.setText("No");

        DetectClusterCaseRadioButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        DetectClusterCaseRadioButton.setSelected(true);
        DetectClusterCaseRadioButton.setText("Detect and cluster duplicated files within case files.");

        ExportRadioButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        ExportRadioButton.setSelected(true);
        ExportRadioButton.setText("Export copy of hashes to DEM Hash Library.");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel15.setText("Would you like to index the case:");

        YesNoIndexButtonGroup.add(YesIndexRadioButton);
        YesIndexRadioButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        YesIndexRadioButton.setSelected(true);
        YesIndexRadioButton.setText("Yes (Recommended)");

        DetectClusterLibraryRadioButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        DetectClusterLibraryRadioButton.setText("Detect and cluster duplicated files compared with DEM Hash Library");
        DetectClusterLibraryRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DetectClusterLibraryRadioButtonActionPerformed(evt);
            }
        });

        YesNoMD5HashButtonGroup.add(NoMD5RadioButton);
        NoMD5RadioButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        NoMD5RadioButton.setText("No");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel14.setText(" Evidence (Data Source) should be indexed to be searchable and pefrom all functions.");

        YesNoMD5HashButtonGroup.add(YesMD5RadioButton);
        YesMD5RadioButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        YesMD5RadioButton.setSelected(true);
        YesMD5RadioButton.setText("Yes");

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel16.setText("Would you like to calculate MD5 Hashe Values for the case so you can perform \"Hash Analysis\".");

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel17.setText("Options:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DetectClusterLibraryRadioButton)
                    .addComponent(DetectClusterCaseRadioButton)
                    .addComponent(ExportRadioButton)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(YesIndexRadioButton)
                            .addComponent(YesMD5RadioButton))
                        .addGap(59, 59, 59)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NoMD5RadioButton)
                            .addComponent(NoIndexRadioButton)))
                    .addComponent(jLabel16)
                    .addComponent(jLabel15)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14)
                .addGap(18, 18, 18)
                .addComponent(jLabel15)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NoIndexRadioButton)
                    .addComponent(YesIndexRadioButton))
                .addGap(18, 18, 18)
                .addComponent(jLabel16)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NoMD5RadioButton)
                    .addComponent(YesMD5RadioButton))
                .addGap(29, 29, 29)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ExportRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(DetectClusterCaseRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DetectClusterLibraryRadioButton)
                .addContainerGap())
        );

        CaseWizardA2.add(jPanel3);

        indexWizardPanel.add(CaseWizardA2, "CaseWizardA2");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Indexing Options"));

        CacheImageCheckBox.setFont(new java.awt.Font("Tahoma", 1, 11));
        CacheImageCheckBox.setSelected(true);
        CacheImageCheckBox.setText("Cache Images to view on Multimedia Viewer");

        ExcludeSystemFilesCheckBox.setFont(new java.awt.Font("Tahoma", 1, 11));
        ExcludeSystemFilesCheckBox.setText("Exclude Windows System Files from Indexing: ");
        ExcludeSystemFilesCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExcludeSystemFilesCheckBoxActionPerformed(evt);
            }
        });

        IndexZipCheckBox.setFont(new java.awt.Font("Tahoma", 1, 11));
        IndexZipCheckBox.setSelected(true);
        IndexZipCheckBox.setText("Index archieved folders (ZIP, RAR)");

        WindowsFilesRadioButton.setText("Windows Files");

        ProgramFilesRadioButton.setText("Program Files");

        IndexEmbeddedFilesCheckBox.setFont(new java.awt.Font("Tahoma", 1, 11));
        IndexEmbeddedFilesCheckBox.setSelected(true);
        IndexEmbeddedFilesCheckBox.setText("Index embedded files on MS Office and Attachments");

        jLabel6.setForeground(new java.awt.Color(255, 0, 0));
        jLabel6.setText("(Warning: Only choose this when you know that no evidences could be found within System Files)");

        IndexChatCheckBox.setFont(new java.awt.Font("Tahoma", 1, 11));
        IndexChatCheckBox.setSelected(true);
        IndexChatCheckBox.setText("Index Chat Sessions ( MSN, YAHOO, and SKYPE)");

        DetectBrowserCheckBox.setFont(new java.awt.Font("Tahoma", 1, 11));
        DetectBrowserCheckBox.setSelected(true);
        DetectBrowserCheckBox.setText("Detect and read Browsers (FireFox, IE) Sessions");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(IndexZipCheckBox)
                    .addComponent(IndexEmbeddedFilesCheckBox)
                    .addComponent(CacheImageCheckBox)
                    .addComponent(ExcludeSystemFilesCheckBox)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(ProgramFilesRadioButton)
                            .addComponent(WindowsFilesRadioButton)))
                    .addComponent(IndexChatCheckBox)
                    .addComponent(DetectBrowserCheckBox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(IndexZipCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IndexChatCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IndexEmbeddedFilesCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DetectBrowserCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CacheImageCheckBox)
                .addGap(18, 18, 18)
                .addComponent(ExcludeSystemFilesCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ProgramFilesRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(WindowsFilesRadioButton)
                .addGap(47, 47, 47))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout CaseWizardA3Layout = new javax.swing.GroupLayout(CaseWizardA3);
        CaseWizardA3.setLayout(CaseWizardA3Layout);
        CaseWizardA3Layout.setHorizontalGroup(
            CaseWizardA3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CaseWizardA3Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );
        CaseWizardA3Layout.setVerticalGroup(
            CaseWizardA3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CaseWizardA3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        indexWizardPanel.add(CaseWizardA3, "CaseWizardA3");

        indexFooterPanel.setMaximumSize(new java.awt.Dimension(608, 63));
        indexFooterPanel.setPreferredSize(new java.awt.Dimension(608, 63));

        finishButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        finishButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/main/resources/finish.png"))); // NOI18N
        finishButton.setText("Finish");
        finishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishButtonActionPerformed(evt);
            }
        });

        backButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/main/resources/back.png"))); // NOI18N
        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        nextButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        nextButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/main/resources/next.png"))); // NOI18N
        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/main/resources/cancel.png"))); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout indexFooterPanelLayout = new javax.swing.GroupLayout(indexFooterPanel);
        indexFooterPanel.setLayout(indexFooterPanelLayout);
        indexFooterPanelLayout.setHorizontalGroup(
            indexFooterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(indexFooterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backButton, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nextButton, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                .addGap(113, 113, 113)
                .addComponent(cancelButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(finishButton, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        indexFooterPanelLayout.setVerticalGroup(
            indexFooterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(indexFooterPanelLayout.createSequentialGroup()
                .addGroup(indexFooterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(indexFooterPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(indexFooterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(backButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nextButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(indexFooterPanelLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(cancelButton))
                    .addGroup(indexFooterPanelLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(finishButton)))
                .addGap(309, 309, 309))
        );

        indexHeaderPanel.setBackground(new java.awt.Color(51, 51, 51));
        indexHeaderPanel.setMaximumSize(new java.awt.Dimension(628, 76));
        indexHeaderPanel.setPreferredSize(new java.awt.Dimension(628, 76));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 24));
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/main/resources/2 copy.jpg"))); // NOI18N
        jLabel5.setText(" ");

        javax.swing.GroupLayout indexHeaderPanelLayout = new javax.swing.GroupLayout(indexHeaderPanel);
        indexHeaderPanel.setLayout(indexHeaderPanelLayout);
        indexHeaderPanelLayout.setHorizontalGroup(
            indexHeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 721, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        indexHeaderPanelLayout.setVerticalGroup(
            indexHeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
        );

        jSeparator1.setMaximumSize(new java.awt.Dimension(0, 2));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(indexFooterPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 711, Short.MAX_VALUE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(indexWizardPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(indexHeaderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 721, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(indexHeaderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(indexWizardPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 1, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(indexFooterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkforCaseLocationPath() {
        String text = caseNameTextField.getText().trim();

        if (!CaseNameChecker.isInvalidText(text)) {
            caseLocationTextField.setText(PATH + "\\" + text);
        } else {
            String word = CaseNameChecker.removeInvalid(text);
            caseLocationTextField.setText(PATH + "\\" + word);
        }
    }

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        JDirectoryDialog directoryDialog = new JDirectoryDialog();
        directoryDialog.show(CaseWizardDialog.this);
        String path = directoryDialog.getSelectedDirectory();

        if (path != null) {
            PATH = path;

            if (caseNameTextField.getText().trim().isEmpty()) {
                caseLocationTextField.setText(path);
            } else {
                caseLocationTextField.setText(path + "\\" + caseNameTextField.getText().trim());
            }
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        switch (currentIndex) {
            case 0:
                if (checkWizardFirstPanel()) {
                    next();
                }
                break;

            case 1:
                if (checkWizardSecondPanel()) {
                    next();
                }
                break;
            case 2:
                nextLast();
                break;

        }
    }//GEN-LAST:event_nextButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        switch (currentIndex) {

            case 1:
                backFirst();
                break;

            case 2:
                back();
                break;
            case 3:
                back();
                break;
        }
    }//GEN-LAST:event_backButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        currentCase = null;
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void openDialog(FilesFilter filter, DefaultListModel model, JList list) {
        fileChooser.setFileFilter(filter);

        int result = fileChooser.showOpenDialog(CaseWizardDialog.this);

        if (result == JFileChooser.APPROVE_OPTION) {
            String path = fileChooser.getSelectedFile().getAbsolutePath();
            addToList(path, model, list);
        }
    }

    private void autoDetectIEButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoDetectIEButtonActionPerformed
    }//GEN-LAST:event_autoDetectIEButtonActionPerformed

    private void autoDetectFFButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoDetectFFButtonActionPerformed
    }//GEN-LAST:event_autoDetectFFButtonActionPerformed

    private void autoDetectMSNButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoDetectMSNButtonActionPerformed
    }//GEN-LAST:event_autoDetectMSNButtonActionPerformed

    private void autoDetectYahooButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoDetectYahooButtonActionPerformed
    }//GEN-LAST:event_autoDetectYahooButtonActionPerformed

    private void finishButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishButtonActionPerformed

        List<EmailConfiguration> emailInfos = new ArrayList<EmailConfiguration>();

        // get email data if user add emails
        if (this.GmailCheckBox.isSelected()) {
            String user = this.UserNameGmailTextField.getText().trim();
            String pass = this.PasswordGmailTextField.getText().trim();
            EmailConfiguration.SOURCE source = EmailConfiguration.SOURCE.GMAIL;

            // check input
            // TODO: check inputs when selecting radio button in email page
            // and show message
            if (user.isEmpty() || pass.isEmpty()) {
                return;
            }

            EmailConfiguration config = EmailConfiguration.newInstance(user, pass, source);
            emailInfos.add(config);
        }


        if (this.HotmailCheckBox.isSelected()) {
            String user = this.UserNameHotmailTextField.getText().trim();
            String pass = this.PasswordHotmailTextField.getText().trim();
            EmailConfiguration.SOURCE source = EmailConfiguration.SOURCE.HOTMAIL;

            // check input
            // TODO: check inputs when selecting radio button in email page
            // and show message
            if (user.isEmpty() || pass.isEmpty()) {
                return;
            }

            EmailConfiguration config = EmailConfiguration.newInstance(user, pass, source);
            emailInfos.add(config);
        }

        this.setVisible(false);

        // set direct indexing the case after creating
        this.indexTheCase = YesIndexRadioButton.isSelected() ;
        
        // Build Case
        currentCase = new Case.Builder(caseNameTextField.getText().trim(),
                caseLocationTextField.getText().trim(),
                investigatorTextField.getText().trim(),
                descriptionTextArea.getText().trim(),
                CaseSource, new Date(), 0).
                isCacheImages(CacheImageCheckBox.isSelected())
                .isClusterWithCase(DetectClusterCaseRadioButton.isSelected())
                .isClusterWithLibrary(DetectClusterLibraryRadioButton.isSelected())
                .isExcludeFileSystems(ExcludeSystemFilesCheckBox.isSelected())
                .isExportLibrary(ExportRadioButton.isSelected())
                .isHash(YesMD5RadioButton.isSelected())
                .isIndex(YesIndexRadioButton.isSelected())
                .isIndexArchive(IndexZipCheckBox.isSelected())
                .isIndexEmbedded(IndexEmbeddedFilesCheckBox.isSelected())
                .isIndexChatSessions(IndexChatCheckBox.isSelected())
                .isDetectBrowserSessiond(DetectBrowserCheckBox.isSelected())
                .createEmailConfig(emailInfos).build();

        boolean caseStatus = createCase(currentCase);

        if (!caseStatus) {
            showErrorMessage("Cannot Create New Case", "Error in Creating new Case");
        }

        if (GmailCheckBox.isSelected() || HotmailCheckBox.isSelected()) {

            JFrame frame = new JFrame();

            for (EmailConfiguration s : emailInfos) {

                if (s.getSource() == SOURCE.HOTMAIL) {

                    EmailDownloaderDialog hotmail_dialogue = null;
                    String Username = s.getUserName();
                    String Password = s.getPassword();
                    try {
                        hotmail_dialogue = new EmailDownloaderDialog(frame, true, currentCase);

                        hotmail_dialogue.downloader = new OnlineEmailDownloader(hotmail_dialogue,
                                currentCase.getCaseLocation() + "\\" + FilesPath.ATTACHMENTS,
                                currentCase.getCaseLocation() + "\\" + FilesPath.EMAIL_DB);

                        if (hotmail_dialogue.downloader.ConnectPop3(Username, Password)) {
                            hotmail_dialogue.downloader.execute();
                            hotmail_dialogue.setVisible(true);
                           
                        }
                    } catch (Exception ex) {
                        Logger.getLogger(CaseWizardDialog.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } // End IF Hotmail

              if (s.getSource() == SOURCE.GMAIL) {
                    EmailDownloaderDialog gmail_dialogue = null;
                    String Username = s.getUserName();
                    String Password = s.getPassword();
                    try {
                        gmail_dialogue = new EmailDownloaderDialog(frame, true, currentCase);

                        gmail_dialogue.downloader = new OnlineEmailDownloader(gmail_dialogue,
                                currentCase.getCaseLocation() + "\\" + FilesPath.ATTACHMENTS,
                                currentCase.getCaseLocation() + "\\" + FilesPath.EMAIL_DB);

                        if (gmail_dialogue.downloader.ConnectIMAP(Username, Password)) {
                            gmail_dialogue.downloader.execute();
                            gmail_dialogue.setVisible(true);
                        }
                    } catch (Exception ex) {
                        Logger.getLogger(CaseWizardDialog.class.getName()).log(Level.SEVERE, null, ex);
                    }

                } // End IF Gmail

            } // End For Each Email Config
        } // End if Emails are Selected 


    }//GEN-LAST:event_finishButtonActionPerformed

private void ExcludeSystemFilesCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExcludeSystemFilesCheckBoxActionPerformed
// TODO add your handling code here:
    if (!ProgramFilesRadioButton.isVisible() && !WindowsFilesRadioButton.isVisible()) {
        ProgramFilesRadioButton.setVisible(true);
        WindowsFilesRadioButton.setVisible(true);
    } else {

        ProgramFilesRadioButton.setVisible(false);
        WindowsFilesRadioButton.setVisible(false);

    }


}//GEN-LAST:event_ExcludeSystemFilesCheckBoxActionPerformed

private void LocalDriveRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LocalDriveRadioButtonActionPerformed

    JDirectoryDialog directoryDialog = new JDirectoryDialog();
    directoryDialog.show(CaseWizardDialog.this);
    String path = directoryDialog.getSelectedDirectory();
    if (path == null) {
        return;
    }
    CaseSource = path;


}//GEN-LAST:event_LocalDriveRadioButtonActionPerformed

private void LocalFolderRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LocalFolderRadioButtonActionPerformed
// TODO add your handling code here:

    final JFileChooser fc = new JFileChooser();
    fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    int returnVal = fc.showOpenDialog(this);

    if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file = fc.getSelectedFile();
        CaseSource = file.getPath();
    } else {
    }
}//GEN-LAST:event_LocalFolderRadioButtonActionPerformed

private void EncaseImageRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EncaseImageRadioButtonActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_EncaseImageRadioButtonActionPerformed

private void GmailCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GmailCheckBoxActionPerformed
// TODO add your handling code here:

    if (GmailCheckBox.isSelected()) {

        UserNameGmailTextField.setEnabled(true);
        PasswordGmailTextField.setEnabled(true);

    } else {

        UserNameGmailTextField.setEnabled(false);
        PasswordGmailTextField.setEnabled(false);
    }
}//GEN-LAST:event_GmailCheckBoxActionPerformed

private void HotmailCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HotmailCheckBoxActionPerformed
// TODO add your handling code here:
    if (HotmailCheckBox.isSelected()) {

        UserNameHotmailTextField.setEnabled(true);
        PasswordHotmailTextField.setEnabled(true);

    } else {

        UserNameHotmailTextField.setEnabled(false);
        PasswordHotmailTextField.setEnabled(false);
    }

}//GEN-LAST:event_HotmailCheckBoxActionPerformed

private void DetectClusterLibraryRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DetectClusterLibraryRadioButtonActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_DetectClusterLibraryRadioButtonActionPerformed

private void UserNameGmailTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UserNameGmailTextFieldActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_UserNameGmailTextFieldActionPerformed

    public boolean checkDirectIndex() {
        return indexTheCase;
    }

    private boolean createCase(Case aCase) {
        try {
            setCurrentCase(aCase);
            CaseManager.CaseOperation.writeCase(aCase);

            return true;
        } catch (Exception e) {
            e.printStackTrace();
        }

        return false;
    }
    
    /**
     * Create folders to store email and attachments in this case
     */
    private void createEmailFolders(final String path) {

        File attachments = new File(path + "\\" + FilesPath.ATTACHMENTS);
        File emailDB = new File(path + "\\" + FilesPath.EMAIL_DB);
        
        if ( !attachments.exists() )
            attachments.mkdir();

        if ( !emailDB.exists())
            emailDB.mkdir();
    }
    

    /*
     * Check The IndexPanelInfo Before Go to the Next Panel
     * Check caseName if empty or is its existed
     * @return true if the all information are correct
     */
    private boolean checkWizardFirstPanel() {
        String caseName = getCaseName(caseNameTextField.getText().trim());
        String caseLocation = caseLocationTextField.getText().trim();
        String caseDesc = descriptionTextArea.getText();
        if (caseName == null || caseName.isEmpty()) {
            showErrorMessage("You must choose a Case Name", "Empty Index Name");
            return false;
        }
        if (caseDesc == null || caseDesc.isEmpty()) {
            showErrorMessage("You must choose Description for Case ", "Empty Description ");
            return false;
        }

        if (caseLocation == null || caseLocation.isEmpty()) {
            showErrorMessage("You must choose a Location for the Case ", "Empty Case Location");
            return false;
        }
        if (CaseManager.caseExists(caseName)) {
            showErrorMessage("The Case Name is Already Taken, Choose Another Name", "Case Name Exists");
            return false;
        }

        if (caseName.contains("-")) { // doesn't needed now, case name checker will remove this character!
            showErrorMessage("Case Name Should Not Contains Illegal Chatacters (-)", "Please Change Case Name And Remove Any Special Character");
            return false;
        }

        String investigator = investigatorTextField.getText().trim();
        if (investigator.isEmpty()) {
            showErrorMessage("Investigator name is empty", "Please Write A Clear Investigator Name");
            return false;
        }

        return (true);
    }

    private boolean checkWizardSecondPanel() {
        String caseSource = CaseSource;

        if (caseSource == null || caseSource.isEmpty()) {
            showErrorMessage("You must choose a Case Source", "Empty Source");
            return false;
        }

        if (GmailCheckBox.isSelected()) {

            if (UserNameGmailTextField.getText().trim().isEmpty()) {
                showErrorMessage("Username of Gmail is Empty ", "Please Write UserName");
                return false;
            }

            if (PasswordGmailTextField.getPassword().length <= 0) {

                showErrorMessage("Password is of Gmail Empty ", "Please Write Password");
                return false;

            }

        } else if (HotmailCheckBox.isSelected()) {
            if (UserNameHotmailTextField.getText().trim().isEmpty()) {
                showErrorMessage("Username of Hotmail is Empty ", "Please Write UserName");
                return false;
            }

            if (PasswordHotmailTextField.getPassword().length <= 0) {

                showErrorMessage("Password is of Hotmail Empty ", "Please Write Password");
                return false;
            }

        }
        return (true);
    }

    /**
     * Check if their is folder name in case location text field
     */
    private String getCaseName(String path) {
        File file = new File(path);
        String name = file.getName();

        if (name.equalsIgnoreCase("CASES")) {
            return null;
        }

        return name;
    }

    /**
     * Move Current Panel in Card Layout to the Next Panel
     */
    private void next() {
        currentIndex++;
        showPanel(cardsName[currentIndex], indexWizardPanel);
        backButton.setEnabled(true);
        nextButton.setEnabled(true);
    }

    /**
     * Move this Panel to the Next Last Panel In the Card Layout
     * Enable This Finish Button
     */
    private void nextLast() {
        currentIndex++;
        showPanel(cardsName[currentIndex], indexWizardPanel);
        backButton.setEnabled(true);
        nextButton.setEnabled(false);
        finishButton.setEnabled(true);
    }

    /**
     * Return to Previous Panel in The Card Layout
     */
    private void backFirst() {
        currentIndex--;


        showPanel(cardsName[currentIndex], indexWizardPanel);
        backButton.setEnabled(false);
        nextButton.setEnabled(true);
    }

    /**
     * Return to The First Panel in the Card Layout
     * Disable Finish Button
     */
    private void back() {
        currentIndex--;

        showPanel(cardsName[currentIndex], indexWizardPanel);
        backButton.setEnabled(true);
        nextButton.setEnabled(true);
        finishButton.setEnabled(false);
    }

    /**
     * Show The Selected Panel in The CardLayout
     * @param panelName
     * @param name 
     */
    private void showPanel(String panelName, JPanel name) {
        CardLayout card = (CardLayout) name.getLayout();
        card.show(name, panelName);
    }

    // TODO: General List Model Methods, Move it to Utilties
    private void AddFromModelToList(DefaultListModel model, ArrayList<String> list) {
        for (int i = 0; i < model.size(); i++) {
            list.add((String) model.getElementAt(i));
        }
    }

    private void addToList(String path, DefaultListModel model, JList list) {
        if ((path != null || !path.startsWith("null")) && !existsInModel(path, model)) {
            model.addElement(path);
            list.setModel(model);
        }
    }

    private boolean existsInModel(String path, DefaultListModel model) {
        return model.contains(path);
    }

    private void removeFromList(String path, DefaultListModel model, JList list) {
        if (path != null) {
            model.removeElement(path);
            list.setModel(model);
        }
    }

    private void showEmptyMessage(String msg) {
        JOptionPane.showMessageDialog(this, msg, "Object Not Found", JOptionPane.ERROR_MESSAGE);
    }

    private void showErrorMessage(String msg, String title) {
        JOptionPane.showMessageDialog(CaseWizardDialog.this, msg, title, JOptionPane.ERROR_MESSAGE);
    }

    // TODO: check why there is acces/mutu ?
    public Case getCurrentCase() {
        return currentCase;
    }

    public void setCurrentCase(Case in) {
        currentCase = in;
    }

    public void run() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    /*
     * Case Name Checker
     * Check the Validity of The Case That Created By The User
     */
    private static class CaseNameChecker {

        private static boolean isInvalidText(String text) {
            for (String word : illegalCharacters) {
                if (text.contains(word)) {
                    return true;
                }
            }

            for (String word : reservedNames) {
                if (text.equalsIgnoreCase(word)) {
                    return true;
                }
            }

            return false;
        }

        private static String removeInvalid(String text) {
            for (String s : reservedNames) {
                if (text.equalsIgnoreCase(s)) {
                    text = "";
                    return text;
                }
            }

            StringBuilder result = new StringBuilder("");

            for (int i = 0; i < text.length(); i++) {
                String ch = text.charAt(i) + "";
                if (!isInvalidText(ch)) {
                    result.append(ch);
                }
            }

            return result.toString();
        }
        /*
         * Illegal case strings and characters
         */
        private static final String[] illegalCharacters = {"<", ">", ":", "\"", "/", "\\", "|", "?", "*", "-"};
        private static final String[] reservedNames = {
            "CON", "PRN", "AUX", "NUL", "COM1", "COM2", "COM3", "COM4", "COM5", "COM6", "COM7",
            "COM8", "COM9", "LPT1", "LPT2", "LPT3", "LPT4", "LPT5", "LPT6", "LPT7", "LPT8", "LPT9"
        };
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox CacheImageCheckBox;
    private javax.swing.JPanel CaseWizardA1;
    private javax.swing.JPanel CaseWizardA2;
    private javax.swing.JPanel CaseWizardA3;
    private javax.swing.ButtonGroup DataSourceButtonGroup;
    private javax.swing.JCheckBox DetectBrowserCheckBox;
    private javax.swing.JCheckBox DetectClusterCaseRadioButton;
    private javax.swing.JCheckBox DetectClusterLibraryRadioButton;
    private javax.swing.JRadioButton EncaseImageRadioButton;
    private javax.swing.JCheckBox ExcludeSystemFilesCheckBox;
    private javax.swing.JCheckBox ExportRadioButton;
    private javax.swing.JCheckBox GmailCheckBox;
    private javax.swing.JCheckBox HotmailCheckBox;
    private javax.swing.JCheckBox IndexChatCheckBox;
    private javax.swing.JCheckBox IndexEmbeddedFilesCheckBox;
    private javax.swing.JCheckBox IndexZipCheckBox;
    private javax.swing.JRadioButton LocalDriveRadioButton;
    private javax.swing.JRadioButton LocalFolderRadioButton;
    private javax.swing.JRadioButton NoIndexRadioButton;
    private javax.swing.JRadioButton NoMD5RadioButton;
    private javax.swing.JPasswordField PasswordGmailTextField;
    private javax.swing.JPasswordField PasswordHotmailTextField;
    private javax.swing.JRadioButton ProgramFilesRadioButton;
    private javax.swing.JTextField UserNameGmailTextField;
    private javax.swing.JTextField UserNameHotmailTextField;
    private javax.swing.JRadioButton WindowsFilesRadioButton;
    private javax.swing.JRadioButton YesIndexRadioButton;
    private javax.swing.JRadioButton YesMD5RadioButton;
    private javax.swing.ButtonGroup YesNoIndexButtonGroup;
    private javax.swing.ButtonGroup YesNoMD5HashButtonGroup;
    private javax.swing.JButton backButton;
    private javax.swing.JButton browseButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField caseLocationTextField;
    private javax.swing.JTextField caseNameTextField;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.JButton finishButton;
    private javax.swing.JPanel indexFooterPanel;
    private javax.swing.JPanel indexHeaderPanel;
    private javax.swing.JPanel indexInfoPanel;
    private javax.swing.JPanel indexWizardPanel;
    private javax.swing.JTextField investigatorTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton nextButton;
    // End of variables declaration//GEN-END:variables
}
