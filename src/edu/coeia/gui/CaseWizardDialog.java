package edu.coeia.gui;

import chrriis.dj.nativeswing.swtimpl.components.JFileDialog;
import chrriis.dj.nativeswing.swtimpl.components.JDirectoryDialog;

import edu.coeia.cases.Case;
import edu.coeia.chat.MSNParser;
import edu.coeia.chat.SkypeParser;
import edu.coeia.chat.SkypeMessage;
import edu.coeia.utility.FilesPath;
import edu.coeia.utility.Tuple;
import edu.coeia.utility.FilesFilter;
import edu.coeia.utility.Utilities;

import javax.swing.JPanel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JFileChooser;
import javax.swing.DefaultListModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import java.io.File;
import java.io.IOException;

import java.awt.CardLayout;
import java.awt.Frame;

/*
 * IndexWizard.java
 *
 * @author wajdyessam
 * 
 * Created on Jul 13, 2010, 2:00:51 PM
 * 
 */

public class CaseWizardDialog extends javax.swing.JDialog {

    private DefaultListModel documentModel;
    private DefaultListModel msnModel, yahooModel, skypeModel;
    private DefaultListModel pstModel;
    private DefaultListModel ieModel, ffModel;

    private Case index;
    private String PATH = FilesPath.CASES_PATH;

    private Frame parent;
    private boolean isFullVersion;

    private JFileChooser fileChooser;
    
    /*
     * Wizard CardLayout - Panels Names
     */
    private String[] cardsName = {"indexInfoPanel", "indexFileSystemPanel", "indexEmailPanel",
        "indexBroswerPanel", "indexChatPanel", "indexChatPanel2"};
    private int currentIndex = 0;
    

    /** Creates new form IndexWizard */
    public CaseWizardDialog(java.awt.Frame parent, boolean modal, boolean isFullVersion) {
        super(parent, modal);
        initComponents();
        
        this.parent = parent;
        this.isFullVersion = isFullVersion;

        // show first card indexInfoPanel and disable back button and finish button
        showPanel(cardsName[0], indexWizardPanel);
        backButton.setEnabled(false);
        finishButton.setEnabled(false);
        
        setLocationRelativeTo(parent);

        // creating model for all lists
        documentModel = new DefaultListModel();
        pstModel = new DefaultListModel();
        msnModel = new DefaultListModel();
        yahooModel = new DefaultListModel();
        ieModel = new DefaultListModel();
        ffModel = new DefaultListModel();
        skypeModel = new DefaultListModel();

        // reset all checkBoxs
        setPSTCheckBox(false);
        setMSNCheckBox(false);
        setYahooCheckBox(false);
        setIECheckBox(false);
        setFFCheckBox(false);
        setSkypeeCheckBox(false);

        // configure filechooser
        fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

        // initializing index location for case
        indexLocationTextField.setText(PATH);

        // add listener for index name text feild
        indexNameTextField.getDocument().addDocumentListener(new DocumentListener() {

            public void insertUpdate(DocumentEvent e) {
                checkforIndexLocationName();
            }

            public void removeUpdate(DocumentEvent e) {
                checkforIndexLocationName();
            }

            public void changedUpdate(DocumentEvent e) {
            }
        });

        // disable all checkboxes selection by defautl
        selectAllCheckBoxes(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        indexWizardPanel = new javax.swing.JPanel();
        indexInfoPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        indexNameTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        indexLocationTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        investigatorTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();
        indexFileSystemPanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        documentList = new javax.swing.JList();
        selectAllDrivesButton = new javax.swing.JButton();
        addFolderButton = new javax.swing.JButton();
        addFileButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        clearListButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        htmlCheckBox = new javax.swing.JCheckBox();
        rtfCheckBox = new javax.swing.JCheckBox();
        docCheckBox = new javax.swing.JCheckBox();
        pdfCheckBox = new javax.swing.JCheckBox();
        xmlCheckBox = new javax.swing.JCheckBox();
        txtCheckBox = new javax.swing.JCheckBox();
        imagesCheckBox = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        allRadioButton = new javax.swing.JRadioButton();
        manualRadioButton = new javax.swing.JRadioButton();
        indexEmailPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        pstList = new javax.swing.JList();
        autoDetectPSTButton = new javax.swing.JButton();
        manulPSTButton = new javax.swing.JButton();
        removePSTButton = new javax.swing.JButton();
        clearPSTButton = new javax.swing.JButton();
        outlookCheckBox = new javax.swing.JCheckBox();
        indexBroswerPanel = new javax.swing.JPanel();
        ieCheckBox = new javax.swing.JCheckBox();
        jScrollPane7 = new javax.swing.JScrollPane();
        ieList = new javax.swing.JList();
        autoDetectIEButton = new javax.swing.JButton();
        removeIEButton = new javax.swing.JButton();
        clearIEButton = new javax.swing.JButton();
        ffCheckBox = new javax.swing.JCheckBox();
        jScrollPane8 = new javax.swing.JScrollPane();
        ffList = new javax.swing.JList();
        autoDetectFFButton = new javax.swing.JButton();
        removeFFButton = new javax.swing.JButton();
        clearFFButton = new javax.swing.JButton();
        indexChatPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        msnList = new javax.swing.JList();
        autoDetectMSNButton = new javax.swing.JButton();
        removeMSNButton = new javax.swing.JButton();
        clearMSNButton = new javax.swing.JButton();
        msnCheckBox = new javax.swing.JCheckBox();
        yahooCheckBox = new javax.swing.JCheckBox();
        jScrollPane6 = new javax.swing.JScrollPane();
        yahooList = new javax.swing.JList();
        autoDetectYahooButton = new javax.swing.JButton();
        removeYahooButton = new javax.swing.JButton();
        clearYahooButton = new javax.swing.JButton();
        indexChatPanel2 = new javax.swing.JPanel();
        skypeeCheckBox = new javax.swing.JCheckBox();
        jScrollPane9 = new javax.swing.JScrollPane();
        skypeeList = new javax.swing.JList();
        autoDetectSkypeeButton = new javax.swing.JButton();
        removeSkypeeButton = new javax.swing.JButton();
        clearSkypeeButton = new javax.swing.JButton();
        indexFooterPanel = new javax.swing.JPanel();
        finishButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        indexHeaderPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Digital Evidence Miner: Create Index Wizard");
        setResizable(false);

        indexWizardPanel.setMaximumSize(new java.awt.Dimension(608, 361));
        indexWizardPanel.setPreferredSize(new java.awt.Dimension(608, 361));
        indexWizardPanel.setLayout(new java.awt.CardLayout());

        indexInfoPanel.setMaximumSize(new java.awt.Dimension(608, 361));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel1.setText("Index Name:");

        indexNameTextField.setText(" ");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel2.setText("Index Location:");

        indexLocationTextField.setEditable(false);
        indexLocationTextField.setText(" ");

        browseButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        browseButton.setText("Browse...");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel3.setText("Investigator Name:");

        investigatorTextField.setText(" ");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel4.setText("Description:");

        descriptionTextArea.setColumns(20);
        descriptionTextArea.setFont(new java.awt.Font("Courier New", 1, 18));
        descriptionTextArea.setRows(5);
        jScrollPane1.setViewportView(descriptionTextArea);

        javax.swing.GroupLayout indexInfoPanelLayout = new javax.swing.GroupLayout(indexInfoPanel);
        indexInfoPanel.setLayout(indexInfoPanelLayout);
        indexInfoPanelLayout.setHorizontalGroup(
            indexInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(indexInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(indexInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(indexInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(indexNameTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, indexInfoPanelLayout.createSequentialGroup()
                        .addComponent(indexLocationTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(browseButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE)
                    .addComponent(investigatorTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE))
                .addContainerGap())
        );
        indexInfoPanelLayout.setVerticalGroup(
            indexInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(indexInfoPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(indexInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(indexNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(indexInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(indexLocationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(indexInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(jLabel3)
                    .addComponent(investigatorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(indexInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                    .addComponent(jLabel4))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        indexWizardPanel.add(indexInfoPanel, "indexInfoPanel");

        indexFileSystemPanel.setMaximumSize(new java.awt.Dimension(608, 361));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel6.setForeground(new java.awt.Color(51, 51, 255));
        jLabel6.setText("Document In Index:");

        documentList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        documentList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                documentListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(documentList);

        selectAllDrivesButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        selectAllDrivesButton.setText(" All Local Drives");
        selectAllDrivesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllDrivesButtonActionPerformed(evt);
            }
        });

        addFolderButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        addFolderButton.setText("Add Folder");
        addFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFolderButtonActionPerformed(evt);
            }
        });

        addFileButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        addFileButton.setText("Add File");
        addFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFileButtonActionPerformed(evt);
            }
        });

        removeButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        clearListButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        clearListButton.setText("Clear List");
        clearListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearListButtonActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel7.setForeground(new java.awt.Color(51, 51, 255));
        jLabel7.setText("Extension Allowed:");

        htmlCheckBox.setFont(new java.awt.Font("Tahoma", 1, 11));
        htmlCheckBox.setText("Web Pagses (HTML/HTM)");

        rtfCheckBox.setFont(new java.awt.Font("Tahoma", 1, 11));
        rtfCheckBox.setText("Plain Document (RTF)");

        docCheckBox.setFont(new java.awt.Font("Tahoma", 1, 11));
        docCheckBox.setText("Word Documents (DOC)");

        pdfCheckBox.setFont(new java.awt.Font("Tahoma", 1, 11));
        pdfCheckBox.setText("PDF Documents");

        xmlCheckBox.setFont(new java.awt.Font("Tahoma", 1, 11));
        xmlCheckBox.setText("XML Documents");

        txtCheckBox.setFont(new java.awt.Font("Tahoma", 1, 11));
        txtCheckBox.setText("Text Files (TXT)");

        imagesCheckBox.setFont(new java.awt.Font("Tahoma", 1, 11));
        imagesCheckBox.setText("Cache All Images Format");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel8.setForeground(new java.awt.Color(51, 51, 255));
        jLabel8.setText("Advanced Options");

        buttonGroup1.add(allRadioButton);
        allRadioButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        allRadioButton.setText("Select All Supported Extensions");
        allRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(manualRadioButton);
        manualRadioButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        manualRadioButton.setSelected(true);
        manualRadioButton.setText("Manual Select Extensions");
        manualRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualRadioButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout indexFileSystemPanelLayout = new javax.swing.GroupLayout(indexFileSystemPanel);
        indexFileSystemPanel.setLayout(indexFileSystemPanelLayout);
        indexFileSystemPanelLayout.setHorizontalGroup(
            indexFileSystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(indexFileSystemPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel6)
                .addGap(433, 433, 433))
            .addGroup(indexFileSystemPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 691, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(indexFileSystemPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(indexFileSystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imagesCheckBox)
                    .addComponent(jLabel8))
                .addContainerGap(534, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, indexFileSystemPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selectAllDrivesButton, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addFolderButton, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                .addGap(10, 10, 10)
                .addComponent(addFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearListButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(indexFileSystemPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(indexFileSystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(htmlCheckBox)
                    .addComponent(rtfCheckBox))
                .addGap(18, 18, 18)
                .addGroup(indexFileSystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(docCheckBox)
                    .addComponent(txtCheckBox))
                .addGap(30, 30, 30)
                .addGroup(indexFileSystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(xmlCheckBox)
                    .addComponent(pdfCheckBox))
                .addContainerGap(210, Short.MAX_VALUE))
            .addGroup(indexFileSystemPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(indexFileSystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(manualRadioButton)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(allRadioButton)
                .addGap(117, 117, 117))
        );
        indexFileSystemPanelLayout.setVerticalGroup(
            indexFileSystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(indexFileSystemPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(11, 11, 11)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(indexFileSystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(clearListButton, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(removeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(addFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(addFolderButton, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(selectAllDrivesButton, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(indexFileSystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(manualRadioButton)
                    .addComponent(allRadioButton))
                .addGap(13, 13, 13)
                .addGroup(indexFileSystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(indexFileSystemPanelLayout.createSequentialGroup()
                        .addComponent(pdfCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(xmlCheckBox))
                    .addGroup(indexFileSystemPanelLayout.createSequentialGroup()
                        .addGroup(indexFileSystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(htmlCheckBox)
                            .addComponent(docCheckBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(indexFileSystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rtfCheckBox)
                            .addComponent(txtCheckBox))))
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(imagesCheckBox)
                .addContainerGap())
        );

        indexWizardPanel.add(indexFileSystemPanel, "indexFileSystemPanel");

        indexEmailPanel.setMaximumSize(new java.awt.Dimension(608, 361));
        indexEmailPanel.setPreferredSize(new java.awt.Dimension(608, 361));

        pstList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(pstList);

        autoDetectPSTButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        autoDetectPSTButton.setText("Auto Detect PST Files");
        autoDetectPSTButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoDetectPSTButtonActionPerformed(evt);
            }
        });

        manulPSTButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        manulPSTButton.setText("Manual Selection");
        manulPSTButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manulPSTButtonActionPerformed(evt);
            }
        });

        removePSTButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        removePSTButton.setText("Remove Selected");
        removePSTButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removePSTButtonActionPerformed(evt);
            }
        });

        clearPSTButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        clearPSTButton.setText("Clear All");
        clearPSTButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearPSTButtonActionPerformed(evt);
            }
        });

        outlookCheckBox.setFont(new java.awt.Font("Tahoma", 1, 11));
        outlookCheckBox.setText("Add Microsoft Outlook");
        outlookCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outlookCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout indexEmailPanelLayout = new javax.swing.GroupLayout(indexEmailPanel);
        indexEmailPanel.setLayout(indexEmailPanelLayout);
        indexEmailPanelLayout.setHorizontalGroup(
            indexEmailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(indexEmailPanelLayout.createSequentialGroup()
                .addGroup(indexEmailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(indexEmailPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(outlookCheckBox))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, indexEmailPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(indexEmailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 691, Short.MAX_VALUE)
                            .addGroup(indexEmailPanelLayout.createSequentialGroup()
                                .addComponent(autoDetectPSTButton, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(manulPSTButton, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removePSTButton, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(clearPSTButton, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        indexEmailPanelLayout.setVerticalGroup(
            indexEmailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(indexEmailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(outlookCheckBox)
                .addGap(14, 14, 14)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(indexEmailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearPSTButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(removePSTButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(autoDetectPSTButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(manulPSTButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        indexWizardPanel.add(indexEmailPanel, "indexEmailPanel");

        indexBroswerPanel.setMaximumSize(new java.awt.Dimension(608, 361));
        indexBroswerPanel.setPreferredSize(new java.awt.Dimension(608, 361));

        ieCheckBox.setFont(new java.awt.Font("Tahoma", 1, 11));
        ieCheckBox.setText("Internet Explorer Histories");
        ieCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ieCheckBoxActionPerformed(evt);
            }
        });

        ieList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane7.setViewportView(ieList);

        autoDetectIEButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        autoDetectIEButton.setText("Auto Detect IE");
        autoDetectIEButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoDetectIEButtonActionPerformed(evt);
            }
        });

        removeIEButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        removeIEButton.setText("Remove Selected");
        removeIEButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeIEButtonActionPerformed(evt);
            }
        });

        clearIEButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        clearIEButton.setText("Clear All");
        clearIEButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearIEButtonActionPerformed(evt);
            }
        });

        ffCheckBox.setFont(new java.awt.Font("Tahoma", 1, 11));
        ffCheckBox.setText("FireFox Broswer Histories");
        ffCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ffCheckBoxActionPerformed(evt);
            }
        });

        ffList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane8.setViewportView(ffList);

        autoDetectFFButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        autoDetectFFButton.setText("Auto Detect FF");
        autoDetectFFButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoDetectFFButtonActionPerformed(evt);
            }
        });

        removeFFButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        removeFFButton.setText("Remove Selected");
        removeFFButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFFButtonActionPerformed(evt);
            }
        });

        clearFFButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        clearFFButton.setText("Clear All");
        clearFFButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFFButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout indexBroswerPanelLayout = new javax.swing.GroupLayout(indexBroswerPanel);
        indexBroswerPanel.setLayout(indexBroswerPanelLayout);
        indexBroswerPanelLayout.setHorizontalGroup(
            indexBroswerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, indexBroswerPanelLayout.createSequentialGroup()
                .addGroup(indexBroswerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, indexBroswerPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 691, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, indexBroswerPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(ieCheckBox))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, indexBroswerPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ffCheckBox))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, indexBroswerPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(indexBroswerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 695, Short.MAX_VALUE)
                            .addGroup(indexBroswerPanelLayout.createSequentialGroup()
                                .addComponent(autoDetectFFButton, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44)
                                .addComponent(removeFFButton, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                                .addComponent(clearFFButton, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, indexBroswerPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(autoDetectIEButton, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                        .addComponent(removeIEButton, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(clearIEButton, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        indexBroswerPanelLayout.setVerticalGroup(
            indexBroswerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(indexBroswerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ieCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(indexBroswerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(autoDetectIEButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clearIEButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(removeIEButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(37, 37, 37)
                .addComponent(ffCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(indexBroswerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(autoDetectFFButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clearFFButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(removeFFButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        indexWizardPanel.add(indexBroswerPanel, "indexBroswerPanel");

        indexChatPanel.setMaximumSize(new java.awt.Dimension(608, 361));
        indexChatPanel.setPreferredSize(new java.awt.Dimension(608, 361));

        msnList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane4.setViewportView(msnList);

        autoDetectMSNButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        autoDetectMSNButton.setText("Auto Detect MSN");
        autoDetectMSNButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoDetectMSNButtonActionPerformed(evt);
            }
        });

        removeMSNButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        removeMSNButton.setText("Remove Selected");
        removeMSNButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeMSNButtonActionPerformed(evt);
            }
        });

        clearMSNButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        clearMSNButton.setText("Clear All");
        clearMSNButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearMSNButtonActionPerformed(evt);
            }
        });

        msnCheckBox.setFont(new java.awt.Font("Tahoma", 1, 11));
        msnCheckBox.setText("MSN Windows Live Chat");
        msnCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msnCheckBoxActionPerformed(evt);
            }
        });

        yahooCheckBox.setFont(new java.awt.Font("Tahoma", 1, 11));
        yahooCheckBox.setText("Yahoo Chat Archive");
        yahooCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yahooCheckBoxActionPerformed(evt);
            }
        });

        yahooList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane6.setViewportView(yahooList);

        autoDetectYahooButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        autoDetectYahooButton.setText("Auto Detect Yahoo");
        autoDetectYahooButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoDetectYahooButtonActionPerformed(evt);
            }
        });

        removeYahooButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        removeYahooButton.setText("Remove Selected");
        removeYahooButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeYahooButtonActionPerformed(evt);
            }
        });

        clearYahooButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        clearYahooButton.setText("Clear All");
        clearYahooButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearYahooButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout indexChatPanelLayout = new javax.swing.GroupLayout(indexChatPanel);
        indexChatPanel.setLayout(indexChatPanelLayout);
        indexChatPanelLayout.setHorizontalGroup(
            indexChatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, indexChatPanelLayout.createSequentialGroup()
                .addGroup(indexChatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, indexChatPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 691, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, indexChatPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(msnCheckBox))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, indexChatPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(yahooCheckBox))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, indexChatPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(autoDetectYahooButton, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                        .addComponent(removeYahooButton, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addComponent(clearYahooButton, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, indexChatPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 691, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, indexChatPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(autoDetectMSNButton, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(removeMSNButton, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                        .addComponent(clearMSNButton, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        indexChatPanelLayout.setVerticalGroup(
            indexChatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(indexChatPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(msnCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(indexChatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(autoDetectMSNButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clearMSNButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(removeMSNButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(yahooCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(indexChatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(autoDetectYahooButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clearYahooButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(removeYahooButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        indexWizardPanel.add(indexChatPanel, "indexChatPanel");

        indexChatPanel2.setMaximumSize(new java.awt.Dimension(608, 361));
        indexChatPanel2.setPreferredSize(new java.awt.Dimension(608, 361));

        skypeeCheckBox.setFont(new java.awt.Font("Tahoma", 1, 11));
        skypeeCheckBox.setText("Skype Chat Messages");
        skypeeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skypeeCheckBoxActionPerformed(evt);
            }
        });

        skypeeList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane9.setViewportView(skypeeList);

        autoDetectSkypeeButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        autoDetectSkypeeButton.setText("Auto Detect Skype");
        autoDetectSkypeeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoDetectSkypeeButtonActionPerformed(evt);
            }
        });

        removeSkypeeButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        removeSkypeeButton.setText("Remove Selected");
        removeSkypeeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSkypeeButtonActionPerformed(evt);
            }
        });

        clearSkypeeButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        clearSkypeeButton.setText("Clear All");
        clearSkypeeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearSkypeeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout indexChatPanel2Layout = new javax.swing.GroupLayout(indexChatPanel2);
        indexChatPanel2.setLayout(indexChatPanel2Layout);
        indexChatPanel2Layout.setHorizontalGroup(
            indexChatPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(indexChatPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(indexChatPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(indexChatPanel2Layout.createSequentialGroup()
                        .addGroup(indexChatPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(skypeeCheckBox, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 691, Short.MAX_VALUE))
                        .addGap(10, 10, 10))
                    .addGroup(indexChatPanel2Layout.createSequentialGroup()
                        .addComponent(autoDetectSkypeeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                        .addComponent(removeSkypeeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(clearSkypeeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        indexChatPanel2Layout.setVerticalGroup(
            indexChatPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(indexChatPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(skypeeCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(indexChatPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(autoDetectSkypeeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clearSkypeeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(removeSkypeeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(201, 201, 201))
        );

        indexWizardPanel.add(indexChatPanel2, "indexChatPanel2");

        indexFooterPanel.setMaximumSize(new java.awt.Dimension(608, 63));
        indexFooterPanel.setPreferredSize(new java.awt.Dimension(608, 63));

        finishButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        finishButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/gui/resources/finish.png"))); // NOI18N
        finishButton.setText("Finish");
        finishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishButtonActionPerformed(evt);
            }
        });

        backButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/gui/resources/back.png"))); // NOI18N
        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        nextButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        nextButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/gui/resources/next.png"))); // NOI18N
        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/gui/resources/cancel.png"))); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout indexFooterPanelLayout = new javax.swing.GroupLayout(indexFooterPanel);
        indexFooterPanel.setLayout(indexFooterPanelLayout);
        indexFooterPanelLayout.setHorizontalGroup(
            indexFooterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(indexFooterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backButton, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nextButton, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                .addGap(113, 113, 113)
                .addComponent(cancelButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(finishButton, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        indexFooterPanelLayout.setVerticalGroup(
            indexFooterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(indexFooterPanelLayout.createSequentialGroup()
                .addGroup(indexFooterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(indexFooterPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(indexFooterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(backButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nextButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(indexFooterPanelLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(cancelButton))
                    .addGroup(indexFooterPanelLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(finishButton)))
                .addGap(309, 309, 309))
        );

        indexHeaderPanel.setBackground(new java.awt.Color(51, 51, 51));
        indexHeaderPanel.setMaximumSize(new java.awt.Dimension(628, 76));
        indexHeaderPanel.setPreferredSize(new java.awt.Dimension(628, 76));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 24));
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/gui/resources/2 copy.jpg"))); // NOI18N
        jLabel5.setText(" ");

        javax.swing.GroupLayout indexHeaderPanelLayout = new javax.swing.GroupLayout(indexHeaderPanel);
        indexHeaderPanel.setLayout(indexHeaderPanelLayout);
        indexHeaderPanelLayout.setHorizontalGroup(
            indexHeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 721, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        indexHeaderPanelLayout.setVerticalGroup(
            indexHeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
        );

        jSeparator1.setMaximumSize(new java.awt.Dimension(0, 2));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(indexWizardPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 711, Short.MAX_VALUE)
                            .addComponent(indexFooterPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 711, Short.MAX_VALUE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE)))
                    .addComponent(indexHeaderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 721, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(indexHeaderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(indexWizardPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 1, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(indexFooterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkforIndexLocationName() {
        String text = indexNameTextField.getText().trim();
        
        if (! CaseNameChecker.isInvalidText(text)) {
            indexLocationTextField.setText(PATH + "\\" + text);
        } else {
            String word = CaseNameChecker.removeInvalid(text);
            indexLocationTextField.setText(PATH + "\\" + word);
        }
    }    

    private void documentListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_documentListValueChanged
}//GEN-LAST:event_documentListValueChanged

    private void addFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFolderButtonActionPerformed
        JDirectoryDialog directoryDialog = new JDirectoryDialog();
        directoryDialog.show(CaseWizardDialog.this);
        String path = directoryDialog.getSelectedDirectory();
        if (path != null) {
            addToList(path, documentModel, documentList);
        }
}//GEN-LAST:event_addFolderButtonActionPerformed

    private void addFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFileButtonActionPerformed
        JFileDialog fileDialog = new JFileDialog();
        fileDialog.show(CaseWizardDialog.this);
        String path = fileDialog.getParentDirectory();

        if (path != null) {
            path += "\\" + fileDialog.getSelectedFileName();
            addToList(path, documentModel, documentList);
        }
}//GEN-LAST:event_addFileButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        String value = (String) documentList.getSelectedValue();
        removeFromList(value, documentModel, documentList);
}//GEN-LAST:event_removeButtonActionPerformed

    private void clearListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearListButtonActionPerformed
        documentModel.removeAllElements();
}//GEN-LAST:event_clearListButtonActionPerformed

    private void selectAllDrivesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllDrivesButtonActionPerformed
        File[] files = File.listRoots();

        for (File file : files) {
            if (Utilities.isALocalDirve(file.getAbsolutePath())) {
                addToList(file.getAbsolutePath(), documentModel, documentList);
            }
        }
}//GEN-LAST:event_selectAllDrivesButtonActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        JDirectoryDialog directoryDialog = new JDirectoryDialog();
        directoryDialog.show(CaseWizardDialog.this);
        String path = directoryDialog.getSelectedDirectory();

        if (path != null) {
            PATH = path;

            if (indexNameTextField.getText().trim().isEmpty()) {
                indexLocationTextField.setText(path);
            } else {
                indexLocationTextField.setText(path + "\\" + indexNameTextField.getText().trim());
            }
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        switch (currentIndex) {
            case 0:
            case 1:
            case 2:
            case 3:
                next();
                break;

            case 4:
                nextLast();
                break;
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    private void next() {
        currentIndex++;
        showPanel(cardsName[currentIndex], indexWizardPanel);
        backButton.setEnabled(true);
        nextButton.setEnabled(true);
    }
    
    private void nextLast() {
        currentIndex++;
        showPanel(cardsName[currentIndex], indexWizardPanel);
        backButton.setEnabled(true);
        nextButton.setEnabled(false);
        finishButton.setEnabled(true);
    }
       
    private void back() {
        currentIndex--;
        showPanel(cardsName[currentIndex], indexWizardPanel);
        backButton.setEnabled(false);
        nextButton.setEnabled(true);
    }
    
    private void backLast() {
        currentIndex--;
        showPanel(cardsName[currentIndex], indexWizardPanel);
        backButton.setEnabled(true);
        nextButton.setEnabled(true);
        finishButton.setEnabled(false);
    }
        
    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        switch (currentIndex) {
            case 1:
                back();
                break;

            case 2:
            case 3:
            case 4:
            case 5:
                backLast();
                break;
        }
    }//GEN-LAST:event_backButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        index = null;
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void removePSTButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removePSTButtonActionPerformed
        String value = (String) pstList.getSelectedValue();
        removeFromList(value, pstModel, pstList);
    }//GEN-LAST:event_removePSTButtonActionPerformed

    private void removeMSNButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeMSNButtonActionPerformed
        String value = (String) msnList.getSelectedValue();
        removeFromList(value, msnModel, msnList);
    }//GEN-LAST:event_removeMSNButtonActionPerformed

    private void clearPSTButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearPSTButtonActionPerformed
        pstModel.removeAllElements();
    }//GEN-LAST:event_clearPSTButtonActionPerformed

    private void clearMSNButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearMSNButtonActionPerformed
        msnModel.removeAllElements();
    }//GEN-LAST:event_clearMSNButtonActionPerformed

    private void autoDetectPSTButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoDetectPSTButtonActionPerformed
        // enumerate all hardisk paritions
        // and go to oulook folder in each paritions
        // and go to each user folder in paritions.
        ArrayList<String> pstPaths = getOutlookPSTFiles();

        if (pstPaths.size() == 0) {
            showEmptyMessage("Not Found Any PST/OST Files");
            return;
        }

        for (String file : pstPaths) {
            if (!existsInList(file, pstModel)) {
                addToList(file, pstModel, pstList);
            }
        }
    }//GEN-LAST:event_autoDetectPSTButtonActionPerformed

    private void removeYahooButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeYahooButtonActionPerformed
        String value = (String) yahooList.getSelectedValue();
        removeFromList(value, yahooModel, yahooList);
    }//GEN-LAST:event_removeYahooButtonActionPerformed

    private void clearYahooButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearYahooButtonActionPerformed
        yahooModel.removeAllElements();
    }//GEN-LAST:event_clearYahooButtonActionPerformed

    private void outlookCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outlookCheckBoxActionPerformed
        if (outlookCheckBox.isSelected()) {
            setPSTCheckBox(true);
        } else {
            setPSTCheckBox(false);
        }
    }//GEN-LAST:event_outlookCheckBoxActionPerformed

    private void yahooCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yahooCheckBoxActionPerformed
        if (yahooCheckBox.isSelected()) {
            setYahooCheckBox(true);
        } else {
            setYahooCheckBox(false);
        }
    }//GEN-LAST:event_yahooCheckBoxActionPerformed

    private void msnCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msnCheckBoxActionPerformed
        if (msnCheckBox.isSelected()) {
            setMSNCheckBox(true);
        } else {
            setMSNCheckBox(false);
        }
    }//GEN-LAST:event_msnCheckBoxActionPerformed

    private void ieCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ieCheckBoxActionPerformed
        if (ieCheckBox.isSelected()) {
            setIECheckBox(true);
        } else {
            setIECheckBox(false);
        }
    }//GEN-LAST:event_ieCheckBoxActionPerformed

    private void removeIEButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeIEButtonActionPerformed
        String value = (String) ieList.getSelectedValue();
        removeFromList(value, ieModel, ieList);
    }//GEN-LAST:event_removeIEButtonActionPerformed

    private void clearIEButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearIEButtonActionPerformed
        ieModel.removeAllElements();
    }//GEN-LAST:event_clearIEButtonActionPerformed

    private void ffCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ffCheckBoxActionPerformed
        if (ffCheckBox.isSelected()) {
            setFFCheckBox(true);
        } else {
            setFFCheckBox(false);
        }
    }//GEN-LAST:event_ffCheckBoxActionPerformed

    private void removeFFButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFFButtonActionPerformed
        String value = (String) ffList.getSelectedValue();
        removeFromList(value, ffModel, ffList);
    }//GEN-LAST:event_removeFFButtonActionPerformed

    private void clearFFButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFFButtonActionPerformed
        ffModel.removeAllElements();
    }//GEN-LAST:event_clearFFButtonActionPerformed

    private void manulPSTButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manulPSTButtonActionPerformed
        FilesFilter pstFilter = new FilesFilter("Microsoft Outlook", "pst", "ost");
        openDialog(pstFilter, pstModel, pstList);
    }//GEN-LAST:event_manulPSTButtonActionPerformed

    private void openDialog(FilesFilter filter, DefaultListModel model, JList list) {
        fileChooser.setFileFilter(filter);

        int result = fileChooser.showOpenDialog(CaseWizardDialog.this);

        if (result == JFileChooser.APPROVE_OPTION) {
            String path = fileChooser.getSelectedFile().getAbsolutePath();
            addToList(path, model, list);
        }
    }

    private void autoDetectIEButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoDetectIEButtonActionPerformed
        ArrayList<String> iePaths = getUser();

        if (iePaths.isEmpty()) {
            showEmptyMessage("Not Found Any IE Files");
            return;
        }

        for (String path : iePaths) {
            if (!existsInList(path, ieModel)) {
                addToList(path, ieModel, ieList);
            }
        }
    }//GEN-LAST:event_autoDetectIEButtonActionPerformed

    private void autoDetectFFButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoDetectFFButtonActionPerformed
        ArrayList<String> ffPaths = getFireFoxFiles();

        if (ffPaths.isEmpty()) {
            showEmptyMessage("Not Found Any FireFox Files");
            return;
        }

        for (String path : ffPaths) {
            if (!existsInList(path, ffModel)) {
                addToList(path, ffModel, ffList);
            }
        }
    }//GEN-LAST:event_autoDetectFFButtonActionPerformed

    private void autoDetectMSNButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoDetectMSNButtonActionPerformed
        try {
            if (FilesPath.getOSType() == FilesPath.OS_TYPE.XP) {
                ArrayList<String> paths = getRegistryPath();

                if (paths.isEmpty()) {
                    showEmptyMessage("Not Found Any MSN Files");
                    return;
                }

                for (String regPath : paths) {
                    MSNParser msnParser = new MSNParser(regPath);
                    msnParser.parse();

                    HashMap<String, String> mapOfPath = msnParser.getAllUserLoggingPath();
                    for (Map.Entry<String, String> map : mapOfPath.entrySet()) {
                        String path = map.getValue();

                        if (!existsInList(path, msnModel)) {
                            addToList(path, msnModel, msnList);
                        }
                    }
                }
            } else {
                ArrayList<String> users = getUser();

                for (String path : users) {
                    String newPath = path + "\\Documents\\My Received Files\\";
                    File file = new File(newPath);

                    if (file.exists()) {
                        File[] files = file.listFiles();

                        for (File userFile : files) {
                            if (!userFile.isHidden() && userFile.canRead()) {
                                File f = new File(userFile.getAbsolutePath() + "\\" + "History");

                                if (f.exists()) { // this contain char log file
                                    if (!existsInList(f.getAbsolutePath(), msnModel)) {
                                        addToList(f.getAbsolutePath(), msnModel, msnList);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_autoDetectMSNButtonActionPerformed

    private void autoDetectYahooButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoDetectYahooButtonActionPerformed
        ArrayList<String> yahooPaths = getYahooFiles();

        if (yahooPaths.isEmpty()) {
            showEmptyMessage("Not Found Any Yahoo! Files");
            return;
        }

        for (String path : yahooPaths) {
            if (!existsInList(path, yahooModel)) {
                addToList(path, yahooModel, yahooList);
            }
        }
    }//GEN-LAST:event_autoDetectYahooButtonActionPerformed

    private String getIndexName(String path) {
        File file = new File(path);
        String name = file.getName();

        if (name.equalsIgnoreCase("CASES")) {
            return null;
        }

        return name;
    }

    private boolean indexExsits(String user) throws IOException, ClassNotFoundException {
        File indexesInfo = new File(FilesPath.INDEXES_INFO);
        ArrayList<String> indexesInfoContent = Utilities.getFileContentInArrayList(indexesInfo);

        for (String path : indexesInfoContent) {
            Case aIndex = Case.getCase(path);

            if (aIndex.getIndexName().equalsIgnoreCase(user)) {
                return true;
            }
        }

        return false;
    }

    private void finishButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishButtonActionPerformed
        // check info panel is not empty
        String indexName = getIndexName(indexLocationTextField.getText().trim());

        if (indexName == null) {
            JOptionPane.showMessageDialog(CaseWizardDialog.this, "You must choose an index name",
                    "Empty Index Name", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // check indexname, if there is a name like this show message and return
        try {
            if (indexExsits(indexName)) {
                JOptionPane.showMessageDialog(CaseWizardDialog.this, "You must change index name",
                        "Index name Exisited", JOptionPane.ERROR_MESSAGE);

                return;
            }
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }

        String indexLocation = indexLocationTextField.getText().trim();
        String investigator = investigatorTextField.getText().trim();
        String desc = descriptionTextArea.getText().trim();

        if (investigator.isEmpty()) {
            JOptionPane.showMessageDialog(CaseWizardDialog.this, "Investigator name is empty",
                    "Please fill all required information", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // check document & extension panel
        ArrayList<String> docs = new ArrayList<String>();
        int size = documentModel.size();

        for (int i = 0; i < size; i++) {
            docs.add((String) documentModel.getElementAt(i));
        }

        ArrayList<String> ext = new ArrayList<String>();
        addExtension(ext);

        if (size > 0 && ext.size() == 0) {
            JOptionPane.showMessageDialog(CaseWizardDialog.this, "You must select extensions to index it",
                    "please select some file extensions", JOptionPane.INFORMATION_MESSAGE);

            return;
        }

        // check thrid panel (email panel)
        ArrayList<String> pst = new ArrayList<String>();

        if (outlookCheckBox.isSelected()) {
            addToList(pstModel, pst);
        }

        // check forth panel (browser panel)
        ArrayList<String> ie = new ArrayList<String>();
        ArrayList<String> ff = new ArrayList<String>();

        if (ieCheckBox.isSelected()) {
            addToList(ieModel, ie);
        }

        if (ffCheckBox.isSelected()) {
            addToList(ffModel, ff);
        }

        // check last panel (chat panel)
        ArrayList<String> msn = new ArrayList<String>();
        ArrayList<String> yahoo = new ArrayList<String>();
        ArrayList<String> skype = new ArrayList<String>();

        if (msnCheckBox.isSelected()) {
            addToList(msnModel, msn);
        }

        if (yahooCheckBox.isSelected()) {
            addToList(yahooModel, yahoo);
        }

        if (skypeeCheckBox.isSelected()) {
            addToList(skypeModel, skype);
        }

        if (indexName.contains("-")) {
            JOptionPane.showMessageDialog(this, "index name should not contain illegal charater like(-)",
                    "please correct index name", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (indexName.equals("") || indexLocation.equals("") || (docs.size() < 1 && ext.size() < 1
                && pst.isEmpty() && ie.isEmpty() && ff.isEmpty() && msn.isEmpty() && yahoo.isEmpty()
                && skype.isEmpty())) {
            JOptionPane.showMessageDialog(CaseWizardDialog.this, "There are incomplete entries",
                    "Please fill all required information", JOptionPane.ERROR_MESSAGE);
            return;
        }

        boolean cacheImages = false, checkCompressed = false;

        if (imagesCheckBox.isSelected()) {
            cacheImages = true;
            ext.add("bmp");
            ext.add("gif");
            ext.add("jpg");
            ext.add("jpeg");
            ext.add("png");
            ext.add("tif");
            ext.add("tiff");
        }

        if (outlookCheckBox.isSelected() && pstModel.size() > 0) {
            ext.add("pst");
            ext.add("ost");
        }

        if (isFullVersion) {
            //show smart card inserting/usage dialog
            SmartCardDialog scd = new SmartCardDialog(parent, true, false);
            scd.setVisible(true);

            if (!scd.getResult()) {
                return;
            }
        }

        // time consumting statemnt
        InfiniteProgressPanel i = new InfiniteProgressPanel("Loading Now");
        this.setGlassPane(i);
        i.start();

        FileCounterThread myThread = new FileCounterThread(docs, i, this, indexName, indexLocation, investigator, desc, ext, pst, ie, ff,
                msn, yahoo, cacheImages, checkCompressed, index, skype);
        myThread.execute();
    }//GEN-LAST:event_finishButtonActionPerformed

    private void skypeeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skypeeCheckBoxActionPerformed
        if (skypeeCheckBox.isSelected()) {
            setSkypeeCheckBox(true);
        } else {
            setSkypeeCheckBox(false);
        }
    }//GEN-LAST:event_skypeeCheckBoxActionPerformed

    private void autoDetectSkypeeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoDetectSkypeeButtonActionPerformed
        for (String path : getUser()) {
            SkypeParser parser = new SkypeParser(path);

            try {
                ArrayList<Tuple<String, ArrayList<SkypeMessage>>> msgs = parser.parse();

                if (msgs == null || msgs.size() == 0) {
                    continue;
                }

                for (Tuple<String, ArrayList<SkypeMessage>> user : msgs) {
                    String p = parser.getPath() + "\\" + user.getA();
                    if (!existsInList(p, skypeModel)) {
                        addToList(p, skypeModel, skypeeList);
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        if (skypeModel.size() == 0) {
            showEmptyMessage("Not Found Any Skype Files");
        }
    }//GEN-LAST:event_autoDetectSkypeeButtonActionPerformed

    private void removeSkypeeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSkypeeButtonActionPerformed
        String value = (String) skypeeList.getSelectedValue();
        removeFromList(value, skypeModel, skypeeList);
    }//GEN-LAST:event_removeSkypeeButtonActionPerformed

    private void clearSkypeeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearSkypeeButtonActionPerformed
        skypeModel.removeAllElements();
    }//GEN-LAST:event_clearSkypeeButtonActionPerformed

    private void allRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allRadioButtonActionPerformed
        selectAllCheckBoxes(true);
    }//GEN-LAST:event_allRadioButtonActionPerformed

    private void manualRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manualRadioButtonActionPerformed
        selectAllCheckBoxes(false);
    }//GEN-LAST:event_manualRadioButtonActionPerformed

    private void selectAllCheckBoxes(boolean state) {
        htmlCheckBox.setSelected(state);
        docCheckBox.setSelected(state);
        pdfCheckBox.setSelected(state);
        rtfCheckBox.setSelected(state);
        txtCheckBox.setSelected(state);
        xmlCheckBox.setSelected(state);
    }

    private void addToList(DefaultListModel model, ArrayList<String> list) {
        for (int i = 0; i < model.size(); i++) {
            list.add((String) model.getElementAt(i));
        }
    }

    private void setPSTCheckBox(boolean enable) {
        pstList.setEnabled(enable);
        autoDetectPSTButton.setEnabled(enable);
        manulPSTButton.setEnabled(enable);
        removePSTButton.setEnabled(enable);
        clearPSTButton.setEnabled(enable);
    }

    private void setMSNCheckBox(boolean enable) {
        msnList.setEnabled(enable);
        autoDetectMSNButton.setEnabled(enable);
        removeMSNButton.setEnabled(enable);
        clearMSNButton.setEnabled(enable);
    }

    private void setYahooCheckBox(boolean enable) {
        yahooList.setEnabled(enable);
        autoDetectYahooButton.setEnabled(enable);
        removeYahooButton.setEnabled(enable);
        clearYahooButton.setEnabled(enable);
    }

    private void setSkypeeCheckBox(boolean enable) {
        skypeeList.setEnabled(enable);
        autoDetectSkypeeButton.setEnabled(enable);
        removeSkypeeButton.setEnabled(enable);
        clearSkypeeButton.setEnabled(enable);
    }

    private void setIECheckBox(boolean enable) {
        ieList.setEnabled(enable);
        autoDetectIEButton.setEnabled(enable);
        removeIEButton.setEnabled(enable);
        clearIEButton.setEnabled(enable);
    }

    private void setFFCheckBox(boolean enable) {
        ffList.setEnabled(enable);
        autoDetectFFButton.setEnabled(enable);
        removeFFButton.setEnabled(enable);
        clearFFButton.setEnabled(enable);
    }

    // show panel function
    private void showPanel(String panelName, JPanel name) {
        CardLayout card = (CardLayout) name.getLayout();
        card.show(name, panelName);
    }

    private void addExtension(ArrayList<String> eList) {
        if (htmlCheckBox.isSelected()) {
            eList.add("html");
            eList.add("htm");
            eList.add("mht");
        }

        if (pdfCheckBox.isSelected()) {
            eList.add("pdf");
        }

        if (txtCheckBox.isSelected()) {
            eList.add("txt");
        }

        if (docCheckBox.isSelected()) {
            eList.add("doc");
        }

        if (xmlCheckBox.isSelected()) {
            eList.add("xml");
        }

        if (rtfCheckBox.isSelected()) {
            eList.add("rtf");
        }
    }

    private void addToList(String path, DefaultListModel model, JList list) {
        if ((path != null || !path.startsWith("null")) && !existsInList(path, model)) {
            model.addElement(path);
            list.setModel(model);
        }
    }

    private boolean existsInList(String path, DefaultListModel model) {
        return model.contains(path);
    }

    private void removeFromList(String path, DefaultListModel model, JList list) {
        if (path != null) {
            model.removeElement(path);
            list.setModel(model);
        }
    }

    public Case getIndex() {
        return index;
    }

    public void setIndex(Case in) {
        index = in;
    }

    private ArrayList<String> getOutlookPSTFiles() {
        ArrayList<String> pstPaths = new ArrayList<String>();
        File[] roots = File.listRoots();

        if (FilesPath.getOSType() == FilesPath.OS_TYPE.XP) {
            for (File file : roots) {
                String filePath = file.getAbsolutePath() + "\\" + "Documents and Settings";
                File osFile = new File(filePath);

                if (osFile.exists()) {
                    File[] files = osFile.listFiles();

                    for (File userFile : files) {
                        String outlookFolderPath = userFile.getAbsolutePath() + "\\Local Settings\\Application Data\\Microsoft\\Outlook";

                        File outlookFolderFile = new File(outlookFolderPath);
                        if (outlookFolderFile.exists()) {
                            File[] outlookFiles = outlookFolderFile.listFiles();

                            for (File outlookFile : outlookFiles) {
                                String outlookFilePath = outlookFile.getAbsolutePath();
                                if (outlookFile.isFile() && /*( outlookFilePath.endsWith("pst") ||*/ outlookFilePath.endsWith("ost")) {
                                    if (!outlookFile.getName().contains("archive")) {
                                        pstPaths.add(outlookFilePath);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } else { // C:\Users\xx\AppData\Local\Microsoft\Outlook\Outlook.pst \
            for (File file : roots) {
                String filePath = file.getAbsolutePath() + "\\" + "Users";
                File pstFile = new File(filePath);

                if (pstFile.exists()) {
                    File[] pstFiles = pstFile.listFiles();

                    for (File userFile : pstFiles) {
                        String pstFolderPath = userFile.getAbsolutePath() + "\\AppData\\Local\\Microsoft\\Outlook";

                        File pstFolderFile = new File(pstFolderPath);
                        if (pstFolderFile.exists()) {
                            File[] outlookFiles = pstFolderFile.listFiles();

                            for (File outlookFile : outlookFiles) {
                                String outlookFilePath = outlookFile.getAbsolutePath();
                                if (outlookFile.isFile() && /*( outlookFilePath.endsWith("pst") ||*/ outlookFilePath.endsWith("ost")) {
                                    if (!outlookFile.getName().contains("archive")) {
                                        pstPaths.add(outlookFilePath);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return pstPaths;
    }

    private ArrayList<String> getFireFoxFiles() {
        ArrayList<String> ffPaths = new ArrayList<String>();
        File[] roots = File.listRoots();

        if (FilesPath.getOSType() == FilesPath.OS_TYPE.XP) {
            for (File file : roots) {
                String filePath = file.getAbsolutePath() + "\\" + "Documents and Settings";
                File osFile = new File(filePath);

                if (osFile.exists()) {
                    File[] files = osFile.listFiles();

                    for (File userFile : files) {
                        String outlookFolderPath = userFile.getAbsolutePath() + "\\Application Data\\Mozilla\\Firefox\\Profiles";

                        File outlookFolderFile = new File(outlookFolderPath);
                        if (outlookFolderFile.exists()) {
                            File[] outlookFiles = outlookFolderFile.listFiles();

                            for (File outlookFile : outlookFiles) {
                                if (outlookFile.isDirectory()) {
                                    String outlookFilePath = outlookFile.getAbsolutePath();
                                    ffPaths.add(outlookFilePath);
                                }
                            }
                        }
                    }
                }
            }
        } else { //C:\Users\Wajdy Essam\AppData\Roaming\Mozilla\Firefox\Profiles\9bh2w0j2.default
            for (File file : roots) {
                String filePath = file.getAbsolutePath() + "\\" + "Users";
                File osFile = new File(filePath);

                if (osFile.exists()) {
                    File[] files = osFile.listFiles();

                    for (File userFile : files) {
                        String ieFolderPath = userFile.getAbsolutePath() + "\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles";

                        File ieFolderFile = new File(ieFolderPath);
                        if (ieFolderFile.exists()) {
                            File[] outlookFiles = ieFolderFile.listFiles();

                            for (File outlookFile : outlookFiles) {
                                if (outlookFile.isDirectory()) {
                                    String outlookFilePath = outlookFile.getAbsolutePath();
                                    ffPaths.add(outlookFilePath);
                                }
                            }
                        }
                    }
                }
            }
        }

        return ffPaths;
    }

    private ArrayList<String> getYahooFiles() {
        ArrayList<String> yahooPaths = new ArrayList<String>();
        File[] roots = File.listRoots();

        if (FilesPath.getOSType() == FilesPath.OS_TYPE.XP) {
            for (File file : roots) {
                String filePath = file.getAbsolutePath() + "\\" + "Program Files\\Yahoo!\\Messenger\\Profiles";
                File yahooDir = new File(filePath);

                if (yahooDir.exists()) {
                    File[] yahooFiles = yahooDir.listFiles();

                    for (File yahooFile : yahooFiles) {
                        String yahooFilePatn = yahooFile.getAbsolutePath();
                        yahooPaths.add(yahooFilePatn);
                    }
                }
            }
        } else { // C:\Users\<username>\AppData\Local\VirtualStore\Program Files\Yahoo!\Messenger\Profiles\<userid>\Archive\Messages\<buddyid>
            for (File file : roots) {
                String filePath = file.getAbsolutePath() + "\\" + "Users";
                File yahooDir = new File(filePath);

                if (yahooDir.exists()) {
                    File[] yahooFiles = yahooDir.listFiles();

                    for (File yahooFile : yahooFiles) {
                        String yahooFolderPath = yahooFile.getAbsolutePath() + "\\AppData\\Local\\VirtualStore\\Program Files\\Yahoo!\\Messenger\\Profiles";

                        File yahooFolderFile = new File(yahooFolderPath);
                        if (yahooFolderFile.exists()) {
                            String ieFilePath = yahooFolderFile.getAbsolutePath();
                            yahooPaths.add(ieFilePath);
                        }
                    }
                }
            }
        }

        return yahooPaths;
    }

    private ArrayList<String> getRegistryPath() {
        ArrayList<String> msnPath = new ArrayList<String>();
        File[] roots = File.listRoots();

        if (FilesPath.getOSType() == FilesPath.OS_TYPE.XP) {
            for (File file : roots) {
                String filePath = file.getAbsolutePath() + "\\" + "WINDOWS\\system32";
                File osFile = new File(filePath);

                if (osFile.exists()) {
                    File[] files = osFile.listFiles();

                    for (File userFile : files) {
                        if (userFile.getName().equalsIgnoreCase("reg.exe")) {
                            msnPath.add(userFile.getAbsolutePath());
                        }
                    }
                }
            }
        } else {
            for (File file : roots) {
                String filePath = file.getAbsolutePath() + "\\" + "WINDOWS\\system32";
                File osFile = new File(filePath);

                if (osFile.exists()) {
                    File[] files = osFile.listFiles();

                    for (File userFile : files) {
                        if (userFile.getName().equalsIgnoreCase("reg.exe")) {
                            msnPath.add(userFile.getAbsolutePath());
                        }
                    }
                }
            }
        }

        return msnPath;
    }

    private ArrayList<String> getUser() {
        ArrayList<String> iePaths = new ArrayList<String>();
        File[] roots = File.listRoots();

        if (FilesPath.getOSType() == FilesPath.OS_TYPE.XP) {
            for (File file : roots) {
                String filePath = file.getAbsolutePath() + "\\" + "Documents and Settings";
                File osFile = new File(filePath);

                if (osFile.exists()) {
                    File[] files = osFile.listFiles();

                    for (File userFile : files) {
                        if (!userFile.isHidden() && userFile.canRead()) {
                            iePaths.add(userFile.getAbsolutePath());
                        }
                    }
                }
            }
        } else {
            for (File file : roots) {
                String filePath = file.getAbsolutePath() + "\\" + "Users";
                File osFile = new File(filePath);

                if (osFile.exists()) {
                    File[] files = osFile.listFiles();

                    for (File userFile : files) {
                        if (!userFile.isHidden() && userFile.canRead()) {
                            iePaths.add(userFile.getAbsolutePath());
                        }
                    }
                }
            }
        }

        return iePaths;
    }

    private ArrayList<String> getIEHistoryFiles() {
        ArrayList<String> iePaths = new ArrayList<String>();
        File[] roots = File.listRoots();

        if (FilesPath.getOSType() == FilesPath.OS_TYPE.XP) {
            for (File file : roots) {
                String filePath = file.getAbsolutePath() + "\\" + "Documents and Settings";
                File osFile = new File(filePath);

                if (osFile.exists()) {
                    File[] files = osFile.listFiles();

                    for (File userFile : files) {
                        String ieFolderPath = userFile.getAbsolutePath() + "\\Local Settings\\History";

                        File ieFolderFile = new File(ieFolderPath);
                        if (ieFolderFile.exists()) {
                            String ieFilePath = ieFolderFile.getAbsolutePath();
                            iePaths.add(ieFilePath);
                        }
                    }
                }
            }
        } else { // C:\Users\Wajdy Essam\AppData\Local\Microsoft\Windows\History
            for (File file : roots) {
                String filePath = file.getAbsolutePath() + "\\" + "Users";
                File osFile = new File(filePath);

                if (osFile.exists()) {
                    File[] files = osFile.listFiles();

                    for (File userFile : files) {
                        String ieFolderPath = userFile.getAbsolutePath() + "\\AppData\\Local\\Microsoft\\Windows\\History";

                        File ieFolderFile = new File(ieFolderPath);
                        if (ieFolderFile.exists()) {
                            String ieFilePath = ieFolderFile.getAbsolutePath();
                            iePaths.add(ieFilePath);
                        }
                    }
                }
            }
        }

        return iePaths;
    }

    private void showEmptyMessage(String msg) {
        JOptionPane.showMessageDialog(this, msg, "Object Not Found", JOptionPane.ERROR_MESSAGE);
    }

    private static class CaseNameChecker {
        private static boolean isInvalidText(String text) {
            for (String word : illegalCharacters) {
                if (text.contains(word)) {
                    return true;
                }
            }

            for (String word : reservedNames) {
                if (text.equalsIgnoreCase(word)) {
                    return true;
                }
            }

            return false;
        }

        private static String removeInvalid(String text) {
            for (String s : reservedNames) {
                if (text.equalsIgnoreCase(s)) {
                    text = "";
                    return text;
                }
            }

            StringBuilder result = new StringBuilder("");

            for (int i = 0; i < text.length(); i++) {
                String ch = text.charAt(i) + "";
                if (!isInvalidText(ch)) {
                    result.append(ch);
                }
            }

            return result.toString();
        }
        
        /*
         * Illegal case strings and characters
         */
        private static final String[] illegalCharacters = {"<", ">", ":", "\"", "/", "\\", "|", "?", "*", "-"};
        private static final String[] reservedNames = {
            "CON", "PRN", "AUX", "NUL", "COM1", "COM2", "COM3", "COM4", "COM5", "COM6", "COM7",
            "COM8", "COM9", "LPT1", "LPT2", "LPT3", "LPT4", "LPT5", "LPT6", "LPT7", "LPT8", "LPT9"
        };
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                CaseWizardDialog dialog = new CaseWizardDialog(new javax.swing.JFrame(), true, true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFileButton;
    private javax.swing.JButton addFolderButton;
    private javax.swing.JRadioButton allRadioButton;
    private javax.swing.JButton autoDetectFFButton;
    private javax.swing.JButton autoDetectIEButton;
    private javax.swing.JButton autoDetectMSNButton;
    private javax.swing.JButton autoDetectPSTButton;
    private javax.swing.JButton autoDetectSkypeeButton;
    private javax.swing.JButton autoDetectYahooButton;
    private javax.swing.JButton backButton;
    private javax.swing.JButton browseButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton clearFFButton;
    private javax.swing.JButton clearIEButton;
    private javax.swing.JButton clearListButton;
    private javax.swing.JButton clearMSNButton;
    private javax.swing.JButton clearPSTButton;
    private javax.swing.JButton clearSkypeeButton;
    private javax.swing.JButton clearYahooButton;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.JCheckBox docCheckBox;
    private javax.swing.JList documentList;
    private javax.swing.JCheckBox ffCheckBox;
    private javax.swing.JList ffList;
    private javax.swing.JButton finishButton;
    private javax.swing.JCheckBox htmlCheckBox;
    private javax.swing.JCheckBox ieCheckBox;
    private javax.swing.JList ieList;
    private javax.swing.JCheckBox imagesCheckBox;
    private javax.swing.JPanel indexBroswerPanel;
    private javax.swing.JPanel indexChatPanel;
    private javax.swing.JPanel indexChatPanel2;
    private javax.swing.JPanel indexEmailPanel;
    private javax.swing.JPanel indexFileSystemPanel;
    private javax.swing.JPanel indexFooterPanel;
    private javax.swing.JPanel indexHeaderPanel;
    private javax.swing.JPanel indexInfoPanel;
    private javax.swing.JTextField indexLocationTextField;
    private javax.swing.JTextField indexNameTextField;
    private javax.swing.JPanel indexWizardPanel;
    private javax.swing.JTextField investigatorTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JRadioButton manualRadioButton;
    private javax.swing.JButton manulPSTButton;
    private javax.swing.JCheckBox msnCheckBox;
    private javax.swing.JList msnList;
    private javax.swing.JButton nextButton;
    private javax.swing.JCheckBox outlookCheckBox;
    private javax.swing.JCheckBox pdfCheckBox;
    private javax.swing.JList pstList;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton removeFFButton;
    private javax.swing.JButton removeIEButton;
    private javax.swing.JButton removeMSNButton;
    private javax.swing.JButton removePSTButton;
    private javax.swing.JButton removeSkypeeButton;
    private javax.swing.JButton removeYahooButton;
    private javax.swing.JCheckBox rtfCheckBox;
    private javax.swing.JButton selectAllDrivesButton;
    private javax.swing.JCheckBox skypeeCheckBox;
    private javax.swing.JList skypeeList;
    private javax.swing.JCheckBox txtCheckBox;
    private javax.swing.JCheckBox xmlCheckBox;
    private javax.swing.JCheckBox yahooCheckBox;
    private javax.swing.JList yahooList;
    // End of variables declaration//GEN-END:variables
}
