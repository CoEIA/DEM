/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AdvancedSearchDialog.java
 *
 * Created on Jan 2, 2011, 8:07:20 AM
 */

package edu.coeia.gui.filesystem;

import edu.coeia.utility.Utilities ;
import edu.coeia.utility.FilesFilter;

import javax.swing.event.DocumentEvent ;
import javax.swing.event.DocumentListener ;
import javax.swing.JFileChooser ;

import java.io.IOException ;
import java.io.File ;

import java.util.List;
import java.util.ArrayList;

/**
 *
 * @author wajdyessam
 */

public class AdvancedSearchDialog extends javax.swing.JDialog {

    private JFileChooser fileChooser ;

    private String queryText ;
    private List<String> supportedExtensions ;
    
    /** Creates new form AdvancedSearchDialog */
    public AdvancedSearchDialog(java.awt.Frame parent, boolean modal, List<String> exts) {
        super(parent, modal);
        initComponents();

        setLocationRelativeTo(parent);
        fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setFileFilter(new FilesFilter("Text Files (*.txt)", "txt"));
        
        // add document change listener
        andTextField.getDocument().addDocumentListener( new TextInputListener());
        phraseTextField.getDocument().addDocumentListener( new TextInputListener());
        orFileTextField.getDocument().addDocumentListener( new TextInputListener());
        orTextField1.getDocument().addDocumentListener( new TextInputListener());
        notTextField.getDocument().addDocumentListener( new TextInputListener());

        // add the supported extension in index
        for(String ext: exts){
            if ( ext.equalsIgnoreCase("txt")){
                txtCheckBox1.setEnabled(true);
                txtCheckBox1.setSelected(true);
            }
            else if ( ext.equalsIgnoreCase("doc")) {
                docCheckBox1.setEnabled(true);
                docCheckBox1.setSelected(true);
            }
            else if ( ext.equalsIgnoreCase("pdf")){
                pdfCheckBox1.setEnabled(true);
                pdfCheckBox1.setSelected(true);
            }
            else if ( ext.equalsIgnoreCase("xml")){
                xmlCheckBox1.setEnabled(true);
                xmlCheckBox1.setSelected(true);
            }
            else if ( ext.equalsIgnoreCase("rtf")){
                rtfCheckBox1.setEnabled(true);
                rtfCheckBox1.setSelected(true);
            }
            else if ( ext.equalsIgnoreCase("html") || ext.equalsIgnoreCase("htm") || ext.equalsIgnoreCase("mht")){
                htmlCheckBox1.setEnabled(true);
                htmlCheckBox1.setSelected(true);
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        andTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        phraseTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        orTextField1 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        notTextField = new javax.swing.JTextField();
        advancedSearchButton = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        orFileTextField = new javax.swing.JTextField();
        selectFileButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        pdfCheckBox1 = new javax.swing.JCheckBox();
        txtCheckBox1 = new javax.swing.JCheckBox();
        rtfCheckBox1 = new javax.swing.JCheckBox();
        htmlCheckBox1 = new javax.swing.JCheckBox();
        xmlCheckBox1 = new javax.swing.JCheckBox();
        docCheckBox1 = new javax.swing.JCheckBox();
        jToolBar2 = new javax.swing.JToolBar();
        resultLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Advanced Search Options");
        setModal(true);
        setResizable(false);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel1.setText("Advanced Search Options");
        jToolBar1.add(jLabel1);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel2.setText("Found documents that have...");

        jLabel3.setText("all these words:");
        jLabel3.setToolTipText("the result will be connected by AND operator");

        andTextField.setText(" ");

        jLabel4.setText("this exact phrase:");
        jLabel4.setToolTipText("the result will be connected by phrase \" operator");

        phraseTextField.setText(" ");

        jLabel5.setText("one or more of these words:");
        jLabel5.setToolTipText("the result will be connected by OR operator");

        orTextField1.setText(" ");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel8.setText("But not show documents that have...");

        jLabel9.setText("any of these unwanted words:");
        jLabel9.setToolTipText("the string will be excluded from the result");

        notTextField.setText(" ");

        advancedSearchButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        advancedSearchButton.setText("Advanced Search");
        advancedSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                advancedSearchButtonActionPerformed(evt);
            }
        });

        jLabel10.setText("OR from List file:");
        jLabel10.setToolTipText("the result will be connected by OR operator");

        orFileTextField.setText(" ");

        selectFileButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        selectFileButton.setText("select file...");
        selectFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFileButtonActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel11.setText("File Type...");

        pdfCheckBox1.setText("PDF ");
        pdfCheckBox1.setEnabled(false);

        txtCheckBox1.setText("TXT");
        txtCheckBox1.setEnabled(false);

        rtfCheckBox1.setText("RTF");
        rtfCheckBox1.setEnabled(false);

        htmlCheckBox1.setText("HTML/HTM");
        htmlCheckBox1.setEnabled(false);

        xmlCheckBox1.setText("XML");
        xmlCheckBox1.setEnabled(false);

        docCheckBox1.setText("DOC");
        docCheckBox1.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel2)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addGap(8, 8, 8)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel4)
                                                .addComponent(jLabel3))
                                            .addGap(68, 68, 68))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel5)
                                            .addGap(18, 18, 18)))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel10)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(orFileTextField)
                                            .addGap(18, 18, 18)
                                            .addComponent(selectFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(phraseTextField)
                                        .addComponent(andTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                                        .addComponent(orTextField1))
                                    .addGap(34, 34, 34)))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel8)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                                    .addComponent(jLabel9)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(notTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel11)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(pdfCheckBox1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(docCheckBox1)
                                .addGap(8, 8, 8)
                                .addComponent(xmlCheckBox1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(htmlCheckBox1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rtfCheckBox1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtCheckBox1))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(194, 194, 194)
                        .addComponent(advancedSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(andTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phraseTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(orTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(orFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectFileButton))
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(jLabel9)
                    .addComponent(notTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pdfCheckBox1)
                    .addComponent(docCheckBox1)
                    .addComponent(xmlCheckBox1)
                    .addComponent(htmlCheckBox1)
                    .addComponent(rtfCheckBox1)
                    .addComponent(txtCheckBox1))
                .addGap(27, 27, 27)
                .addComponent(advancedSearchButton, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                .addContainerGap())
        );

        jToolBar2.setFloatable(false);
        jToolBar2.setRollover(true);

        resultLabel.setText("                                       ");
        resultLabel.setMaximumSize(new java.awt.Dimension(500, 14));
        resultLabel.setMinimumSize(new java.awt.Dimension(10, 14));
        jToolBar2.add(resultLabel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFileButtonActionPerformed
        selectListOfWords();
    }//GEN-LAST:event_selectFileButtonActionPerformed

    private void advancedSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_advancedSearchButtonActionPerformed
        supportedExtensions = new ArrayList<String>();
        
        if ( txtCheckBox1.isSelected() )
            supportedExtensions.add("txt");

        if ( rtfCheckBox1.isSelected())
            supportedExtensions.add("rtf");

        if (htmlCheckBox1.isSelected()) {
            supportedExtensions.add("html");
            supportedExtensions.add("htm");
            supportedExtensions.add("mht");
        }

        if (docCheckBox1.isSelected())
            supportedExtensions.add("doc");

        if (pdfCheckBox1.isSelected())
            supportedExtensions.add("pdf");

        if ( xmlCheckBox1.isSelected())
            supportedExtensions.add("xml");

        setVisible(false);
    }//GEN-LAST:event_advancedSearchButtonActionPerformed

    public String getQuery () { return queryText; }
    public List<String> getSupportedExtensions () { return supportedExtensions ; }
    
    private class TextInputListener implements DocumentListener {
        public void changedUpdate(DocumentEvent e){ addToResult(); }
        public void removeUpdate (DocumentEvent e){ addToResult(); }
        public void insertUpdate (DocumentEvent e){ addToResult(); }
    }

    private void addToResult() {
        StringBuilder result = new StringBuilder();

        String and = andTextField.getText().trim() ;
        if ( ! and.isEmpty() ) {
            if ( result.toString().trim().length() > 0)
                result.append(" AND " + tokenText(and, "AND"));
            else
                result.append("" + tokenText(and, "AND"));
        }

        String phrase = phraseTextField.getText().trim();
        if ( ! phrase.isEmpty() )
            result.append(" \"" + phrase + "\"");

        String or1 = orTextField1.getText().trim();
        if ( ! or1.isEmpty() ) {
            if ( result.toString().trim().length() > 0)
                result.append(" OR " + tokenText(or1, "OR") );
            else
                result.append(" " + tokenText(or1, "OR") );
        }

        String orFile = orFileTextField.getText().trim();
        if ( ! orFile.isEmpty() ) {
            if ( result.toString().trim().length() > 0)
                result.append(" OR " + tokenText(orFile, "OR") );
            else
                result.append(" " + tokenText(orFile, "OR") );
        }

        String not = notTextField.getText().trim();
        if ( ! not.isEmpty() )  {
            if ( result.toString().trim().length() > 0)
                result.append(" NOT " + tokenText(not, "NOT") );
            else
                result.append(" " + tokenText(not, "NOT") );
        }

        resultLabel.setText(result.toString());

        queryText = result.toString();
    }

    private String tokenText (String text, String delm) {
        return text.replaceAll(" ", " " + delm + " ");
    }

    private void selectListOfWords () {
        int result = fileChooser.showOpenDialog(AdvancedSearchDialog.this);

        try {
            if ( result == JFileChooser.APPROVE_OPTION ) {
                String path = fileChooser.getSelectedFile().getAbsolutePath();
                String content = Utilities.getFileContentWithSpace(new File(path));
                
                orFileTextField.setText(content);
            }
        }
        catch (IOException e){
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton advancedSearchButton;
    private javax.swing.JTextField andTextField;
    private javax.swing.JCheckBox docCheckBox1;
    private javax.swing.JCheckBox htmlCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JTextField notTextField;
    private javax.swing.JTextField orFileTextField;
    private javax.swing.JTextField orTextField1;
    private javax.swing.JCheckBox pdfCheckBox1;
    private javax.swing.JTextField phraseTextField;
    private javax.swing.JLabel resultLabel;
    private javax.swing.JCheckBox rtfCheckBox1;
    private javax.swing.JButton selectFileButton;
    private javax.swing.JCheckBox txtCheckBox1;
    private javax.swing.JCheckBox xmlCheckBox1;
    // End of variables declaration//GEN-END:variables

}
