
package edu.coeia.gui;

import edu.coeia.utility.Utilities;
import edu.coeia.utility.FilesFilter ;

import edu.coeia.cases.Case;

import java.awt.CardLayout ;
import java.awt.Toolkit ;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import javax.swing.JFileChooser ;
import javax.swing.JOptionPane ;
import javax.swing.JPanel ;
import javax.swing.JFrame ;

import java.io.IOException ;

import java.util.List; 
import java.util.ArrayList ;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;


/*
 * OfflineMinningFrame.java
 *
 * @author wajdyessam
 * 
 * Created on Apr 28, 2010, 11:10:01 AM
 * 
 */


public class OfflineMinningFrame extends javax.swing.JFrame {
    private JFileChooser fileChooser ;
    
    private JFrame mainFrame ;
    private Case index ;
    
    private final String APPLICATION_NAME = "Digital Evidence Miner (Beta Version): ";
    private String applicationTitle;
   
    private List<String> listOfOpeningCase ;

    private Logger logger = Logger.getLogger(this.getClass().getName());
    private FileHandler handler ;

    /** Creates new form OfflineMinningFrame */
    public OfflineMinningFrame(Case AIndex, boolean state, String title, List<String> list) {
        initComponents();

        try {
            handler = new FileHandler("GUI.log");
            logger.addHandler(handler);
            logger.log(Level.INFO, "DEM Main Frame");
        }
        catch (Exception e ) { logger.log(Level.SEVERE, "Uncaught exception", e);}
        
        Toolkit kit = Toolkit.getDefaultToolkit();
        this.setIconImage(kit.getImage(this.getClass().getResource("resources/dem-icon.png")));


        this.applicationTitle = "File System Search Window";
        this.listOfOpeningCase = list;
        
        // set frame resizable and set frame title
        this.setTitle(APPLICATION_NAME + applicationTitle);
        this.setResizable(true);

        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        
        this.index = AIndex ;
        
        // add close event
        this.addWindowListener( new WindowAdapter() {
            @Override
            public void windowClosed (WindowEvent event){
                doChecking();
            }

            @Override
            public void windowClosing (WindowEvent event){
                doChecking();
            }

            public void doChecking () {
                try {
                    if ( index != null ) {
                        String caseName = index.getIndexName() ;

                        if ( !caseName.isEmpty() )
                            listOfOpeningCase.remove(caseName);
                        }
                }
                catch (Exception e){
                    logger.log(Level.SEVERE, "Uncaught exception", e);
                }
            }
        });
        
        // configure file chooser to select files (txt)
        fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setFileFilter(new FilesFilter("Text Files (*.txt)", "txt"));
        
        // add document listsner for searching fields

//
//        // center integer values in tables
//        Utilities.setTableAlignmentValue(cloudsTable, 1);
//        Utilities.setTableAlignmentValue(inboxTable, 2);
//        Utilities.setTableAlignmentValue(sentItemTable, 2);
//        Utilities.setTableAlignmentValue(espTable, 1);
//        Utilities.setTableAlignmentValue(locationTable, 1);
//        Utilities.setTableAlignmentValue(summaryTable, 1);
//        
//
//        // craete image path list
//        imagesPath = new ArrayList<String>();
//
//        // wide the data in search table
//        Utilities.packColumns(searchTable, 0);
//
//        // diseable every component that will not indexing
//        disableNotIndexedComponent();


    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        indexGroupButton = new javax.swing.ButtonGroup();
        headerGroupButton = new javax.swing.ButtonGroup();
        jToolBar1 = new javax.swing.JToolBar();
        fileSystemToggleButton = new javax.swing.JToggleButton();
        emailToggleButton = new javax.swing.JToggleButton();
        internetSurfingToggleButton = new javax.swing.JToggleButton();
        chatToggleButton = new javax.swing.JToggleButton();
        imageViewerToggleButton = new javax.swing.JToggleButton();
        CardPanel = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        toolsMenu = new javax.swing.JMenu();
        windowsMenuItem = new javax.swing.JMenuItem();
        recentMenuItem = new javax.swing.JMenuItem();
        aboutMenu = new javax.swing.JMenu();
        helpMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Digital Evidence Miner ");
        setIconImages(null);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        headerGroupButton.add(fileSystemToggleButton);
        fileSystemToggleButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        fileSystemToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/gui/resources/search.png"))); // NOI18N
        fileSystemToggleButton.setText("File System Search");
        fileSystemToggleButton.setFocusable(false);
        fileSystemToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        fileSystemToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        fileSystemToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileSystemToggleButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(fileSystemToggleButton);

        headerGroupButton.add(emailToggleButton);
        emailToggleButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        emailToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/gui/resources/email.png"))); // NOI18N
        emailToggleButton.setText("Email Search");
        emailToggleButton.setFocusable(false);
        emailToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        emailToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        emailToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailToggleButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(emailToggleButton);

        headerGroupButton.add(internetSurfingToggleButton);
        internetSurfingToggleButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        internetSurfingToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/gui/resources/webButton.png"))); // NOI18N
        internetSurfingToggleButton.setText("Internet Surfing");
        internetSurfingToggleButton.setFocusable(false);
        internetSurfingToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        internetSurfingToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        internetSurfingToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                internetSurfingToggleButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(internetSurfingToggleButton);

        headerGroupButton.add(chatToggleButton);
        chatToggleButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        chatToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/gui/resources/Chat.png"))); // NOI18N
        chatToggleButton.setText("Instant Chat Search");
        chatToggleButton.setFocusable(false);
        chatToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        chatToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        chatToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chatToggleButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(chatToggleButton);

        headerGroupButton.add(imageViewerToggleButton);
        imageViewerToggleButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        imageViewerToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/gui/resources/kview.png"))); // NOI18N
        imageViewerToggleButton.setText("Images Viewer");
        imageViewerToggleButton.setFocusable(false);
        imageViewerToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        imageViewerToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        imageViewerToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageViewerToggleButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(imageViewerToggleButton);

        CardPanel.setLayout(new java.awt.CardLayout());

        fileMenu.setText("File");
        fileMenu.setFont(new java.awt.Font("Tahoma", 1, 11));

        exitMenuItem.setText(" Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        jMenuBar1.add(fileMenu);

        toolsMenu.setText("Tools");
        toolsMenu.setFont(new java.awt.Font("Tahoma", 1, 11));

        windowsMenuItem.setText("Windows Information");
        windowsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                windowsMenuItemActionPerformed(evt);
            }
        });
        toolsMenu.add(windowsMenuItem);

        recentMenuItem.setText("Recent Documents");
        recentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recentMenuItemActionPerformed(evt);
            }
        });
        toolsMenu.add(recentMenuItem);

        jMenuBar1.add(toolsMenu);

        aboutMenu.setText("About");
        aboutMenu.setFont(new java.awt.Font("Tahoma", 1, 11));

        helpMenuItem.setText("Help");
        helpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuItemActionPerformed(evt);
            }
        });
        aboutMenu.add(helpMenuItem);
        aboutMenu.add(jSeparator1);

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        aboutMenu.add(aboutMenuItem);

        jMenuBar1.add(aboutMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(CardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 722, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 722, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleName("DEM");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void windowsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_windowsMenuItemActionPerformed
        try {
            ArrayList<String> data = Utilities.readProgramOutputStream("systeminfo.exe");

            WindowsInfoDialog wid = new WindowsInfoDialog(mainFrame, true, data);
            wid.setVisible(true);
        }
        catch (IOException e) {
            logger.log(Level.SEVERE, "Uncaught exception", e);
        }
    }//GEN-LAST:event_windowsMenuItemActionPerformed

    private void recentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recentMenuItemActionPerformed
        RecentDialog rd = new RecentDialog(mainFrame, true);
        rd.setVisible(true);
    }//GEN-LAST:event_recentMenuItemActionPerformed
    
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        this.dispose();
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void helpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuItemActionPerformed
        JOptionPane.showMessageDialog(this, "please return to CoEIA web site",
                "to get more help", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_helpMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        JOptionPane.showMessageDialog(this, "All right is reserved to CoEIA 2010",
                "about product", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void fileSystemToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileSystemToggleButtonActionPerformed
        showPanel("fileSystemCard",CardPanel);
        this.setTitle(APPLICATION_NAME + "File System Search Window");
    }//GEN-LAST:event_fileSystemToggleButtonActionPerformed

    private void emailToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailToggleButtonActionPerformed
       showPanel("emailCard",CardPanel);
       this.setTitle(APPLICATION_NAME + "Email Search Window");
    }//GEN-LAST:event_emailToggleButtonActionPerformed

    private void internetSurfingToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_internetSurfingToggleButtonActionPerformed
       showPanel("internetSurfingCard",CardPanel);
       this.setTitle(APPLICATION_NAME + "Internet Surfing Search Window");
    }//GEN-LAST:event_internetSurfingToggleButtonActionPerformed

    private void chatToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chatToggleButtonActionPerformed
        showPanel("chatCard",CardPanel);
        this.setTitle(APPLICATION_NAME + "Instance Chat Search Window");
    }//GEN-LAST:event_chatToggleButtonActionPerformed

    private void imageViewerToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageViewerToggleButtonActionPerformed
         showPanel("imagesViewerCard", CardPanel);
         this.setTitle(APPLICATION_NAME + "Image Viewer Window");
    }//GEN-LAST:event_imageViewerToggleButtonActionPerformed

//    private void showPopup (java.awt.event.MouseEvent event) {
//        final JTable table = (JTable) event.getSource();
//        JPopupMenu popup = new JPopupMenu();
//        JButton btn = new JButton("Export to CSV File");
//        
//        btn.addActionListener( new java.awt.event.ActionListener() {
//            public void actionPerformed (java.awt.event.ActionEvent event) {
//                try {
//                    FilesFilter ffFilter = new FilesFilter("Comma Seperated Value","CSV");
//                    fileChooser.setFileFilter(ffFilter);
//
//                    int result = fileChooser.showSaveDialog(OfflineMinningFrame.this);
//
//                    if ( result == JFileChooser.APPROVE_OPTION) {
//                        String name = fileChooser.getSelectedFile().getAbsolutePath();
//                        Utilities.exportJTable(table,name);
//                    }
//                }
//                catch (Exception e){
//                    e.printStackTrace();
//                }
//            }
//        });
//
//        popup.add(btn);
//        table.setComponentPopupMenu(popup);
//    }

    // show panel function
    public void showPanel (String panelName, JPanel name) {
        CardLayout card = (CardLayout) name.getLayout();
        card.show(name, panelName);
    }



//    private void disableNotIndexedComponent () {
//        // close email if there is no pst file
//        if ( index.getPstPath().isEmpty() ) {
//            emailPanel.setEnabled(false);
//            loadPstButton.setEnabled(false);
//            //clusteringButton.setEnabled(false);
//            emailSearchButton.setEnabled(false);
//            outlookComboBox.setEnabled(false);
//            emailSearchButton.setEnabled(false);
//            emailVisualizationButton.setEnabled(false);
//            inboxTable.setEnabled(false);
//            sentItemTable.setEnabled(false);
//            espTable.setEnabled(false);
//            locationTable.setEnabled(false);
//            correlationComboBox.setEnabled(false);
//            fromDatePanel.getComponent(0).setEnabled(false);
//            toDatePanel.getComponent(0).setEnabled(false);
//        }
//
//        // close web browers data
//        if ( index.getFFPath().isEmpty() ) {
//            mozillaPanel.setEnabled(false);
//            ffComboBox.setEnabled(false);
//            loadFFButton.setEnabled(false);
//            mozillaSearchField.setEnabled(false);
//            mozillaFilterComboBox.setEnabled(false);
//            webHistoryButton.setEnabled(false);
//            bookmarButton.setEnabled(false);
//            cookiesButton.setEnabled(false);
//            downloadButton.setEnabled(false);
//            logginsButton.setEnabled(false);
//            webHistoryTable.setEnabled(false);
//            ffSummaryButtton.setEnabled(false);
//            ffViewHTMLReportButton.setEnabled(false);
//            ffVisualizingVisitedHostButton.setEnabled(false);
//            bookmarkTable.setEnabled(false);
//            cookiesTable.setEnabled(false);
//            downloadTable.setEnabled(false);
//            logginsTable.setEnabled(false);
//        }
//
//        if ( index.getIePath().isEmpty() ) {
//            IEPanel.setEnabled(false);
//            ieComboBox.setEnabled(false);
//            loadIEButton.setEnabled(false);
//            IESearchField.setEnabled(false);
//            IEFilterComboBox.setEnabled(false);
//            webHistoryButton1.setEnabled(false);
//            bookmarButton1.setEnabled(false);
//            cookiesButton1.setEnabled(false);
//            cacheButton.setEnabled(false);
//            logginsButton1.setEnabled(false);
//            IEWebHistoryTable.setEnabled(false);
//            IEBookmarkTable.setEnabled(false);
//            IECookiesTable.setEnabled(false);
//            IECacheTable.setEnabled(false);
//            IELogginsTable.setEnabled(false);
//        }
//
//        if ( index.getFFPath().isEmpty() && index.getIePath().isEmpty() ) {
//            summaryInternetPanel.setEnabled(false);
//            summaryInternetButton.setEnabled(false);
//            summaryTable.setEnabled(false);
//        }
//
//        // close chat panels
//        if (index.getMsnPath().isEmpty()) {
//            WindowsLivePanel.setEnabled(false);
//            msnComboBox.setEnabled(false);
//            msnChat.setEnabled(false);
//            msnChatContentPanel.setEnabled(false);
//            msnChatTree.setEnabled(false);
//            loadMSNButton.setEnabled(false);
//        }
//
//        if ( index.getYahooPath().isEmpty()) {
//            yahooChatContentPanel.setEnabled(false);
//            yahooChat.setEnabled(false);
//            yahooChatTree.setEnabled(false);
//            yahooComboBox.setEnabled(false);
//            yahooMessangerPanel.setEnabled(false);
//            loadYahooButton.setEnabled(false);
//        }
//
//        if (index.getSkypePath().isEmpty() ) {
//            skypePanel.setEnabled(false);
//            loadSkypeButton.setEnabled(false);
//            skypeComboBox.setEnabled(false);
//            skypeChatTree.setEnabled(false);
//            skypeChatContentPanel.setEnabled(false);
//            skypeTable.setEnabled(false);
//        }
//
//        if (index.getCacheImages() == false ) {
//            showImagesButton.setEnabled(false);
//            nextPageButton.setEnabled(false);
//            prePageButton.setEnabled(false);
//        }
//
//        if ( index.getDocumentInIndex().isEmpty() ) {
//            startIndexButton.setEnabled(false);
//            tagSelectButton.setEnabled(false);
//            indexVisulizingButton.setEnabled(false);
//            startSearchingButton.setEnabled(false);
//            clearFieldsButton.setEnabled(false);
//            keywordsListButton.setEnabled(false);
//            cloudsTable.setEnabled(false);
//        }
//    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CardPanel;
    private javax.swing.JMenu aboutMenu;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JToggleButton chatToggleButton;
    private javax.swing.JToggleButton emailToggleButton;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JToggleButton fileSystemToggleButton;
    private javax.swing.ButtonGroup headerGroupButton;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JToggleButton imageViewerToggleButton;
    private javax.swing.ButtonGroup indexGroupButton;
    private javax.swing.JToggleButton internetSurfingToggleButton;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenuItem recentMenuItem;
    private javax.swing.JMenu toolsMenu;
    private javax.swing.JMenuItem windowsMenuItem;
    // End of variables declaration//GEN-END:variables
}

    /* emial cluster tree
     * private void emailClusterTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {
     * 
     *  try {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) emailClusterTree.getLastSelectedPathComponent();
            if ( node == null || node.isRoot() || ! node.isLeaf()) {
                return ;
            }

            ClusterNode cluster = (ClusterNode) node.getUserObject();
            PSTMessage selectedMessage = cluster.getMessage() ;

            if (selectedMessage instanceof PSTContact) {
                PSTContact contact = (PSTContact)selectedMessage;
                textEditorPane.setText(contact.toString());
            } else if (selectedMessage instanceof PSTTask) {
                PSTTask task = (PSTTask)selectedMessage;
                textEditorPane.setText(task.toString());
            } else if (selectedMessage instanceof PSTActivity) {
                PSTActivity journalEntry = (PSTActivity)selectedMessage;
                textEditorPane.setText(journalEntry.toString());
            } else if (selectedMessage instanceof PSTRss) {
                PSTRss rss = (PSTRss)selectedMessage;
                textEditorPane.setText(rss.toString());
            } else if (selectedMessage != null) {
                webBrowser.setHTMLContent(selectedMessage.getBodyHTML());
                HTMLRenderPanel.validate();
                textEditorPane.setText(selectedMessage.getBodyHTML());
                headerEditorPane.setText(selectedMessage.getTransportMessageHeaders());
            }

            textEditorPane.setCaretPosition(0);
            headerEditorPane.setCaretPosition(0);

            //            ArrayList<PSTMessage> msgs = cluster.messageList;
            //            ArrayList<String> data = new ArrayList<String>();
            //
            //            for (PSTMessage m: msgs)
            //                data.add(m.getDescriptorNode().descriptorIdentifier + "");
            //
            //            emailTableModel.setFolder("Inbox");
            //            filterEmailTable(emailTable, data);

        } catch (Exception e){
            e.printStackTrace();
        }
     */


    /* cluster code , button event
     * 
     *         if ( index.getIndexStatus() == false ) {
            JOptionPane.showMessageDialog(this, "please do the indexing operation first before do any operation",
                    "Case is not indexed",JOptionPane.ERROR_MESSAGE );
            return ;
        }

        if ( emailSearchTextField.getText().trim().isEmpty() ) {
            JOptionPane.showMessageDialog(this, "please write the keyword you want to search",
                    "missing search key",JOptionPane.ERROR_MESSAGE );
            return ;
        }

        try {
            String keyword = emailSearchTextField.getText().trim() ;
            if ( outlookComboBox.getSelectedIndex() < 0 )
                return ;

            String path = (String) outlookComboBox.getSelectedItem();

            // time consuming statemnt
            InfiniteProgressPanel i = new InfiniteProgressPanel("Clustering MailBox");
            this.setGlassPane(i);
            i.start();

            ClusteringEmailThread ceTh = new ClusteringEmailThread(keyword, i, emailClusterTree, index, pstFile, path);
            ceTh.execute();

            clusteringTabbedPane.setSelectedIndex(1);
        } catch (Exception e) {
            System.out.println("error in clustering");
            e.printStackTrace();
        }
     */
    
//    private List<MessageHeader> getInboxMessage() {
//        List<MessageHeader> data = new ArrayList<MessageHeader>();
//
//        try {
//            File indexLocation = new File (index.getIndexLocation() + "\\" + FilesPath.INDEX_PATH);
//            PSTSearcher pSearcher = new PSTSearcher(indexLocation);
//
//            int len = pSearcher.searchInbox();
//            System.out.println("length of inbox = " + len);
//
//            for (String path: index.getPstPath()) {
//                if ( path.equals(outlookComboBox.getSelectedItem())){
//                    for (int i=0 ; i<len ; i++){
//                        Document doc = pSearcher.getDocHits(i);
//
//                        int id = Integer.parseInt(doc.get("mailid"));
//                        PSTMessage msg = getMessage(id);
//
//                        if ( msg != null ) {
//                            String subject = doc.get(PSTSearcher.SearchField.TITLE.Value());
//                            String from = doc.get(PSTSearcher.SearchField.FROM.Value());
//                            String to = doc.get(PSTSearcher.SearchField.TO.Value());
//                            String date = doc.get(PSTSearcher.SearchField.DATE.Value());
//                            boolean hasAttachment = Boolean.valueOf(doc.get(PSTSearcher.SearchField.HAS_ATTACGMENT.Value()));
//
//                            MessageHeader message = new MessageHeader(id, subject, from, to, date, hasAttachment);
//
//                            data.add(message);
//                        }
//                        else {
//                            System.out.println("msg == null (3701) ");
//                        }
//                    }
//
//                    pSearcher.closeSearcher();
//                }
//            }
//        }
//        catch (Exception e) {
//        }
//
//        return data;
//    }

//    private void inboxCorrelations(String from, String to,PSTFile testPST,  String path) {
//        try{
//            // time consuming statemnt
////            InfiniteProgressPanel i = new InfiniteProgressPanel("Inbox Visualization...");
////            this.setGlassPane(i);
////            //i.start();
////
////            WaitGUIThread wait = new WaitGUIThread(this, i);
////            wait.execute();
//
//            EmailHandler eh = new EmailHandler(testPST, path);
//            ArrayList<Message> data = eh.getSenderName(from, to);
//
//            Map<String,Integer> inboxMap = new HashMap<String,Integer>();
//
//            if ( data == null) {
//                return ;
//            }
//
//            // show report on table
//            if ( inboxTable.getModel().getRowCount() > 0 )
//             Utilities.removeAllRows(inboxTable);
//
//            for (Message msg: data) {
//                ( (DefaultTableModel) inboxTable.getModel() ).addRow(
//                    new Object[] { msg.getSenderName() , msg.getReceiverName() , new Integer(msg.getNumberOfMessage()),
//                    msg.getDate() } );
//
//                inboxMap.put(msg.getSenderName(), msg.getNumberOfMessage());
//            }
//
//            // Pack the all columns of the table
//            int margin = 1;
//            Utilities.packColumns(inboxTable, margin);
//            Utilities.sortTable(inboxTable,1);
//
//            //wait.stop();
//
//            // show visulization
//            CorrelationDialog cd = new CorrelationDialog(mainFrame, true, inboxMap,eh.getUserName(),"Inbox");
//            cd.setVisible(true);
//
//            cd.releaseMemory();
//        }
//        catch (java.text.ParseException e){
//            e.printStackTrace();
//        }
//    }
//
//    private void sentItemCorrelation (String from, String to, PSTFile testPST, String path) {
//        try{
//            EmailHandler eh = new EmailHandler(testPST, path);
//            ArrayList<Message> data = eh.getReceiverName(from, to);
//            HashMap<String,Integer> sentMap = new HashMap<String,Integer>();
//            //Collections.sort(data);
//
//             if ( data == null) {
//                return ;
//            }
//
//            // show report on table
//            if ( sentItemTable.getModel().getRowCount() > 0 )
//             Utilities.removeAllRows(sentItemTable);
//
//            for (Message msg: data) {
//                ( (DefaultTableModel) sentItemTable.getModel() ).addRow(
//                    new Object[] { msg.getSenderName() , msg.getReceiverName() , new Integer(msg.getNumberOfMessage()),
//                    msg.getDate() } );
//
//                sentMap.put(msg.getSenderName(), msg.getNumberOfMessage());
//            }
//
//            // Pack the all columns of the table
//            int margin = 1;
//            Utilities.packColumns(sentItemTable, margin);
//            Utilities.sortTable(sentItemTable,1);
//
//            // show visulization
//            CorrelationDialog cd = new CorrelationDialog(mainFrame, true, sentMap,eh.getUserName(),"Sent Items");
//            cd.setVisible(true);
//            //cd.releaseMemory();
//        }
//        catch (java.text.ParseException e){
//            e.printStackTrace();
//        }
//    }
//
//    private void locationCorrelation(String from, String to, PSTFile testPST, String path) {
//        try{
//            EmailHandler eh = new EmailHandler(testPST, path);
//            HashMap<String,Integer> data = eh.getLocations(from,to);
//
//            if ( data == null) {
//                return ;
//            }
//
//            data.put(eh.getUserName(), 5);
//
//            // show report on table
//            if ( locationTable.getModel().getRowCount() > 0 )
//                 Utilities.removeAllRows(locationTable);
//
//            Set set = data.entrySet();
//            Iterator itr = set.iterator();
//
//            while ( itr.hasNext() ) {
//                Map.Entry me = (Map.Entry) itr.next();
//
//                String name = (String) me.getKey();
//                int num = (Integer) me.getValue();
//
//                if ( name.equals(eh.getUserName()))
//                    continue ;
//
//                ( (DefaultTableModel) locationTable.getModel() ).addRow(
//                    new Object[] { name , new Integer(num) } );
//            }
//
//            // Pack the all columns of the table
//            int margin = 1;
//            Utilities.packColumns(locationTable, margin);
//
//            Utilities.sortTable(locationTable,1);
//
//            // show visulization
//            CorrelationDialog cd = new CorrelationDialog(mainFrame, true, data,eh.getUserName(),"Messages Location");
//            cd.setVisible(true);
//            //cd.releaseMemory();
//        }
//        catch (java.text.ParseException e){
//            e.printStackTrace();
//        }
//    }
//
//    private void espCorrelation(String from, String to,PSTFile testPST, String path) {
//        try {
//            EmailHandler eh = new EmailHandler(testPST, path);
//            HashMap<String,Integer> data = eh.getEspName(from,to);
//
//            if ( data == null) {
//                return ;
//            }
//
//            data.put(eh.getUserName(), 5);
//
//             // show report on table
//            if ( espTable.getModel().getRowCount() > 0 )
//                 Utilities.removeAllRows(espTable);
//
//            Set set = data.entrySet();
//            Iterator itr = set.iterator();
//
//            while ( itr.hasNext() ) {
//                Map.Entry me = (Map.Entry) itr.next();
//
//                String name = (String) me.getKey();
//                int num = (Integer) me.getValue();
//
//                if ( name.equals(eh.getUserName()))
//                    continue ;
//
//                ( (DefaultTableModel) espTable.getModel() ).addRow(
//                    new Object[] { name , new Integer(num) } );
//            }
//
//            // Pack the all columns of the table
//            int margin = 1;
//            Utilities.packColumns(espTable, margin);
//
//            Utilities.sortTable(espTable,1);
//
//            // show visulization
//            CorrelationDialog cd = new CorrelationDialog(mainFrame, true, data,eh.getUserName(),"Email Service Provider");
//            cd.setVisible(true);
//
//            //cd.releaseMemory();
//        }
//        catch (java.text.ParseException e){
//            e.printStackTrace();
//        }
//    }
