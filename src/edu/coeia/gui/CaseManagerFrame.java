package edu.coeia.gui;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CaseManagerFrame.java
 *
 * Created on 16/07/2010, 01:09:17 Ù…
 */

/* import internal classes */
import edu.coeia.utility.FilesPath ;
import edu.coeia.utility.Utilities;
import edu.coeia.index.IndexInformation;
import edu.coeia.index.IndexOperation ;

/* import sun classes */
import javax.swing.UIManager ;
import javax.swing.SwingUtilities ;
import javax.swing.JTable ;
import javax.swing.table.DefaultTableModel ;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter ;
import javax.swing.JOptionPane ;

import java.io.IOException ;
import java.io.File ;
import java.io.FileWriter ;
import java.io.PrintWriter ;
import java.io.FileNotFoundException ;

import java.util.ArrayList ;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Calendar ;
import java.util.List;

import java.awt.Toolkit ;
import java.awt.Dimension ;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

/* import Third Party Libraries */
import chrriis.dj.nativeswing.swtimpl.NativeInterface;
import java.util.prefs.Preferences;

/**
 *
 * @author Wajdy Essam
 *
 */

public class CaseManagerFrame extends javax.swing.JFrame {

    //private static final String lookAndFeelName = "com.sun.java.swing.plaf.windows.WindowsLookAndFeel" ;
    //private static final String lookAndFeelName = "org.jvnet.substance.skin.SubstanceRavenGraphiteLookAndFeel";
    //private static final String lookAndFeelName = "org.jvnet.substance.skin.SubstanceBusinessLookAndFeel";
    
    
    private static final String lookAndFeelName = "org.jvnet.substance.skin.SubstanceDustLookAndFeel";
    private List<String> listOfOpeningCase ;

    // determine full version or beta version
    // true  - full version should work using smart card licence
    // false - beta version should be trial version for 15 days
    
    private boolean isFullVersion = false;
    private static final int TRIAL_LENGTH = 60; // days
    
    /** Creates new form CaseManagerFrame */
    public CaseManagerFrame() {
        initComponents();

        this.listOfOpeningCase = new ArrayList<String>();
        
        /** set look and feel to windows look */
        try {
            changeLookAndFeel(lookAndFeelName);
        }
        catch (Exception e){
            e.printStackTrace();
        }

        /** set application in middle of screen **/
        Toolkit kit = Toolkit.getDefaultToolkit() ;
        Dimension screenSize = kit.getScreenSize() ;
        int width = screenSize.width ;
        int height = screenSize.height;

        // set application title and default location when startup
        this.setLocation( width / 4, height / 4);
        this.setTitle("Digital Evidence Miner (Beta Version): Case Manager Window");

        // add close event
        this.addWindowListener( new WindowAdapter() {
            @Override
            public void windowClosing (WindowEvent event){
                saveUsage();
            }
        });

        try {
            // if its beta version
            if ( ! isFullVersion ) {
                if ( isExpireNow() ) {
                    JOptionPane.showMessageDialog(this, "Your software has been expired!",
                            "please purchase the full version...",
                            JOptionPane.INFORMATION_MESSAGE);
                    System.exit(0);
                }
            }

            /** initApplication:
             *  check Application folder
             *  if not found: create new application folder
             *  if found: open the indexes pointers
             *  and fill the table with information
            */
            initApplication();
        }
        catch (IOException e){
            e.printStackTrace();
        }
        catch (ClassNotFoundException e){
            e.printStackTrace();
        }        
    }

    private void changeLookAndFeel ( String lookName ) throws Exception  {
        UIManager.setLookAndFeel(lookName);
        SwingUtilities.updateComponentTreeUI(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        caseManagerDataPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        recentCaseTable = new javax.swing.JTable() { public boolean isCellEditable(int rowIndex, int vColIndex) { return false; } }
        ;
        jScrollPane2 = new javax.swing.JScrollPane();
        caseInformationTable = new javax.swing.JTable(){ public boolean isCellEditable(int rowIndex, int vColIndex) { return false; } };
        caseManagerButtonsPanel = new javax.swing.JPanel();
        newCaseButton = new javax.swing.JButton();
        loadCaseButton = new javax.swing.JButton();
        removeCaseButton = new javax.swing.JButton();
        checkLicenseButton = new javax.swing.JButton();
        jToolBar1 = new javax.swing.JToolBar();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Digital Evidence Miner: Case Manager");
        setIconImage(Toolkit.getDefaultToolkit().getImage(this.getClass().getResource("/edu/coeia/gui/resources/dem-icon.png")));
        setResizable(false);

        caseManagerDataPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Recent Cases Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        recentCaseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Case Name","Investigator Name","Case Date","Case Description",
                "Case Indexed"
            }

        )
    );
    recentCaseTable.setFillsViewportHeight(true);
    recentCaseTable.setGridColor(new java.awt.Color(255, 255, 255));
    recentCaseTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    recentCaseTable.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            recentCaseTableMouseClicked(evt);
        }
    });
    jScrollPane1.setViewportView(recentCaseTable);

    caseInformationTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
        },
        new String [] {
            "Property" , "Value"
        }
    ));
    jScrollPane2.setViewportView(caseInformationTable);

    javax.swing.GroupLayout caseManagerDataPanelLayout = new javax.swing.GroupLayout(caseManagerDataPanel);
    caseManagerDataPanel.setLayout(caseManagerDataPanelLayout);
    caseManagerDataPanelLayout.setHorizontalGroup(
        caseManagerDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, caseManagerDataPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(caseManagerDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE))
            .addContainerGap())
    );
    caseManagerDataPanelLayout.setVerticalGroup(
        caseManagerDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(caseManagerDataPanelLayout.createSequentialGroup()
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE))
    );

    caseManagerButtonsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Case Operations", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

    newCaseButton.setFont(new java.awt.Font("Tahoma", 1, 11));
    newCaseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/gui/resources/1295181153_manilla-folder-new.png"))); // NOI18N
    newCaseButton.setText("New Case");
    newCaseButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            newCaseButtonActionPerformed(evt);
        }
    });

    loadCaseButton.setFont(new java.awt.Font("Tahoma", 1, 11));
    loadCaseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/gui/resources/open_case.png"))); // NOI18N
    loadCaseButton.setText("Load & Open Case");
    loadCaseButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            loadCaseButtonActionPerformed(evt);
        }
    });

    removeCaseButton.setFont(new java.awt.Font("Tahoma", 1, 11));
    removeCaseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/gui/resources/remove_case.png"))); // NOI18N
    removeCaseButton.setText("Remove Case");
    removeCaseButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            removeCaseButtonActionPerformed(evt);
        }
    });

    checkLicenseButton.setFont(new java.awt.Font("Tahoma", 1, 11));
    checkLicenseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/gui/resources/1295179145_User Card.png"))); // NOI18N
    checkLicenseButton.setText("Check License");
    checkLicenseButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            checkLicenseButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout caseManagerButtonsPanelLayout = new javax.swing.GroupLayout(caseManagerButtonsPanel);
    caseManagerButtonsPanel.setLayout(caseManagerButtonsPanelLayout);
    caseManagerButtonsPanelLayout.setHorizontalGroup(
        caseManagerButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(caseManagerButtonsPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(caseManagerButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(newCaseButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                .addComponent(checkLicenseButton, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                .addComponent(removeCaseButton, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                .addComponent(loadCaseButton, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE))
            .addContainerGap())
    );
    caseManagerButtonsPanelLayout.setVerticalGroup(
        caseManagerButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(caseManagerButtonsPanelLayout.createSequentialGroup()
            .addComponent(newCaseButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(loadCaseButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
            .addComponent(removeCaseButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(checkLicenseButton))
    );

    jToolBar1.setFloatable(false);
    jToolBar1.setRollover(true);

    jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
    jLabel2.setForeground(new java.awt.Color(153, 153, 153));
    jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/gui/resources/caseManager.jpg"))); // NOI18N
    jToolBar1.add(jLabel2);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(caseManagerDataPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(caseManagerButtonsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(caseManagerDataPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(caseManagerButtonsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadCaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadCaseButtonActionPerformed
        try {
            String indexName = getSelectedCase();
            loadCase(indexName);
        }
        catch (IOException e) {
            JOptionPane.showMessageDialog(this, "the location for this index is not founded, please recreate the case again", "Index File not Found!",
                JOptionPane.ERROR_MESSAGE);
        }
        catch (ClassNotFoundException e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_loadCaseButtonActionPerformed

    private void newCaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newCaseButtonActionPerformed
        try {
            IndexWizard indexWizard = new IndexWizard(CaseManagerFrame.this,true, isFullVersion);
            indexWizard.setVisible(true);
            IndexInformation index = indexWizard.getIndex();

            if ( index == null) {
//                JOptionPane.showMessageDialog(CaseManagerFrame.this, "Cannot Creating Index",
//                        "Operation is not Completed",JOptionPane.ERROR_MESSAGE);
                return ;
            }

            // update indexes info file with new index
            updateIndexesInfoFile(index);

            // update recent table with this new information
            updateRecentTable();

        }
        catch (IOException e){
            e.printStackTrace();
        }
        catch (ClassNotFoundException e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_newCaseButtonActionPerformed

    private void removeCaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeCaseButtonActionPerformed
       int row = recentCaseTable.getSelectedRow();

        if ( row < 0 ) {
            JOptionPane.showMessageDialog(this, "please select the case you want to remove",
                "No Case is Selected", JOptionPane.INFORMATION_MESSAGE);
            return ;
        }

        String indexName = (String) recentCaseTable.getValueAt(row, 0);

        try {
            IndexInformation index = getIndexInformationFromIndexName(indexName);
            File file = new File( index.getIndexLocation() );
            
            if ( Utilities.removeDirectory(file) ) {
                ArrayList<String> indexPtr = Utilities.getFileContentInArrayList(new File(FilesPath.INDEXES_INFO) );
                ArrayList<String> newIndexPtr = new ArrayList<String>();
                
                for (String line: indexPtr) {
                    String name = line.split("-")[0].trim();
                    String path = line.split("-")[1].trim();

                    if ( name.equals(index.getIndexName()) && path.equals(index.getIndexLocation()))
                        continue ;

                    newIndexPtr.add(line);
                }

                // write new index information to file
                Utilities.writeToFile(newIndexPtr, FilesPath.INDEXES_INFO);

                // update view table
                updateRecentTable();
                
                // remove entrie in case information table
                removeAllRows(caseInformationTable);
            }
        }
        catch (IOException e) {
            JOptionPane.showMessageDialog(this, "the location for this index is not founded, please recreate the case again", "Index File not Found!",
                JOptionPane.ERROR_MESSAGE);
        }
        catch (ClassNotFoundException e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_removeCaseButtonActionPerformed

    private void recentCaseTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_recentCaseTableMouseClicked
        
        if ( evt.getClickCount() == 2 ) {
            try {
                showCaseInformation();
                String caseName = getSelectedCase();
                loadCase(caseName);
            }
            catch (IOException e){
                JOptionPane.showMessageDialog(this, "the location for this index is not founded, please recreate the case again", "Index File not Found!",
                    JOptionPane.ERROR_MESSAGE);
            }
            catch (ClassNotFoundException e){
                e.printStackTrace();
            }
        }
        else {
            showCaseInformation();
        }
    }//GEN-LAST:event_recentCaseTableMouseClicked

    private void checkLicenseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkLicenseButtonActionPerformed
        // show smart card inserting/usage dialog
        if ( isFullVersion ) {
            SmartCardDialog scd = new SmartCardDialog(this, true, true);
            scd.setVisible(true);
        }
        else {
            Date currentDate = new Date();

            Preferences root = Preferences.userRoot();
            Preferences node = root.node("/com/coeia/dem");

            String installTime = node.get("installTime",String.valueOf(currentDate.getTime()));
            Date installDate = new Date(Long.valueOf(installTime));

            Date expireDate = addDays(installDate, TRIAL_LENGTH);

            int diff = subtractDays( expireDate, currentDate);
            JOptionPane.showMessageDialog(this, "Remaining days: " + diff, "Trial Version",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_checkLicenseButtonActionPerformed

    // from: http://www.velocityreviews.com/forums/t139746-how-to-subtract-dates.html
    private int subtractDays(Date date1, Date date2) {
        GregorianCalendar gc1 = new GregorianCalendar();  gc1.setTime(date1);
        GregorianCalendar gc2 = new GregorianCalendar();  gc2.setTime(date2);

        int days1 = 0;
        int days2 = 0;
        int maxYear = Math.max(gc1.get(Calendar.YEAR), gc2.get(Calendar.YEAR));

        GregorianCalendar gctmp = (GregorianCalendar) gc1.clone();
        for (int f = gctmp.get(Calendar.YEAR);  f < maxYear;  f++)
            {days1 += gctmp.getActualMaximum(Calendar.DAY_OF_YEAR);  gctmp.add(Calendar.YEAR, 1);}

        gctmp = (GregorianCalendar) gc2.clone();
        for (int f = gctmp.get(Calendar.YEAR);  f < maxYear;  f++)
            {days2 += gctmp.getActualMaximum(Calendar.DAY_OF_YEAR);  gctmp.add(Calendar.YEAR, 1);}

        days1 += gc1.get(Calendar.DAY_OF_YEAR) - 1;
        days2 += gc2.get(Calendar.DAY_OF_YEAR) - 1;

        return (days1 - days2);
    }
    
    /**
     *
     * private Functions
     *
    */

    private boolean isExpireNow() {
        boolean state = false;

        Date currentDate = new Date();
        
        //Preferences node = Preferences.userNodeForPackage(this.getClass());
        
        Preferences root = Preferences.userRoot();
        Preferences node = root.node("/com/coeia/dem");

        String installTime = node.get("installTime",String.valueOf(currentDate.getTime()));
        String lastUsage = node.get("LastUsage", String.valueOf(currentDate.getTime()));

        Date installDate = new Date(Long.valueOf(installTime));
        Date lastDate = new Date(Long.valueOf(lastUsage));

        if ( lastDate.after(currentDate) ) {
            state = true;
        }
        else if ( lastDate.before(currentDate) ) {
            Date expireDate = addDays(installDate, TRIAL_LENGTH);

            if ( expireDate.before(currentDate))
                state = true;
            else
                state = false;
        }
        else {
            node.put("installTime", String.valueOf(currentDate.getTime()));
            node.put("LastUsage", String.valueOf(currentDate.getTime()));
            state = false;
        }

        return state;
    }

    private void saveUsage () {
        Date currentDate = new Date();

        Preferences root = Preferences.userRoot();
        Preferences node = root.node("/com/coeia/dem");
        
        node.put("LastUsage", String.valueOf(currentDate.getTime()));
    }

    private static Date addDays (Date date, int days) {
        GregorianCalendar now = new GregorianCalendar();
        now.setTime(date);
        now.add(Calendar.DATE, days);

        return (now.getTime());
    }
    
    private String getSelectedCase () {
        int row = recentCaseTable.getSelectedRow();

        if ( row < 0 ) {
            JOptionPane.showMessageDialog(this, "please select the case you want to open",
                    "No Case is Selected", JOptionPane.INFORMATION_MESSAGE);
            return null ;
        }

        String indexName = (String) recentCaseTable.getValueAt(row, 0);

        return indexName; 
    }

    private void loadCase (String caseName ) throws FileNotFoundException, IOException, ClassNotFoundException{
        if ( caseName != null ) {
            if ( !this.listOfOpeningCase.contains(caseName)) {
                IndexInformation index = getIndexInformationFromIndexName(caseName);

                this.listOfOpeningCase.add(caseName);

                OfflineMinningFrame mainFrame = new OfflineMinningFrame(index,false, index.getIndexName() + " Case",
                        listOfOpeningCase);
                mainFrame.setVisible(true);
            }
            else {
                JOptionPane.showMessageDialog(this, "This case is already opening",
                        "Already Openining Case", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }
    
    private void showCaseInformation () {
        int row = recentCaseTable.getSelectedRow();

        if ( row < 0 )
            return ;

        String indexName = (String) recentCaseTable.getValueAt(row, 0);

        // clear value on table before adding new values
        if ( caseInformationTable.getModel().getRowCount() > 0 )
            removeAllRows(caseInformationTable);

        try {
            IndexInformation index = getIndexInformationFromIndexName(indexName);
            DefaultTableModel model = (DefaultTableModel) caseInformationTable.getModel();

            model.addRow( new Object[] { "Index Name" , index.getIndexName() });
            model.addRow( new Object[] { "Index Path" , index.getIndexLocation() });
            model.addRow( new Object[] { "Created Date and Time" , Utilities.formatDateTime(index.getCreateTime()) } );
            model.addRow( new Object[] { "Data Indexed Size" , Utilities.formatSize(Utilities.toKB(index.getDataIndexedSize())) + " KB"  });
            model.addRow( new Object[] { "Extensions Allowed" , index.getExtensionAllowed() });

            addValues(index.getDocumentInIndex(),"Case In Index",model);
            addValues(index.getPstPath(),"Outlook Documents in Index", model);
            addValues(index.getIePath(),"IE Paths in Index", model);
            addValues(index.getFFPath(), "FF Paths in Index", model);
            addValues(index.getMsnPath(),"MSN Paths in Index", model);
            addValues(index.getYahooPath(),"Yahoo Paths in Index", model);
            addValues(index.getSkypePath(), "Skype Paths in Index", model);

            model.addRow( new Object[] { "Cache All Images" , index.getCacheImages() });
            //model.addRow( new Object[] { "Look Inside Compressed Files" , index.getCheckCompressed() });
        }
        catch (IOException e) {
            JOptionPane.showMessageDialog(this, "the location for this index is not founded, please recreate the case again", "Index File not Found!",
                JOptionPane.ERROR_MESSAGE);
        }
        catch (ClassNotFoundException e){
            e.printStackTrace();
        }
   }

    // add value from arraylist to case information table
    private void addValues (ArrayList<String> data, String text, DefaultTableModel model) {
        for (String s: data ) {
            model.addRow( new Object[] { text , s });
            text = "" ;
        }
    }

    // add entry to indexes info file
    private void updateIndexesInfoFile (IndexInformation index) throws IOException {
        PrintWriter writer = new PrintWriter(new FileWriter(new File(FilesPath.INDEXES_INFO), true));
        writer.println(index.getIndexName() + " - " + index.getIndexLocation());
        writer.close();
    }
    
    // create new application folder or open it
    private void initApplication () throws IOException,ClassNotFoundException {
        File root = new File(FilesPath.APPLICATION_PATH);
        File cases = new File(FilesPath.CASES_PATH);
        File indexesInfo = new File(FilesPath.INDEXES_INFO);
        File tmpFile = new File(FilesPath.TMP_PATH);
        
        if ( ! root.exists() ) {
           createApplicationFolders(root, cases, indexesInfo, tmpFile);
        }
        else {
            System.out.println("Open: " + FilesPath.INDEXES_INFO);
            try {
                updateRecentTable();
            }
            catch (IOException e) {
                // if thers is error (like not found index.txt file) recreate all the files)
                createApplicationFolders(root, cases, indexesInfo, tmpFile);
            }
        }
    }

    private void createApplicationFolders (File root, File cases, File indexesInfo, File tmpFile) throws IOException{
        if  ( ! root.exists() )
            root.mkdir();   // make offline folder in applicationData
        
         if  ( ! cases.exists() )
             cases.mkdir();  // make offlinemining\cases

         if  ( ! indexesInfo.exists() )
             indexesInfo.createNewFile();  // make offlinemining\indexes.txt

         if  ( ! tmpFile.exists() )
             tmpFile.mkdir();

        // craete tmp files
        new File(FilesPath.HIS_TMP).createNewFile();
        new File(FilesPath.PASS_TMP).createNewFile();
        new File(FilesPath.CORRE_FILE).createNewFile();

        System.out.println("Create new index information dir");
    }

    // update recent table by reading indexes info file
    public void updateRecentTable () throws FileNotFoundException, IOException, ClassNotFoundException {
        File indexesInfo = new File(FilesPath.INDEXES_INFO);
        ArrayList<String> indexesInfoContent  = Utilities.getFileContentInArrayList(indexesInfo);

        // clear value on table before adding new values
        if ( recentCaseTable.getModel().getRowCount() > 0 )
            removeAllRows(recentCaseTable);

        for(String path: indexesInfoContent) {
            IndexInformation index = getIndexInformation(path);
            addIndexInformationToTable(index);
        }
    }

    // get indexInformation from line of string (was reading from indexes_info file)
    private IndexInformation getIndexInformation (String line) throws IOException,ClassNotFoundException {
        String name = line.split("-")[0].trim();
        String path = line.split("-")[1].trim();

        IndexInformation index = IndexOperation.readIndex(new File(path + "\\" + name + ".DAT"));

        return index ;
    }
    
    // add index information to recent table
    private void addIndexInformationToTable (IndexInformation index) {
        DefaultTableModel model = (DefaultTableModel) recentCaseTable.getModel();
        model.addRow( new Object[] {index.getIndexName(), index.getInvestigatorName(), Utilities.formatDateTime(index.getCreateTime()), index.getDescription(),
            index.getIndexStatus() });
    }

    private void removeAllRows (JTable table) {
        TableModel model = table.getModel();
        ( (DefaultTableModel) model ).getDataVector().removeAllElements();
        ( (DefaultTableModel) model ).fireTableDataChanged();

        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(model);
        table.setRowSorter(sorter);
        sorter.setRowFilter(null);
    }

    // get index path from index name
    private IndexInformation getIndexInformationFromIndexName (String indexName) throws FileNotFoundException, IOException, ClassNotFoundException {
        File indexesInfo = new File(FilesPath.INDEXES_INFO);
        ArrayList<String> indexesInfoContent  = Utilities.getFileContentInArrayList(indexesInfo);

        for(String path: indexesInfoContent) {
            IndexInformation index = getIndexInformation(path);

            if ( index.getIndexName().equals(indexName))
                return index ;
        }

        return null ;
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        NativeInterface.open(); // used for swing DJ Library
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CaseManagerFrame().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable caseInformationTable;
    private javax.swing.JPanel caseManagerButtonsPanel;
    private javax.swing.JPanel caseManagerDataPanel;
    private javax.swing.JButton checkLicenseButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton loadCaseButton;
    private javax.swing.JButton newCaseButton;
    private javax.swing.JTable recentCaseTable;
    private javax.swing.JButton removeCaseButton;
    // End of variables declaration//GEN-END:variables

}
