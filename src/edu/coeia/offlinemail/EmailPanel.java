/* 
 * Copyright (C) 2014 Center of Excellence in Information Assurance
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package edu.coeia.offlinemail;


import edu.coeia.gutil.GuiUtil;
import edu.coeia.constants.ApplicationConstants ;
import edu.coeia.util.GUIFileFilter ;
import edu.coeia.cases.Case;
import edu.coeia.gutil.InfiniteProgressPanel;
import edu.coeia.util.DateUtil;

import java.awt.BorderLayout;
import java.awt.event.InputEvent;

import javax.swing.JFileChooser ;
import javax.swing.JOptionPane ;
import javax.swing.JTable ;
import javax.swing.table.TableRowSorter ;
import javax.swing.table.TableModel ;
import javax.swing.tree.DefaultMutableTreeNode ;
import javax.swing.tree.DefaultTreeModel ;
import javax.swing.ListSelectionModel ;
import javax.swing.event.ListSelectionListener ;
import javax.swing.event.ListSelectionEvent ;
import javax.swing.event.TreeSelectionListener ;
import javax.swing.event.TreeSelectionEvent ;
import javax.swing.JFrame ;
import javax.swing.event.DocumentEvent ;
import javax.swing.event.DocumentListener ;

import java.io.File ;
import java.io.FileNotFoundException ;
import java.io.IOException ;

import java.util.ArrayList ;
import java.util.Iterator ;
import java.util.Date ;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.pff.PSTFile ;
import com.pff.PSTFolder ;
import com.pff.PSTMessage ;
import com.pff.PSTContact ;
import com.pff.PSTTask ;
import com.pff.PSTActivity ;
import com.pff.PSTRss ;
import com.pff.PSTMessageStore ;
import com.pff.PSTException;
import com.pff.PSTObject ;

import chrriis.dj.nativeswing.swtimpl.components.JWebBrowser;
import com.toedter.calendar.JDateChooser;
import edu.coeia.gutil.JTableUtil;
import edu.coeia.util.ApplicationLogging;

/*
 * EmailPanel.java
 *
 * @author wajdyessam
 * 
 * Created on Aug 10, 2011, 4:17:30 PM
 * 
 */

public class EmailPanel extends javax.swing.JPanel {

    private final static Logger logger = ApplicationLogging.getLogger();
    
    private Case index;
    private PSTFile pstFile ;
     
    private JWebBrowser webBrowser = new JWebBrowser();    
    private EmailTableModel emailTableModel;
    private DefaultMutableTreeNode top ;
    
    private JFileChooser fileChooser ;
    
    private JFrame parentFrame ;
    
    /** Creates new form EmailPanel */
    public EmailPanel(Case aIndex, JFrame parentFrame) {
        initComponents();
        
        this.index = aIndex;
        this.parentFrame = parentFrame;
        
        // configure file chooser to select files (txt)
        fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setFileFilter(new GUIFileFilter("Text Files (*.txt)", "txt"));
        
        // add a native web browser
        webBrowser.setBarsVisible(false);
        webBrowser.setStatusBarVisible(false);
        HTMLRenderPanel.add(webBrowser, BorderLayout.CENTER);
        
        emailSearchTextField.getDocument().addDocumentListener(new EmailSearchInputListener());        
        
        // jcalendar initilizing
        toDatePanel.add(new JDateChooser(new Date()),BorderLayout.CENTER);
        fromDatePanel.add(new JDateChooser(new Date(0)),BorderLayout.CENTER);        
        
        // set outlook data to outlook combobox
//        for (String pstPath: index.getPstPath())
//            outlookComboBox.addItem( pstPath );      
        
        disableNotIndexedComponent();
        JTableUtil.setTableAlignmentValue(inboxTable, 2);
        JTableUtil.setTableAlignmentValue(sentItemTable, 2);
        JTableUtil.setTableAlignmentValue(espTable, 1);
        JTableUtil.setTableAlignmentValue(locationTable, 1);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        emailTabbedPane = new javax.swing.JTabbedPane();
        outlookPanel = new javax.swing.JPanel();
        messagePanel = new javax.swing.JPanel();
        messageSearchPanel = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        emailSearchButton = new javax.swing.JButton();
        emailSearchTextField = new javax.swing.JTextField();
        messageTablePanel = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        emailTable = new javax.swing.JTable();
        renderPanel = new javax.swing.JPanel();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        HTMLRenderPanel = new javax.swing.JPanel();
        TXTRenderPanel = new javax.swing.JPanel();
        jScrollPane17 = new javax.swing.JScrollPane();
        textEditorPane = new javax.swing.JEditorPane();
        messageHeaderPanel = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        headerEditorPane = new javax.swing.JEditorPane();
        loadPstPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        outlookComboBox = new javax.swing.JComboBox();
        loadPstButton = new javax.swing.JButton();
        mailBoxTreePanel = new javax.swing.JPanel();
        clusteringTabbedPane = new javax.swing.JTabbedPane();
        jPanel26 = new javax.swing.JPanel();
        treeScrollPane = new javax.swing.JScrollPane();
        folderTree = new javax.swing.JTree(){
            public String convertValueToText(Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) {
                DefaultMutableTreeNode nodeValue = (DefaultMutableTreeNode)value;
                if (nodeValue.getUserObject() instanceof PSTFolder) {
                    PSTFolder folderValue = (PSTFolder)nodeValue.getUserObject();

                    return folderValue.getDescriptorNode().descriptorIdentifier+" - "+folderValue.getDisplayName()+" "+folderValue.getAssociateContentCount()+"";
                } else if (nodeValue.getUserObject() instanceof PSTMessageStore) {
                    PSTMessageStore folderValue = (PSTMessageStore)nodeValue.getUserObject();
                    return folderValue.getDisplayName();
                } else {
                    return value.toString();
                }
            }
        };
        outlookCorrelationsPanel = new javax.swing.JPanel();
        selectPstFactorPanel = new javax.swing.JPanel();
        selectPanel = new javax.swing.JPanel();
        dateSelectionPanel = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        fromDatePanel = new javax.swing.JPanel();
        toDatePanel = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        factorSelectionPanel = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        correlationComboBox = new javax.swing.JComboBox();
        visualizationButtonPanel = new javax.swing.JPanel();
        emailVisualizationButton = new javax.swing.JButton();
        correlationResultPanel = new javax.swing.JPanel();
        inboxPanel = new javax.swing.JPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        inboxTable = new javax.swing.JTable();
        sentItemPanel = new javax.swing.JPanel();
        jScrollPane14 = new javax.swing.JScrollPane();
        sentItemTable = new javax.swing.JTable();
        espPanel = new javax.swing.JPanel();
        jScrollPane15 = new javax.swing.JScrollPane();
        espTable = new javax.swing.JTable();
        locationPanel = new javax.swing.JPanel();
        jScrollPane16 = new javax.swing.JScrollPane();
        locationTable = new javax.swing.JTable();
        messageFrequencyPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        outlookPanel.setLayout(new java.awt.BorderLayout());

        messagePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        messagePanel.setLayout(new java.awt.BorderLayout());

        messageSearchPanel.setLayout(new java.awt.BorderLayout());

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel19.setForeground(new java.awt.Color(0, 70, 213));
        jLabel19.setText("Search String:");
        messageSearchPanel.add(jLabel19, java.awt.BorderLayout.WEST);

        emailSearchButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        emailSearchButton.setText("Search in Content");
        emailSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailSearchButtonActionPerformed(evt);
            }
        });
        messageSearchPanel.add(emailSearchButton, java.awt.BorderLayout.EAST);

        emailSearchTextField.setText(" ");
        messageSearchPanel.add(emailSearchTextField, java.awt.BorderLayout.CENTER);

        messagePanel.add(messageSearchPanel, java.awt.BorderLayout.SOUTH);

        emailTable.setAutoCreateRowSorter(true);
        emailTable.setFillsViewportHeight(true);
        jScrollPane9.setViewportView(emailTable);

        javax.swing.GroupLayout messageTablePanelLayout = new javax.swing.GroupLayout(messageTablePanel);
        messageTablePanel.setLayout(messageTablePanelLayout);
        messageTablePanelLayout.setHorizontalGroup(
            messageTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(messageTablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)
                .addContainerGap())
        );
        messageTablePanelLayout.setVerticalGroup(
            messageTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(messageTablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                .addContainerGap())
        );

        messagePanel.add(messageTablePanel, java.awt.BorderLayout.CENTER);

        outlookPanel.add(messagePanel, java.awt.BorderLayout.CENTER);

        renderPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        HTMLRenderPanel.setLayout(new java.awt.BorderLayout());
        jTabbedPane3.addTab("Message Text", HTMLRenderPanel);

        jScrollPane17.setViewportView(textEditorPane);

        javax.swing.GroupLayout TXTRenderPanelLayout = new javax.swing.GroupLayout(TXTRenderPanel);
        TXTRenderPanel.setLayout(TXTRenderPanelLayout);
        TXTRenderPanelLayout.setHorizontalGroup(
            TXTRenderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TXTRenderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane17, javax.swing.GroupLayout.DEFAULT_SIZE, 613, Short.MAX_VALUE)
                .addContainerGap())
        );
        TXTRenderPanelLayout.setVerticalGroup(
            TXTRenderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TXTRenderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane17, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane3.addTab("HTML Code", TXTRenderPanel);

        jScrollPane8.setViewportView(headerEditorPane);

        javax.swing.GroupLayout messageHeaderPanelLayout = new javax.swing.GroupLayout(messageHeaderPanel);
        messageHeaderPanel.setLayout(messageHeaderPanelLayout);
        messageHeaderPanelLayout.setHorizontalGroup(
            messageHeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(messageHeaderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 613, Short.MAX_VALUE)
                .addContainerGap())
        );
        messageHeaderPanelLayout.setVerticalGroup(
            messageHeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(messageHeaderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane3.addTab("Message Header", messageHeaderPanel);

        javax.swing.GroupLayout renderPanelLayout = new javax.swing.GroupLayout(renderPanel);
        renderPanel.setLayout(renderPanelLayout);
        renderPanelLayout.setHorizontalGroup(
            renderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, renderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 638, Short.MAX_VALUE))
        );
        renderPanelLayout.setVerticalGroup(
            renderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        outlookPanel.add(renderPanel, java.awt.BorderLayout.SOUTH);

        loadPstPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        loadPstPanel.setLayout(new java.awt.BorderLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel1.setForeground(new java.awt.Color(0, 70, 213));
        jLabel1.setText("Select Outlook File From Index:");
        loadPstPanel.add(jLabel1, java.awt.BorderLayout.WEST);
        loadPstPanel.add(outlookComboBox, java.awt.BorderLayout.CENTER);

        loadPstButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        loadPstButton.setText("Load Outlook File");
        loadPstButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadPstButtonActionPerformed(evt);
            }
        });
        loadPstPanel.add(loadPstButton, java.awt.BorderLayout.EAST);

        outlookPanel.add(loadPstPanel, java.awt.BorderLayout.NORTH);

        folderTree.setModel(null);
        folderTree.setShowsRootHandles(true);
        treeScrollPane.setViewportView(folderTree);

        javax.swing.GroupLayout jPanel26Layout = new javax.swing.GroupLayout(jPanel26);
        jPanel26.setLayout(jPanel26Layout);
        jPanel26Layout.setHorizontalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(treeScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)
        );
        jPanel26Layout.setVerticalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(treeScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
        );

        clusteringTabbedPane.addTab("Mail Box", jPanel26);

        javax.swing.GroupLayout mailBoxTreePanelLayout = new javax.swing.GroupLayout(mailBoxTreePanel);
        mailBoxTreePanel.setLayout(mailBoxTreePanelLayout);
        mailBoxTreePanelLayout.setHorizontalGroup(
            mailBoxTreePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mailBoxTreePanelLayout.createSequentialGroup()
                .addComponent(clusteringTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mailBoxTreePanelLayout.setVerticalGroup(
            mailBoxTreePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mailBoxTreePanelLayout.createSequentialGroup()
                .addComponent(clusteringTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                .addContainerGap())
        );

        outlookPanel.add(mailBoxTreePanel, java.awt.BorderLayout.WEST);

        emailTabbedPane.addTab("Microsoft Outlook Viewing", outlookPanel);

        outlookCorrelationsPanel.setLayout(new java.awt.BorderLayout());

        selectPstFactorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Information Need", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        selectPstFactorPanel.setLayout(new java.awt.BorderLayout());

        selectPanel.setLayout(new java.awt.BorderLayout());

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel21.setForeground(new java.awt.Color(0, 70, 213));
        jLabel21.setText("From Date:");

        fromDatePanel.setLayout(new java.awt.BorderLayout());

        toDatePanel.setLayout(new java.awt.BorderLayout());

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel22.setForeground(new java.awt.Color(0, 70, 213));
        jLabel22.setText("To Date:");

        javax.swing.GroupLayout dateSelectionPanelLayout = new javax.swing.GroupLayout(dateSelectionPanel);
        dateSelectionPanel.setLayout(dateSelectionPanelLayout);
        dateSelectionPanelLayout.setHorizontalGroup(
            dateSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dateSelectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fromDatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(toDatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(276, 276, 276))
        );
        dateSelectionPanelLayout.setVerticalGroup(
            dateSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dateSelectionPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(dateSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fromDatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(toDatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        selectPanel.add(dateSelectionPanel, java.awt.BorderLayout.SOUTH);

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel20.setForeground(new java.awt.Color(0, 70, 213));
        jLabel20.setText("Statistics For:");

        correlationComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Emails per senders", "Emails per reciever", "Emails per senders/reciever domains", "Emails per users locations", "Frequency of Messages" }));
        correlationComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                correlationComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout factorSelectionPanelLayout = new javax.swing.GroupLayout(factorSelectionPanel);
        factorSelectionPanel.setLayout(factorSelectionPanelLayout);
        factorSelectionPanelLayout.setHorizontalGroup(
            factorSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(factorSelectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel20)
                .addGap(18, 18, 18)
                .addComponent(correlationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(336, Short.MAX_VALUE))
        );
        factorSelectionPanelLayout.setVerticalGroup(
            factorSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(factorSelectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(factorSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(correlationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        selectPanel.add(factorSelectionPanel, java.awt.BorderLayout.NORTH);

        selectPstFactorPanel.add(selectPanel, java.awt.BorderLayout.NORTH);

        emailVisualizationButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        emailVisualizationButton.setText(" Visualization of the Result");
        emailVisualizationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailVisualizationButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout visualizationButtonPanelLayout = new javax.swing.GroupLayout(visualizationButtonPanel);
        visualizationButtonPanel.setLayout(visualizationButtonPanelLayout);
        visualizationButtonPanelLayout.setHorizontalGroup(
            visualizationButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(visualizationButtonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(emailVisualizationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(449, Short.MAX_VALUE))
        );
        visualizationButtonPanelLayout.setVerticalGroup(
            visualizationButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, visualizationButtonPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(emailVisualizationButton)
                .addContainerGap())
        );

        selectPstFactorPanel.add(visualizationButtonPanel, java.awt.BorderLayout.SOUTH);

        outlookCorrelationsPanel.add(selectPstFactorPanel, java.awt.BorderLayout.NORTH);

        correlationResultPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Statistics Result", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        correlationResultPanel.setLayout(new java.awt.CardLayout());

        inboxTable.setAutoCreateRowSorter(true);
        inboxTable.setFont(new java.awt.Font("Tahoma", 1, 11));
        inboxTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Sender Name","Receiver Name","Number of Message","Date"
            }
        ) {
            public Class<?> getColumnClass( int index) {
                switch (index) {
                    case 0:
                    case 1:
                    case 3:
                    return Object.class;

                    case 2:
                    return Integer.class;
                }

                return Object.class;
            }
        });
        inboxTable.setRowSorter(new TableRowSorter<TableModel>(inboxTable.getModel()));
        inboxTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                inboxTableMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                inboxTableMouseReleased(evt);
            }
        });
        jScrollPane13.setViewportView(inboxTable);

        javax.swing.GroupLayout inboxPanelLayout = new javax.swing.GroupLayout(inboxPanel);
        inboxPanel.setLayout(inboxPanelLayout);
        inboxPanelLayout.setHorizontalGroup(
            inboxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane13, javax.swing.GroupLayout.DEFAULT_SIZE, 648, Short.MAX_VALUE)
        );
        inboxPanelLayout.setVerticalGroup(
            inboxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane13, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
        );

        correlationResultPanel.add(inboxPanel, "inboxCard");

        sentItemTable.setAutoCreateRowSorter(true);
        sentItemTable.setFont(new java.awt.Font("Tahoma", 1, 11));
        sentItemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Sender Name","Receiver Name","Number of Message","Date"
            }
        ){
            public Class<?> getColumnClass( int index) {
                switch (index) {
                    case 0:
                    case 1:
                    case 3:
                    return Object.class;

                    case 2:
                    return Integer.class;
                }

                return Object.class;
            }
        });
        sentItemTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                sentItemTableMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sentItemTableMouseReleased(evt);
            }
        });
        jScrollPane14.setViewportView(sentItemTable);

        javax.swing.GroupLayout sentItemPanelLayout = new javax.swing.GroupLayout(sentItemPanel);
        sentItemPanel.setLayout(sentItemPanelLayout);
        sentItemPanelLayout.setHorizontalGroup(
            sentItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane14, javax.swing.GroupLayout.DEFAULT_SIZE, 648, Short.MAX_VALUE)
        );
        sentItemPanelLayout.setVerticalGroup(
            sentItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane14, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
        );

        correlationResultPanel.add(sentItemPanel, "sentItemCard");

        espTable.setAutoCreateRowSorter(true);
        espTable.setFont(new java.awt.Font("Tahoma", 1, 11));
        espTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Email Provider Name","Number of Message From It"
            }
        ){
            public Class<?> getColumnClass( int index) {
                switch (index) {
                    case 0:
                    return Object.class;

                    case 1:
                    return Integer.class;
                }

                return Object.class;
            }
        });
        espTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                espTableMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                espTableMouseReleased(evt);
            }
        });
        jScrollPane15.setViewportView(espTable);

        javax.swing.GroupLayout espPanelLayout = new javax.swing.GroupLayout(espPanel);
        espPanel.setLayout(espPanelLayout);
        espPanelLayout.setHorizontalGroup(
            espPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane15, javax.swing.GroupLayout.DEFAULT_SIZE, 648, Short.MAX_VALUE)
        );
        espPanelLayout.setVerticalGroup(
            espPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane15, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
        );

        correlationResultPanel.add(espPanel, "espCard");

        locationTable.setAutoCreateRowSorter(true);
        locationTable.setFont(new java.awt.Font("Tahoma", 1, 11));
        locationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Location","Number of Messages"
            }
        ){
            public Class<?> getColumnClass( int index) {
                switch (index) {
                    case 0:
                    return Object.class;

                    case 1:
                    return Integer.class;
                }

                return Object.class;
            }
        });
        locationTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                locationTableMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                locationTableMouseReleased(evt);
            }
        });
        jScrollPane16.setViewportView(locationTable);

        javax.swing.GroupLayout locationPanelLayout = new javax.swing.GroupLayout(locationPanel);
        locationPanel.setLayout(locationPanelLayout);
        locationPanelLayout.setHorizontalGroup(
            locationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane16, javax.swing.GroupLayout.DEFAULT_SIZE, 648, Short.MAX_VALUE)
        );
        locationPanelLayout.setVerticalGroup(
            locationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane16, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
        );

        correlationResultPanel.add(locationPanel, "locationCard");

        javax.swing.GroupLayout messageFrequencyPanelLayout = new javax.swing.GroupLayout(messageFrequencyPanel);
        messageFrequencyPanel.setLayout(messageFrequencyPanelLayout);
        messageFrequencyPanelLayout.setHorizontalGroup(
            messageFrequencyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 648, Short.MAX_VALUE)
        );
        messageFrequencyPanelLayout.setVerticalGroup(
            messageFrequencyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 240, Short.MAX_VALUE)
        );

        correlationResultPanel.add(messageFrequencyPanel, "messageFrequencyCard");

        outlookCorrelationsPanel.add(correlationResultPanel, java.awt.BorderLayout.CENTER);

        emailTabbedPane.addTab("Microsoft Outlook Statistics", outlookCorrelationsPanel);

        add(emailTabbedPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

private void emailSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailSearchButtonActionPerformed

//        if ( CaseHistoryHandler.get(this.index.getCaseName()).getIsCaseIndexed() == false ) {
//            JOptionPane.showMessageDialog(this, "please do the indexing operation first before do any operation",
//                "Case is not indexed",JOptionPane.ERROR_MESSAGE );
//            return ;
//        }

        if ( emailSearchTextField.getText().trim().isEmpty() ) {
            JOptionPane.showMessageDialog(this, "please write the keyword you want to search",
                "missing search key",JOptionPane.ERROR_MESSAGE );
            return ;
        }

        ArrayList<String> aList = searchEmail();

        if ( aList != null) {
            JTableUtil.filterTable(emailTable,aList);
        }
}//GEN-LAST:event_emailSearchButtonActionPerformed

private void loadPstButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadPstButtonActionPerformed
        try {
            this.invalidate();
            
            if ( outlookComboBox.getSelectedIndex() < 0 ) {
                logger.log(Level.INFO, "Please Select An OST File");
                return ;
            }

            String path = (String) outlookComboBox.getSelectedItem();
            pstFile = new PSTFile(path);

            setOutlookHandling(pstFile, path);
            setOutlookEvent();
            
            emailTable.setModel(emailTableModel);
            DefaultTreeModel model = new DefaultTreeModel(top);
            folderTree.setModel(model);

            // time consuming statemnt
            InfiniteProgressPanel i = new InfiniteProgressPanel("Loading MailBox");
            parentFrame.setGlassPane(i);
            i.start();

            logger.log(Level.INFO, "Starting EmailReaderThread Now!");

            // run in thread and show progressbar
            EmailReaderThread erThread = new EmailReaderThread(path,pstFile,i);
            erThread.execute();
            
        } catch (FileNotFoundException  e){
            e.printStackTrace();
            logger.log(Level.SEVERE, "Uncaught exception", e);
        } catch (PSTException e){
            e.printStackTrace();
            logger.log(Level.SEVERE, "Uncaught exception", e);
        } catch (IOException e){
            e.printStackTrace();
            logger.log(Level.SEVERE, "Uncaught exception", e);
        }
}//GEN-LAST:event_loadPstButtonActionPerformed

private void correlationComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_correlationComboBoxActionPerformed
        if ( correlationComboBox.getSelectedIndex() == 0 )
            GuiUtil.showPanel("inboxCard", correlationResultPanel);
        else if ( correlationComboBox.getSelectedIndex() == 1 )
            GuiUtil.showPanel("sentItemCard",correlationResultPanel);
        else if ( correlationComboBox.getSelectedIndex() == 2 )
            GuiUtil.showPanel("espCard",correlationResultPanel);
        else if ( correlationComboBox.getSelectedIndex() == 3)
            GuiUtil.showPanel("relationCard", correlationResultPanel);
        else if ( correlationComboBox.getSelectedIndex() == 4 )
            GuiUtil.showPanel("locationCard", correlationResultPanel);
        else if ( correlationComboBox.getSelectedIndex() == 5)
            GuiUtil.showPanel("messageFrequencyCard", correlationResultPanel);
}//GEN-LAST:event_correlationComboBoxActionPerformed

private void emailVisualizationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailVisualizationButtonActionPerformed
        // from date to date
        String from = DateUtil.formatDate( ((JDateChooser) fromDatePanel.getComponent(0)).getDate() );
        String to   = DateUtil.formatDate( ((JDateChooser) toDatePanel.getComponent(0)).getDate() );

        if ( outlookComboBox.getSelectedIndex() < 0 )
            return ;

        String path = (String) outlookComboBox.getSelectedItem() ;

        try {
            pstFile = new PSTFile(path);

            logger.log(Level.INFO, "Starting EmailVisualizationThread Now!");

            int selectedIndex = correlationComboBox.getSelectedIndex();

            switch ( selectedIndex ) {
                case 0 :
                    showVisualization(from, to, pstFile, path, "Inbox Visualization...", "Inbox", EmailVisualizationThread.FolderType.INBOX);
                    break;

                case 1 :
                    showVisualization(from, to, pstFile, path, "Sent Items Visualization...", "Sent Items", EmailVisualizationThread.FolderType.SENT);
                    break;

                case 2 :
                    showVisualization(from, to, pstFile, path, "Email Service Provider Visualization...", "ESP", EmailVisualizationThread.FolderType.ESP);
                    break;

                case 3 :
                    showVisualization(from, to, pstFile, path, "Location Visualization...", "Location", EmailVisualizationThread.FolderType.LOCATION);
                    break;

                case 4 :
                    showVisualization(from, to, pstFile, path, "Messages Communication Visualization...", "Frequency", EmailVisualizationThread.FolderType.FREQUENCY);
                    break;
            }
        } catch (FileNotFoundException e){
            e.printStackTrace();
            logger.log(Level.SEVERE, "Uncaught exception", e);
        } catch (PSTException e){
            e.printStackTrace();
            logger.log(Level.SEVERE, "Uncaught exception", e);
        } catch (IOException e){
            e.printStackTrace();
            logger.log(Level.SEVERE, "Uncaught exception", e);
        }
}//GEN-LAST:event_emailVisualizationButtonActionPerformed

private void inboxTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inboxTableMousePressed
        if ( (evt.getModifiersEx() & InputEvent.BUTTON3_DOWN_MASK ) != 0 ) {
            if ( inboxTable.isEnabled() )
                GuiUtil.showPopup(evt);
        }
}//GEN-LAST:event_inboxTableMousePressed

private void inboxTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inboxTableMouseReleased
        if ( (evt.getModifiersEx() & InputEvent.BUTTON3_DOWN_MASK ) != 0 ) {
            if ( inboxTable.isEnabled() )
                GuiUtil.showPopup(evt);
        }
}//GEN-LAST:event_inboxTableMouseReleased

private void sentItemTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sentItemTableMousePressed
        if ( (evt.getModifiersEx() & InputEvent.BUTTON3_DOWN_MASK ) != 0 ) {
            if ( sentItemTable.isEnabled() )
                GuiUtil.showPopup(evt);
        }
}//GEN-LAST:event_sentItemTableMousePressed

private void sentItemTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sentItemTableMouseReleased
        if ( (evt.getModifiersEx() & InputEvent.BUTTON3_DOWN_MASK ) != 0 ) {
            if ( sentItemTable.isEnabled() )
                GuiUtil.showPopup(evt);
        }
}//GEN-LAST:event_sentItemTableMouseReleased

private void espTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_espTableMousePressed
        if ( (evt.getModifiersEx() & InputEvent.BUTTON3_DOWN_MASK ) != 0 ) {
            if ( espTable.isEnabled() )
                GuiUtil.showPopup(evt);
        }
}//GEN-LAST:event_espTableMousePressed

private void espTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_espTableMouseReleased
        if ( (evt.getModifiersEx() & InputEvent.BUTTON3_DOWN_MASK ) != 0 ) {
            if ( espTable.isEnabled() )
                GuiUtil.showPopup(evt);
        }
}//GEN-LAST:event_espTableMouseReleased

private void locationTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_locationTableMousePressed
        if ( (evt.getModifiersEx() & InputEvent.BUTTON3_DOWN_MASK ) != 0 ) {
            if ( locationTable.isEnabled() )
                GuiUtil.showPopup(evt);
        }
}//GEN-LAST:event_locationTableMousePressed

private void locationTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_locationTableMouseReleased
        if ( (evt.getModifiersEx() & InputEvent.BUTTON3_DOWN_MASK ) != 0 ) {
            if ( locationTable.isEnabled() )
                GuiUtil.showPopup(evt);
        }
}//GEN-LAST:event_locationTableMouseReleased


    private ArrayList<String> searchEmail () {
        ArrayList<String> aList = new ArrayList<String>();
        
        try {
            File indexLocation = new File (index.getCaseLocation() + "\\" + ApplicationConstants.CASE_INDEX_FOLDER);
            PSTSearcher pSearcher = new PSTSearcher(indexLocation);
            int len = pSearcher.search(emailSearchTextField.getText().trim(), PSTSearcher.SearchField.CONTENT);
            System.out.println("length of search = " + len);
           
//            for (String path: index.getPstPath()) {
//                if ( path.equals(outlookComboBox.getSelectedItem())) {
//                    for (int i=0 ; i<len ; i++){
//                        Document doc = pSearcher.getDocHits(i);
//                        int id =  Integer.parseInt(doc.get("mailid")) ;
//                        String location =  doc.get("location") ;
//                        PSTMessage msg = null;
//
//                        try {
//                            msg = getMessage(id);
//                        }
//                        catch (PSTException e) {
//                            
//                        }
//
//                        if ( msg != null ) {
//                            aList.add(String.valueOf(msg.getDescriptorNode().descriptorIdentifier));
//                        }
//                        else {
//                            System.out.println("msg == null (3701) ");
//                        }
//                    }
//
//                    pSearcher.closeSearcher();
//                    return aList ;
//                }
//            }
        }
        catch (Exception e){
            //e.printStackTrace();
            logger.log(Level.SEVERE, "Uncaught exception", e);

        }

        if ( ! aList.isEmpty())
             return aList ;
        
        return null ;
    }
    
    private PSTMessage getMessage (long id)throws IOException, PSTException {
        return (PSTMessage) PSTObject.detectAndLoadPSTObject(pstFile, id);
    }
    
    private void showVisualization (String from, String to, PSTFile pst, String path, String title, String folderName,EmailVisualizationThread.FolderType type) {
        InfiniteProgressPanel i = new InfiniteProgressPanel(title);
        parentFrame.setGlassPane(i);
        i.start();

        EmailVisualizationThread thread = new EmailVisualizationThread(null, i, folderName , pst, path, from, to, type);
        thread.execute();
    }
    
    public void filterEmailSearch () {
        String text = emailSearchTextField.getText().trim();
        JTableUtil.filterTable(emailTable, text);
    }
     
    private class EmailSearchInputListener implements DocumentListener {
        public void changedUpdate(DocumentEvent e){filterEmailSearch();}
        public void removeUpdate (DocumentEvent e){filterEmailSearch();}
        public void insertUpdate (DocumentEvent e){filterEmailSearch();}
    }

    
        public void setOutlookHandling (PSTFile pstFile, String path) {
         // attempt to open the pst file and initlizing tree
	try { 
            top = new DefaultMutableTreeNode(pstFile.getMessageStore());
            buildTree(top, pstFile.getRootFolder());
            
            emailTableModel = new EmailTableModel(pstFile, path);

	} catch (Exception err) {
            err.printStackTrace();
            return ;
	}
    }

    public void setOutlookEvent () {
        emailTable.setFillsViewportHeight(true);
        ListSelectionModel selectionModel = emailTable.getSelectionModel();
        selectionModel.addListSelectionListener(new ListSelectionListener(){
            public void valueChanged(ListSelectionEvent e) {
                try {
                    JTable source = emailTable;
                    int viewRow = source.getSelectedRow();
                    if (viewRow == -1) {
                        return;
                    }
                    
                    int row = emailTable.convertRowIndexToModel(viewRow);
                    MessageHeader msg = emailTableModel.getMessageAtRow(row);
                    PSTMessage selectedMessage = getMessage(msg.getID());
                    
                    if (selectedMessage instanceof PSTContact) {
                        PSTContact contact = (PSTContact) selectedMessage;
                        textEditorPane.setText(contact.toString());
                    } else if (selectedMessage instanceof PSTTask) {
                        PSTTask task = (PSTTask) selectedMessage;
                        textEditorPane.setText(task.toString());
                    } else if (selectedMessage instanceof PSTActivity) {
                        PSTActivity journalEntry = (PSTActivity) selectedMessage;
                        textEditorPane.setText(journalEntry.toString());
                    } else if (selectedMessage instanceof PSTRss) {
                        PSTRss rss = (PSTRss) selectedMessage;
                        textEditorPane.setText(rss.toString());
                    } else if (selectedMessage != null) {
                        webBrowser.setHTMLContent(selectedMessage.getBodyHTML());
                        HTMLRenderPanel.validate();
                        textEditorPane.setText(selectedMessage.getBodyHTML());
                        headerEditorPane.setText(selectedMessage.getTransportMessageHeaders());
                    }
                    textEditorPane.setCaretPosition(0);
                    headerEditorPane.setCaretPosition(0);
                } catch (IOException ex) {
                    ex.printStackTrace();
                } catch (PSTException ex) {
                    ex.printStackTrace();
                }
            }
        });
        
        // tree event handler for changing...
        folderTree.addTreeSelectionListener(new TreeSelectionListener() {
            public void valueChanged(TreeSelectionEvent e) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) folderTree.getLastSelectedPathComponent();
        	if (node != null) {
                    selectFolder(node.getUserObject().toString());
        	}
            }
        });
    }

    private void buildTree(DefaultMutableTreeNode top, PSTFolder theFolder) {
        // this is recursive, try and keep up.
	try {
            Vector children = theFolder.getSubFolders();
            Iterator childrenIterator = children.iterator();
            while (childrenIterator.hasNext()) {
                PSTFolder folder = (PSTFolder)childrenIterator.next();
		DefaultMutableTreeNode node = new DefaultMutableTreeNode(folder.getDisplayName());

		if (folder.getSubFolders().size() > 0) {
                    buildTree(node, folder);
		}

                top.add(node);
            }
        } catch (Exception err) {
            System.exit(1);
	}
    }

    void selectFolder(String folder) {
        // load up the non-folder children.
        emailTableModel.setFolder(folder);
        
        // Pack the all columns of the table
        int margin = 1;
        JTableUtil.packColumns(emailTable, margin);
    }
    
    private void disableNotIndexedComponent () {
        // close email if there is no pst file
//        if ( index.getPstPath().isEmpty() ) {
//           // emailPanel.setEnabled(false);
//            loadPstButton.setEnabled(false);
//            //clusteringButton.setEnabled(false);
//            emailSearchButton.setEnabled(false);
//            outlookComboBox.setEnabled(false);
//            emailSearchButton.setEnabled(false);
//            emailVisualizationButton.setEnabled(false);
//            inboxTable.setEnabled(false);
//            sentItemTable.setEnabled(false);
//            espTable.setEnabled(false);
//            locationTable.setEnabled(false);
//            correlationComboBox.setEnabled(false);
//            fromDatePanel.getComponent(0).setEnabled(false);
//            toDatePanel.getComponent(0).setEnabled(false);
//        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel HTMLRenderPanel;
    private javax.swing.JPanel TXTRenderPanel;
    private javax.swing.JTabbedPane clusteringTabbedPane;
    private javax.swing.JComboBox correlationComboBox;
    private javax.swing.JPanel correlationResultPanel;
    private javax.swing.JPanel dateSelectionPanel;
    private javax.swing.JButton emailSearchButton;
    private javax.swing.JTextField emailSearchTextField;
    private javax.swing.JTabbedPane emailTabbedPane;
    private javax.swing.JTable emailTable;
    private javax.swing.JButton emailVisualizationButton;
    private javax.swing.JPanel espPanel;
    private javax.swing.JTable espTable;
    private javax.swing.JPanel factorSelectionPanel;
    private javax.swing.JTree folderTree;
    private javax.swing.JPanel fromDatePanel;
    private javax.swing.JEditorPane headerEditorPane;
    private javax.swing.JPanel inboxPanel;
    private javax.swing.JTable inboxTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JButton loadPstButton;
    private javax.swing.JPanel loadPstPanel;
    private javax.swing.JPanel locationPanel;
    private javax.swing.JTable locationTable;
    private javax.swing.JPanel mailBoxTreePanel;
    private javax.swing.JPanel messageFrequencyPanel;
    private javax.swing.JPanel messageHeaderPanel;
    private javax.swing.JPanel messagePanel;
    private javax.swing.JPanel messageSearchPanel;
    private javax.swing.JPanel messageTablePanel;
    private javax.swing.JComboBox outlookComboBox;
    private javax.swing.JPanel outlookCorrelationsPanel;
    private javax.swing.JPanel outlookPanel;
    private javax.swing.JPanel renderPanel;
    private javax.swing.JPanel selectPanel;
    private javax.swing.JPanel selectPstFactorPanel;
    private javax.swing.JPanel sentItemPanel;
    private javax.swing.JTable sentItemTable;
    private javax.swing.JEditorPane textEditorPane;
    private javax.swing.JPanel toDatePanel;
    private javax.swing.JScrollPane treeScrollPane;
    private javax.swing.JPanel visualizationButtonPanel;
    // End of variables declaration//GEN-END:variables
}
