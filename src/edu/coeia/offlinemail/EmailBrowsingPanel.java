/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * OfflineEmailBrowsingPanel.java
 *
 * Created on Jan 9, 2012, 11:44:37 AM
 */
package edu.coeia.offlinemail;

import edu.coeia.cases.Case;
import edu.coeia.cases.EmailConfiguration;
import edu.coeia.gutil.JListUtil;
import edu.coeia.gutil.JTableUtil;
import edu.coeia.indexing.IndexingConstant;
import edu.coeia.items.EmailItem;
import edu.coeia.main.CaseFrame;
import edu.coeia.util.DateUtil;
import edu.coeia.util.FilesPath;

import edu.coeia.viewer.SearchViewer;
import edu.coeia.viewer.SourceViewerDialog;
import java.io.File;
import java.io.IOException;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.FSDirectory;

/**
 *
 * @author wajdyessam
 */
public class EmailBrowsingPanel extends javax.swing.JPanel {

    private Case aCase;
    private DefaultListModel emailSourcrListModel;
    private final List<Integer> documentIds = new ArrayList<Integer>();
    private JFrame parentFrame ;
    
    /** Creates new form OfflineEmailBrowsingPanel */
    public EmailBrowsingPanel(final Case aCase, final CaseFrame frame) {
        initComponents();
        this.emailSourcrListModel = new DefaultListModel();
        this.aCase = aCase;
        this.parentFrame = (JFrame) frame;
        
        // fill email source
        try {
            for(String path: this.getOfflineEmailsPaths()) {
                JListUtil.addToList(path, emailSourcrListModel, emailSourceJList);
            }
            
            for(EmailConfiguration config: this.aCase.getEmailConfig()) {
                JListUtil.addToList(config.getUserName(), emailSourcrListModel, emailSourceJList);
            }
        } catch (IOException ex) {
            Logger.getLogger(EmailBrowsingPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        /**
         * Filter email table by keyword written into filter text field
         */
        this.filterEmailsTextField.getDocument().addDocumentListener(
            new DocumentListener() {
                @Override
                public void changedUpdate(DocumentEvent event) { filterTable(); }

                @Override
                public void removeUpdate(DocumentEvent event) { filterTable(); }

                @Override
                public void insertUpdate(DocumentEvent event) { filterTable(); }
                
                private void filterTable() {
                     JTableUtil.filterTable(emailsTable, filterEmailsTextField.getText().trim());
                }
            }
        );
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        emailSourceJList = new javax.swing.JList();
        loadEmailSourceButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        emailsTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        filterEmailsTextField = new javax.swing.JTextField();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Email Sources"));

        jScrollPane1.setViewportView(emailSourceJList);

        loadEmailSourceButton.setText("Load Email Source");
        loadEmailSourceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadEmailSourceButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                    .addComponent(loadEmailSourceButton, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(loadEmailSourceButton))
        );

        add(jPanel1, java.awt.BorderLayout.WEST);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Email Content"));

        emailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Folder Name", "From", "To", "Subject", "Date", "Has Attachment"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        emailsTable.setFillsViewportHeight(true);
        emailsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                emailsTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(emailsTable);

        jLabel1.setText("Filter:");

        filterEmailsTextField.setText(" ");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filterEmailsTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filterEmailsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        add(jPanel2, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void loadEmailSourceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadEmailSourceButtonActionPerformed
        JTableUtil.removeAllRows(this.emailsTable);
        this.loadEmail();
    }//GEN-LAST:event_loadEmailSourceButtonActionPerformed

    private void emailsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_emailsTableMouseClicked
        if ( evt.getClickCount() == 2 ) { // Double Click
            // other click event
            int row = this.emailsTable.getSelectedRow();
            if ( row < 0 ) return ; // if not select row

            String fileId = String.valueOf(this.emailsTable.getValueAt(row, 0));
            int currentId = Integer.parseInt(fileId);

            SearchViewer searchViewer = new SearchViewer("",currentId, this.documentIds);
            SourceViewerDialog panel = new SourceViewerDialog(this.parentFrame, true, searchViewer);
            panel.setVisible(true);
        }
    }//GEN-LAST:event_emailsTableMouseClicked

    private void loadEmail() {
        try {
            if ( isOfflineEmailSelected() ) {
                String relativePath = String.valueOf(this.emailSourceJList.getSelectedValue());
                
                List<EmailItem> emails = getAllMessaageInOfflineEmailPath(relativePath);
                System.out.println("number of message: " + emails.size());

                // fill message in table
                for(EmailItem item: emails) {
                    Object[] data = {item.getID(), item.getFolder(), item.getFrom(),
                        item.getTo(), item.getSubject(), item.getTime(), item.hasAttachment()};

                    JTableUtil.addRowToJTable(emailsTable, data);
                }
            }
            else if ( isOnlineEmailSelected() ) {
                String username = String.valueOf(this.emailSourceJList.getSelectedValue());
                List<EmailItem> emails = getAllMessageInOnlineEmailPath(username);
                System.out.println("number of message: " + emails.size());

                // fill message in table
                for(EmailItem item: emails) {
                    Object[] data = {item.getID(), item.getFolder(), item.getFrom(),
                        item.getTo(), item.getSubject(), item.getTime(), item.hasAttachment()};

                    JTableUtil.addRowToJTable(emailsTable, data);
                }
            }
            else {
                System.out.println("nothing selected");
            }
        } 
        catch (IOException ex) {
            ex.printStackTrace();
        }
        catch(ParseException ex) {
            ex.printStackTrace();
        }
    }
    
    private boolean isOfflineEmailSelected() {
        Object selectedValue = this.emailSourceJList.getSelectedValue();
        if ( selectedValue == null )
            return false;
        
        return String.valueOf(emailSourceJList.getSelectedValue()).endsWith(".pst") ||
               String.valueOf(emailSourceJList.getSelectedValue()).endsWith("ost");
        
    }
    
    private boolean isOnlineEmailSelected() {
        Object selectedValue = this.emailSourceJList.getSelectedValue();
        if ( selectedValue == null )
            return false;
        
        String value = String.valueOf(selectedValue);
        return !value.endsWith(".pst") && !value.endsWith("ost");
    }
    
    private List<EmailItem> getAllMessageInOnlineEmailPath(final String username) throws IOException, ParseException {
        List<EmailItem> emails = new ArrayList<EmailItem>();
        List<Integer> ids = new ArrayList<Integer>();
        
        String indexDir = this.aCase.getCaseLocation() + "\\" + FilesPath.INDEX_PATH;
        Directory dir = FSDirectory.open(new File(indexDir));
        IndexReader indexReader = IndexReader.open(dir);
        
        for (int i=0; i<indexReader.maxDoc(); i++) {
            Document document = indexReader.document(i);
            if ( document != null ) {
                Field field = document.getField(IndexingConstant.ONLINE_EMAIL_USER_NAME);
                if ( field != null && field.stringValue() != null) {
                   String tmp = field.stringValue();
                   
                   if ( tmp.equals(username)) {
                         // show file properities
                        String emailDate = document.get(IndexingConstant.ONLINE_EMAIL_RECIEVED_DATE);
                        String emailMessage = document.get(IndexingConstant.ONLINE_EMAIL_BODY);
                        String emailSubject = document.get(IndexingConstant.ONLINE_EMAIL_SUBJECT);

                        String emailTo = document.get(IndexingConstant.ONLINE_EMAIL_TO);
                        String emailFrom = document.get(IndexingConstant.ONLINE_EMAIL_FROM);
                        String emailCC = document.get(IndexingConstant.ONLINE_EMAIL_CC);
                        String emailBCC = document.get(IndexingConstant.ONLINE_EMAIL_BCC);
                        String id = document.get(IndexingConstant.DOCUMENT_ID);
                        //String parentId = document.get(IndexingConstant.DOCUMENT_PARENT_ID);
                        String folderName = document.get(IndexingConstant.ONLINE_EMAIL_FOLDER_NAME);
                        boolean hasAttachment = Boolean.valueOf(document.get(IndexingConstant.ONLINE_EMAIL_ATTACHMENT_PATH));

                        EmailItem item = new EmailItem(Integer.valueOf(id), 
                                Integer.valueOf("0"), emailFrom,
                                emailTo, emailSubject, DateUtil.formatDate(emailDate), folderName, hasAttachment);

                        emails.add(item);
                        ids.add(Integer.valueOf(id));
                   }
                }
            }
        }
        
        this.setResultIds(ids);
        indexReader.close();
        
        return emails;
    }
    
    private List<EmailItem> getAllMessaageInOfflineEmailPath(final String path) throws IOException, ParseException {
        List<EmailItem> emails = new ArrayList<EmailItem>();
        List<Integer> ids = new ArrayList<Integer>();
        
        String indexDir = this.aCase.getCaseLocation() + "\\" + FilesPath.INDEX_PATH;
        Directory dir = FSDirectory.open(new File(indexDir));
        IndexReader indexReader = IndexReader.open(dir);
        
        for (int i=0; i<indexReader.maxDoc(); i++) {
            Document document = indexReader.document(i);
            if ( document != null ) {
                Field field = document.getField(IndexingConstant.OFFLINE_EMAIL_PATH);
                if ( field != null && field.stringValue() != null) {
                   String tmp = field.stringValue();
                   
                   if ( tmp.endsWith(path)) {
                         // show file properities
                        String emailAgent = document.get(IndexingConstant.OFFLINE_EMAIL_FOLDER_NAME);
                        String emailSource = document.get(IndexingConstant.OFFLINE_EMAIL_NAME);
                        String emailDate = document.get(IndexingConstant.OFFLINE_EMAIL_CLIENT_SUBMIT_TIME);
                        String emailMessage = document.get(IndexingConstant.OFFLINE_EMAIL_HTML_CONTENT);
                        if ( emailMessage.trim().isEmpty() ) 
                            emailMessage = document.get(IndexingConstant.OFFLINE_EMAIL_PLAIN_CONTENT);

                        String emailSubject = document.get(IndexingConstant.OFFLINE_EMAIL_SUBJECT);

                        String emailTo = document.get(IndexingConstant.OFFLINE_EMAIL_DISPLAY_TO);
                        String emailFrom = document.get(IndexingConstant.OFFLINE_EMAIL_SENT_REPRESENTING_NAME);
                        String emailCC = document.get(IndexingConstant.OFFLINE_EMAIL_DISPLAY_CC);
                        String emailBCC = document.get(IndexingConstant.OFFLINE_EMAIL_DISPLAY_BCC);
                        String id = document.get(IndexingConstant.DOCUMENT_ID);
                        String parentId = document.get(IndexingConstant.DOCUMENT_PARENT_ID);
                        String folderName = document.get(IndexingConstant.OFFLINE_EMAIL_FOLDER_NAME);
                        boolean hasAttachment = Boolean.valueOf(document.get(IndexingConstant.OFFLINE_EMAIL_HAS_ATTACHMENT));
                        
                        EmailItem item = new EmailItem(Integer.valueOf(id), 
                                Integer.valueOf(parentId), emailFrom,
                                emailTo, emailSubject, DateUtil.formatDate(emailDate), folderName, hasAttachment);
                        
                        emails.add(item);
                        ids.add(Integer.valueOf(id));
                   }
                }
            }
        }
        
        this.setResultIds(ids);
        indexReader.close();
        
        return emails;
    }
    
    private List<String> getOfflineEmailsPaths() throws IOException {
        List<String> offlineEmailPaths = new ArrayList<String>();
        
        String indexDir = this.aCase.getCaseLocation() + "\\" + FilesPath.INDEX_PATH;
        Directory dir = FSDirectory.open(new File(indexDir));
        IndexReader indexReader = IndexReader.open(dir);
        
        for (int i=0; i<indexReader.maxDoc(); i++) {
            Document document = indexReader.document(i);
            if ( document != null ) {
                Field field = document.getField(IndexingConstant.OFFLINE_EMAIL_PATH);
                if ( field != null && field.stringValue() != null) {
                   String path = field.stringValue();
                   offlineEmailPaths.add(path);
                }
            }
        }
        indexReader.close();
        
        return offlineEmailPaths;
    }
        
    void setResultIds(final List<Integer> ids) {
        this.documentIds.clear();
        this.documentIds.addAll(Collections.unmodifiableList(ids));
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList emailSourceJList;
    private javax.swing.JTable emailsTable;
    private javax.swing.JTextField filterEmailsTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton loadEmailSourceButton;
    // End of variables declaration//GEN-END:variables
}
