/* 
 * Copyright (C) 2014 Center of Excellence in Information Assurance
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package edu.coeia.internet;

import edu.coeia.cases.Case;
import edu.coeia.constants.ApplicationConstants;
import edu.coeia.constants.OpreatingSystemConstants;
import edu.coeia.constants.ResourceManager;
import edu.coeia.detector.FirefoxDetector;
import edu.coeia.detector.UsersDetector;
import edu.coeia.gutil.GuiUtil;
import edu.coeia.gutil.JTableUtil;
import edu.coeia.main.CaseMainFrame;
import edu.coeia.util.ApplicationLogging;
import edu.coeia.util.FileUtil;
import edu.coeia.util.Utilities;
import edu.coeia.visualization.CorrelationDialog;
import java.awt.ComponentOrientation;
import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

/*
 * InternetSurfingPanel.java
 *
 * @author wajdyessam
 * 
 * Created on Aug 10, 2011, 4:19:16 PM
 * 
 */

public class InternetSurfingPanel extends javax.swing.JPanel {
    private final static Logger logger = ApplicationLogging.getLogger();   
    private final CaseMainFrame caseFrame ;
    private final Case aCase ;
    
    /** Creates new form InternetSurfingPanel */
    public InternetSurfingPanel(final JFrame frame) {
        initComponents();        
        
        this.caseFrame = (CaseMainFrame) frame;
        this.aCase =  this.caseFrame.getCaseFacade().getCase();
        
        this.mozillaSearchField.getDocument().addDocumentListener(new MozillaInputListener());
        this.IESearchField.getDocument().addDocumentListener(new IEInputListener());                  
        this.disableNotIndexedComponent();                
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        internetSurfingTappedPane = new javax.swing.JTabbedPane();
        mozillaPanel = new javax.swing.JPanel();
        mozillaButtonsPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jToolBar2 = new javax.swing.JToolBar();
        ffSummaryButtton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        webHistoryButton = new javax.swing.JButton();
        bookmarButton = new javax.swing.JButton();
        cookiesButton = new javax.swing.JButton();
        downloadButton = new javax.swing.JButton();
        logginsButton = new javax.swing.JButton();
        mozillaButtonsPanel1 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jToolBar4 = new javax.swing.JToolBar();
        ffSummaryButtton1 = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        webHistoryButton2 = new javax.swing.JButton();
        bookmarButton2 = new javax.swing.JButton();
        cookiesButton2 = new javax.swing.JButton();
        downloadButton1 = new javax.swing.JButton();
        logginsButton2 = new javax.swing.JButton();
        mozillaResultPanel = new javax.swing.JPanel();
        webHistoryPanel = new javax.swing.JPanel();
        webHistoryScrollPane = new javax.swing.JScrollPane();
        webHistoryTable = new edu.coeia.gutil.TableWithToolTip();
        bookmarkHistory = new javax.swing.JPanel();
        bookmarkScrollPane = new javax.swing.JScrollPane();
        bookmarkTable = new edu.coeia.gutil.TableWithToolTip();
        cookiesPanel = new javax.swing.JPanel();
        cookiesScrollPane = new javax.swing.JScrollPane();
        cookiesTable = new edu.coeia.gutil.TableWithToolTip();
        downloadPanel = new javax.swing.JPanel();
        downloadScrollPane = new javax.swing.JScrollPane();
        downloadTable = new edu.coeia.gutil.TableWithToolTip();
        logginsPanel = new javax.swing.JPanel();
        logginsScrollPane = new javax.swing.JScrollPane();
        logginsTable = new edu.coeia.gutil.TableWithToolTip();
        ffSummaryPanel = new javax.swing.JPanel();
        ffSummaryDataPanel = new javax.swing.JPanel();
        ffSumarryTappnedPane = new javax.swing.JTabbedPane();
        topHostPanel = new javax.swing.JPanel();
        jScrollPane24 = new javax.swing.JScrollPane();
        topHostTable = new javax.swing.JTable();
        topURLPanel = new javax.swing.JPanel();
        jScrollPane25 = new javax.swing.JScrollPane();
        topURLTable = new javax.swing.JTable();
        searchEnginePanel = new javax.swing.JPanel();
        jScrollPane26 = new javax.swing.JScrollPane();
        searchEngineTable = new javax.swing.JTable();
        ffSummaryButtonsPanel = new javax.swing.JPanel();
        ffViewHTMLReportButton = new javax.swing.JButton();
        ffVisualizingVisitedHostButton = new javax.swing.JButton();
        mozillaSearchPanel = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        mozillaSearchField = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        mozillaFilterComboBox = new javax.swing.JComboBox();
        mozillaLoadPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        ffComboBox = new javax.swing.JComboBox();
        loadFFButton = new javax.swing.JButton();
        IEPanel = new javax.swing.JPanel();
        IEButtonsPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jToolBar3 = new javax.swing.JToolBar(javax.swing.JToolBar.VERTICAL);
        webHistoryButton1 = new javax.swing.JButton();
        bookmarButton1 = new javax.swing.JButton();
        cookiesButton1 = new javax.swing.JButton();
        cacheButton = new javax.swing.JButton();
        logginsButton1 = new javax.swing.JButton();
        IESearchPanel = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        IESearchField = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        IEFilterComboBox = new javax.swing.JComboBox();
        IEResultPanel = new javax.swing.JPanel();
        IEWebHistoryPanel = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        IEWebHistoryTable = new edu.coeia.gutil.TableWithToolTip();
        IEBookmarkPanel = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        IEBookmarkTable = new edu.coeia.gutil.TableWithToolTip();
        IECookiesPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        IECookiesTable = new edu.coeia.gutil.TableWithToolTip();
        IECachePanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        IECacheTable = new edu.coeia.gutil.TableWithToolTip();
        IELogginsPanel = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        IELogginsTable = new edu.coeia.gutil.TableWithToolTip();
        IELoadPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        ieComboBox = new javax.swing.JComboBox();
        loadIEButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        mozillaPanel.setLayout(new java.awt.BorderLayout());

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("edu/coeia/internet/Bundle"); // NOI18N
        mozillaButtonsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, bundle.getString("InternetSurfingPanel.mozillaButtonsPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        mozillaButtonsPanel.setPreferredSize(new java.awt.Dimension(200, 459));

        jToolBar2.setFloatable(false);
        jToolBar2.setOrientation(javax.swing.JToolBar.VERTICAL);
        jToolBar2.setRollover(true);

        ffSummaryButtton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/main/resources/view_text.png"))); // NOI18N
        ffSummaryButtton.setText(bundle.getString("InternetSurfingPanel.ffSummaryButtton.text")); // NOI18N
        ffSummaryButtton.setEnabled(false);
        ffSummaryButtton.setPreferredSize(new java.awt.Dimension(55, 55));
        ffSummaryButtton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ffSummaryButttonActionPerformed(evt);
            }
        });
        jToolBar2.add(ffSummaryButtton);
        jToolBar2.add(jSeparator2);

        webHistoryButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/main/resources/web.png"))); // NOI18N
        webHistoryButton.setText(bundle.getString("InternetSurfingPanel.webHistoryButton.text")); // NOI18N
        webHistoryButton.setEnabled(false);
        webHistoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                webHistoryButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(webHistoryButton);

        bookmarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/main/resources/bookmarks.png"))); // NOI18N
        bookmarButton.setText(bundle.getString("InternetSurfingPanel.bookmarButton.text")); // NOI18N
        bookmarButton.setEnabled(false);
        bookmarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookmarButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(bookmarButton);

        cookiesButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/main/resources/autostart.png"))); // NOI18N
        cookiesButton.setText(bundle.getString("InternetSurfingPanel.cookiesButton.text")); // NOI18N
        cookiesButton.setEnabled(false);
        cookiesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cookiesButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(cookiesButton);

        downloadButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/main/resources/download.png"))); // NOI18N
        downloadButton.setText(bundle.getString("InternetSurfingPanel.downloadButton.text")); // NOI18N
        downloadButton.setEnabled(false);
        downloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(downloadButton);

        logginsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/main/resources/lists.png"))); // NOI18N
        logginsButton.setText(bundle.getString("InternetSurfingPanel.logginsButton.text")); // NOI18N
        logginsButton.setEnabled(false);
        logginsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logginsButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(logginsButton);

        jScrollPane1.setViewportView(jToolBar2);

        mozillaButtonsPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, bundle.getString("InternetSurfingPanel.mozillaButtonsPanel1.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        mozillaButtonsPanel1.setPreferredSize(new java.awt.Dimension(200, 459));

        jToolBar4.setFloatable(false);
        jToolBar4.setOrientation(javax.swing.JToolBar.VERTICAL);
        jToolBar4.setRollover(true);

        ffSummaryButtton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/main/resources/view_text.png"))); // NOI18N
        ffSummaryButtton1.setText(bundle.getString("InternetSurfingPanel.ffSummaryButtton1.text")); // NOI18N
        ffSummaryButtton1.setEnabled(false);
        ffSummaryButtton1.setPreferredSize(new java.awt.Dimension(55, 55));
        ffSummaryButtton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ffSummaryButtton1ActionPerformed(evt);
            }
        });
        jToolBar4.add(ffSummaryButtton1);
        jToolBar4.add(jSeparator3);

        webHistoryButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/main/resources/web.png"))); // NOI18N
        webHistoryButton2.setText(bundle.getString("InternetSurfingPanel.webHistoryButton2.text")); // NOI18N
        webHistoryButton2.setEnabled(false);
        webHistoryButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                webHistoryButton2ActionPerformed(evt);
            }
        });
        jToolBar4.add(webHistoryButton2);

        bookmarButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/main/resources/bookmarks.png"))); // NOI18N
        bookmarButton2.setText(bundle.getString("InternetSurfingPanel.bookmarButton2.text")); // NOI18N
        bookmarButton2.setEnabled(false);
        bookmarButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookmarButton2ActionPerformed(evt);
            }
        });
        jToolBar4.add(bookmarButton2);

        cookiesButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/main/resources/autostart.png"))); // NOI18N
        cookiesButton2.setText(bundle.getString("InternetSurfingPanel.cookiesButton2.text")); // NOI18N
        cookiesButton2.setEnabled(false);
        cookiesButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cookiesButton2ActionPerformed(evt);
            }
        });
        jToolBar4.add(cookiesButton2);

        downloadButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/main/resources/download.png"))); // NOI18N
        downloadButton1.setText(bundle.getString("InternetSurfingPanel.downloadButton1.text")); // NOI18N
        downloadButton1.setEnabled(false);
        downloadButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadButton1ActionPerformed(evt);
            }
        });
        jToolBar4.add(downloadButton1);

        logginsButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/main/resources/lists.png"))); // NOI18N
        logginsButton2.setText(bundle.getString("InternetSurfingPanel.logginsButton2.text")); // NOI18N
        logginsButton2.setEnabled(false);
        logginsButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logginsButton2ActionPerformed(evt);
            }
        });
        jToolBar4.add(logginsButton2);

        jScrollPane8.setViewportView(jToolBar4);

        javax.swing.GroupLayout mozillaButtonsPanel1Layout = new javax.swing.GroupLayout(mozillaButtonsPanel1);
        mozillaButtonsPanel1.setLayout(mozillaButtonsPanel1Layout);
        mozillaButtonsPanel1Layout.setHorizontalGroup(
            mozillaButtonsPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
        );
        mozillaButtonsPanel1Layout.setVerticalGroup(
            mozillaButtonsPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout mozillaButtonsPanelLayout = new javax.swing.GroupLayout(mozillaButtonsPanel);
        mozillaButtonsPanel.setLayout(mozillaButtonsPanelLayout);
        mozillaButtonsPanelLayout.setHorizontalGroup(
            mozillaButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
            .addGroup(mozillaButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(mozillaButtonsPanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(mozillaButtonsPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        mozillaButtonsPanelLayout.setVerticalGroup(
            mozillaButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
            .addGroup(mozillaButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(mozillaButtonsPanelLayout.createSequentialGroup()
                    .addGap(0, 9, Short.MAX_VALUE)
                    .addComponent(mozillaButtonsPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 9, Short.MAX_VALUE)))
        );

        mozillaPanel.add(mozillaButtonsPanel, java.awt.BorderLayout.WEST);

        mozillaResultPanel.setLayout(new java.awt.CardLayout());

        webHistoryPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, bundle.getString("InternetSurfingPanel.webHistoryPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        webHistoryTable.setAutoCreateRowSorter(true);
        webHistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Date","Url","Title","Visit Count","Typed"
            }
        ){
            public Class<?> getColumnClass( int index) {
                switch (index) {
                    case 0:
                    case 1:
                    case 2:
                    return Object.class;

                    case 3:
                    return Integer.class;

                    case 4:
                    return Integer.class;
                }

                return Object.class;
            }
        });
        webHistoryTable.setFillsViewportHeight(true);
        webHistoryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                webHistoryTableMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                webHistoryTableMouseReleased(evt);
            }
        });
        webHistoryScrollPane.setViewportView(webHistoryTable);

        javax.swing.GroupLayout webHistoryPanelLayout = new javax.swing.GroupLayout(webHistoryPanel);
        webHistoryPanel.setLayout(webHistoryPanelLayout);
        webHistoryPanelLayout.setHorizontalGroup(
            webHistoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(webHistoryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(webHistoryScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
                .addContainerGap())
        );
        webHistoryPanelLayout.setVerticalGroup(
            webHistoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(webHistoryPanelLayout.createSequentialGroup()
                .addComponent(webHistoryScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                .addContainerGap())
        );

        mozillaResultPanel.add(webHistoryPanel, "webHistoryCard");

        bookmarkHistory.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("InternetSurfingPanel.bookmarkHistory.border.title"))); // NOI18N

        bookmarkTable.setAutoCreateRowSorter(true);
        bookmarkTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "TITLE","URL","DATE ADDED"
            }
        ));
        bookmarkTable.setFillsViewportHeight(true);
        bookmarkTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                bookmarkTableMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                bookmarkTableMouseReleased(evt);
            }
        });
        bookmarkScrollPane.setViewportView(bookmarkTable);

        javax.swing.GroupLayout bookmarkHistoryLayout = new javax.swing.GroupLayout(bookmarkHistory);
        bookmarkHistory.setLayout(bookmarkHistoryLayout);
        bookmarkHistoryLayout.setHorizontalGroup(
            bookmarkHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookmarkHistoryLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bookmarkScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
                .addContainerGap())
        );
        bookmarkHistoryLayout.setVerticalGroup(
            bookmarkHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookmarkHistoryLayout.createSequentialGroup()
                .addComponent(bookmarkScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                .addContainerGap())
        );

        mozillaResultPanel.add(bookmarkHistory, "bookmarkCard");

        cookiesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("InternetSurfingPanel.cookiesPanel.border.title"))); // NOI18N

        cookiesTable.setAutoCreateRowSorter(true);
        cookiesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "HOST","PATH","NAME","VALUE","LAST ACCESS TIME","EXPIRY",
                "IS SECURE","IS HTTP ONLY"
            }
        ));
        cookiesTable.setFillsViewportHeight(true);
        cookiesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cookiesTableMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                cookiesTableMouseReleased(evt);
            }
        });
        cookiesScrollPane.setViewportView(cookiesTable);

        javax.swing.GroupLayout cookiesPanelLayout = new javax.swing.GroupLayout(cookiesPanel);
        cookiesPanel.setLayout(cookiesPanelLayout);
        cookiesPanelLayout.setHorizontalGroup(
            cookiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cookiesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cookiesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
                .addContainerGap())
        );
        cookiesPanelLayout.setVerticalGroup(
            cookiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cookiesPanelLayout.createSequentialGroup()
                .addComponent(cookiesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                .addContainerGap())
        );

        mozillaResultPanel.add(cookiesPanel, "cookiesCard");

        downloadPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("InternetSurfingPanel.downloadPanel.border.title"))); // NOI18N

        downloadTable.setAutoCreateRowSorter(true);
        downloadTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "NAME","SOURCE","TARGET","START TIME","END TIME"
            }
        ));
        downloadTable.setFillsViewportHeight(true);
        downloadTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                downloadTableMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                downloadTableMouseReleased(evt);
            }
        });
        downloadScrollPane.setViewportView(downloadTable);

        javax.swing.GroupLayout downloadPanelLayout = new javax.swing.GroupLayout(downloadPanel);
        downloadPanel.setLayout(downloadPanelLayout);
        downloadPanelLayout.setHorizontalGroup(
            downloadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(downloadPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(downloadScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
                .addContainerGap())
        );
        downloadPanelLayout.setVerticalGroup(
            downloadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(downloadPanelLayout.createSequentialGroup()
                .addComponent(downloadScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                .addContainerGap())
        );

        mozillaResultPanel.add(downloadPanel, "downloadCard");

        logginsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("InternetSurfingPanel.logginsPanel.border.title"))); // NOI18N

        logginsTable.setAutoCreateRowSorter(true);
        logginsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "HOST NAME","USERNAME FIELD",
                "PASSWORD FIELD","ENCRYPTED USERNAME","ENCRYPTED PASSWORD"
            }
        ));
        logginsTable.setFillsViewportHeight(true);
        logginsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                logginsTableMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                logginsTableMouseReleased(evt);
            }
        });
        logginsScrollPane.setViewportView(logginsTable);

        javax.swing.GroupLayout logginsPanelLayout = new javax.swing.GroupLayout(logginsPanel);
        logginsPanel.setLayout(logginsPanelLayout);
        logginsPanelLayout.setHorizontalGroup(
            logginsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(logginsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(logginsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
                .addContainerGap())
        );
        logginsPanelLayout.setVerticalGroup(
            logginsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(logginsPanelLayout.createSequentialGroup()
                .addComponent(logginsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                .addContainerGap())
        );

        mozillaResultPanel.add(logginsPanel, "logginsCard");

        topHostTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Host Name", "Total Visit Count"
            }
        ));
        jScrollPane24.setViewportView(topHostTable);

        javax.swing.GroupLayout topHostPanelLayout = new javax.swing.GroupLayout(topHostPanel);
        topHostPanel.setLayout(topHostPanelLayout);
        topHostPanelLayout.setHorizontalGroup(
            topHostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane24, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE)
        );
        topHostPanelLayout.setVerticalGroup(
            topHostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane24, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
        );

        ffSumarryTappnedPane.addTab(bundle.getString("InternetSurfingPanel.topHostPanel.TabConstraints.tabTitle"), topHostPanel); // NOI18N

        topURLTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "URL","Title","Visit Count"
            }
        ));
        jScrollPane25.setViewportView(topURLTable);

        javax.swing.GroupLayout topURLPanelLayout = new javax.swing.GroupLayout(topURLPanel);
        topURLPanel.setLayout(topURLPanelLayout);
        topURLPanelLayout.setHorizontalGroup(
            topURLPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane25, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE)
        );
        topURLPanelLayout.setVerticalGroup(
            topURLPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane25, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
        );

        ffSumarryTappnedPane.addTab(bundle.getString("InternetSurfingPanel.topURLPanel.TabConstraints.tabTitle"), topURLPanel); // NOI18N

        searchEngineTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "URL","Date"
            }
        ));
        jScrollPane26.setViewportView(searchEngineTable);

        javax.swing.GroupLayout searchEnginePanelLayout = new javax.swing.GroupLayout(searchEnginePanel);
        searchEnginePanel.setLayout(searchEnginePanelLayout);
        searchEnginePanelLayout.setHorizontalGroup(
            searchEnginePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane26, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE)
        );
        searchEnginePanelLayout.setVerticalGroup(
            searchEnginePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane26, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
        );

        ffSumarryTappnedPane.addTab(bundle.getString("InternetSurfingPanel.searchEnginePanel.TabConstraints.tabTitle"), searchEnginePanel); // NOI18N

        javax.swing.GroupLayout ffSummaryDataPanelLayout = new javax.swing.GroupLayout(ffSummaryDataPanel);
        ffSummaryDataPanel.setLayout(ffSummaryDataPanelLayout);
        ffSummaryDataPanelLayout.setHorizontalGroup(
            ffSummaryDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ffSumarryTappnedPane)
        );
        ffSummaryDataPanelLayout.setVerticalGroup(
            ffSummaryDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ffSumarryTappnedPane)
        );

        ffSummaryButtonsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        ffViewHTMLReportButton.setText(bundle.getString("InternetSurfingPanel.ffViewHTMLReportButton.text")); // NOI18N
        ffViewHTMLReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ffViewHTMLReportButtonActionPerformed(evt);
            }
        });

        ffVisualizingVisitedHostButton.setText(bundle.getString("InternetSurfingPanel.ffVisualizingVisitedHostButton.text")); // NOI18N
        ffVisualizingVisitedHostButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ffVisualizingVisitedHostButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ffSummaryButtonsPanelLayout = new javax.swing.GroupLayout(ffSummaryButtonsPanel);
        ffSummaryButtonsPanel.setLayout(ffSummaryButtonsPanelLayout);
        ffSummaryButtonsPanelLayout.setHorizontalGroup(
            ffSummaryButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ffSummaryButtonsPanelLayout.createSequentialGroup()
                .addGap(113, 113, 113)
                .addComponent(ffViewHTMLReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ffVisualizingVisitedHostButton, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(113, 113, 113))
        );
        ffSummaryButtonsPanelLayout.setVerticalGroup(
            ffSummaryButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ffSummaryButtonsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ffSummaryButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ffViewHTMLReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ffVisualizingVisitedHostButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout ffSummaryPanelLayout = new javax.swing.GroupLayout(ffSummaryPanel);
        ffSummaryPanel.setLayout(ffSummaryPanelLayout);
        ffSummaryPanelLayout.setHorizontalGroup(
            ffSummaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ffSummaryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ffSummaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ffSummaryButtonsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ffSummaryDataPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        ffSummaryPanelLayout.setVerticalGroup(
            ffSummaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ffSummaryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ffSummaryDataPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(ffSummaryButtonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        mozillaResultPanel.add(ffSummaryPanel, "ffSummaryCard");

        mozillaPanel.add(mozillaResultPanel, java.awt.BorderLayout.CENTER);

        mozillaSearchPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, bundle.getString("InternetSurfingPanel.mozillaSearchPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        mozillaSearchPanel.setPreferredSize(new java.awt.Dimension(1194, 92));

        jLabel15.setText(bundle.getString("InternetSurfingPanel.jLabel15.text")); // NOI18N

        mozillaSearchField.setText(bundle.getString("InternetSurfingPanel.mozillaSearchField.text")); // NOI18N

        jLabel16.setText(bundle.getString("InternetSurfingPanel.jLabel16.text")); // NOI18N

        mozillaFilterComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] {
            "Filter By Date",
            "Filrer By URL Name"
        }));
        mozillaFilterComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mozillaFilterComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mozillaSearchPanelLayout = new javax.swing.GroupLayout(mozillaSearchPanel);
        mozillaSearchPanel.setLayout(mozillaSearchPanelLayout);
        mozillaSearchPanelLayout.setHorizontalGroup(
            mozillaSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mozillaSearchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mozillaSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel16)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mozillaSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mozillaFilterComboBox, 0, 651, Short.MAX_VALUE)
                    .addComponent(mozillaSearchField, javax.swing.GroupLayout.DEFAULT_SIZE, 647, Short.MAX_VALUE))
                .addContainerGap())
        );
        mozillaSearchPanelLayout.setVerticalGroup(
            mozillaSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mozillaSearchPanelLayout.createSequentialGroup()
                .addGroup(mozillaSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(mozillaSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mozillaSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(mozillaFilterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        mozillaPanel.add(mozillaSearchPanel, java.awt.BorderLayout.SOUTH);

        mozillaLoadPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        mozillaLoadPanel.setLayout(new java.awt.BorderLayout());

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 70, 213));
        jLabel3.setText(bundle.getString("InternetSurfingPanel.jLabel3.text")); // NOI18N
        mozillaLoadPanel.add(jLabel3, java.awt.BorderLayout.WEST);

        ffComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ffComboBoxActionPerformed(evt);
            }
        });
        mozillaLoadPanel.add(ffComboBox, java.awt.BorderLayout.CENTER);

        loadFFButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        loadFFButton.setText(bundle.getString("InternetSurfingPanel.loadFFButton.text")); // NOI18N
        loadFFButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFFButtonActionPerformed(evt);
            }
        });
        mozillaLoadPanel.add(loadFFButton, java.awt.BorderLayout.EAST);

        mozillaPanel.add(mozillaLoadPanel, java.awt.BorderLayout.NORTH);

        internetSurfingTappedPane.addTab(bundle.getString("InternetSurfingPanel.mozillaPanel.TabConstraints.tabTitle"), mozillaPanel); // NOI18N

        IEPanel.setPreferredSize(new java.awt.Dimension(853, 796));
        IEPanel.setLayout(new java.awt.BorderLayout());

        IEButtonsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, bundle.getString("InternetSurfingPanel.IEButtonsPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        IEButtonsPanel.setPreferredSize(new java.awt.Dimension(200, 459));

        jToolBar3.setFloatable(false);
        jToolBar3.setOrientation(javax.swing.JToolBar.VERTICAL);
        jToolBar3.setRollover(true);

        webHistoryButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/main/resources/web.png"))); // NOI18N
        webHistoryButton1.setText(bundle.getString("InternetSurfingPanel.webHistoryButton1.text")); // NOI18N
        webHistoryButton1.setEnabled(false);
        webHistoryButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                webHistoryButton1ActionPerformed(evt);
            }
        });
        jToolBar3.add(webHistoryButton1);

        bookmarButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/main/resources/bookmarks.png"))); // NOI18N
        bookmarButton1.setText(bundle.getString("InternetSurfingPanel.bookmarButton1.text")); // NOI18N
        bookmarButton1.setEnabled(false);
        bookmarButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookmarButton1ActionPerformed(evt);
            }
        });
        jToolBar3.add(bookmarButton1);

        cookiesButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/main/resources/autostart.png"))); // NOI18N
        cookiesButton1.setText(bundle.getString("InternetSurfingPanel.cookiesButton1.text")); // NOI18N
        cookiesButton1.setEnabled(false);
        cookiesButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cookiesButton1ActionPerformed(evt);
            }
        });
        jToolBar3.add(cookiesButton1);

        cacheButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/main/resources/download.png"))); // NOI18N
        cacheButton.setText(bundle.getString("InternetSurfingPanel.cacheButton.text")); // NOI18N
        cacheButton.setEnabled(false);
        cacheButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cacheButtonActionPerformed(evt);
            }
        });
        jToolBar3.add(cacheButton);

        logginsButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/main/resources/lists.png"))); // NOI18N
        logginsButton1.setText(bundle.getString("InternetSurfingPanel.logginsButton1.text")); // NOI18N
        logginsButton1.setEnabled(false);
        logginsButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logginsButton1ActionPerformed(evt);
            }
        });
        jToolBar3.add(logginsButton1);

        jScrollPane2.setViewportView(jToolBar3);

        javax.swing.GroupLayout IEButtonsPanelLayout = new javax.swing.GroupLayout(IEButtonsPanel);
        IEButtonsPanel.setLayout(IEButtonsPanelLayout);
        IEButtonsPanelLayout.setHorizontalGroup(
            IEButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, IEButtonsPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        IEButtonsPanelLayout.setVerticalGroup(
            IEButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
        );

        IEPanel.add(IEButtonsPanel, java.awt.BorderLayout.WEST);

        IESearchPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, bundle.getString("InternetSurfingPanel.IESearchPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jLabel17.setText(bundle.getString("InternetSurfingPanel.jLabel17.text")); // NOI18N

        IESearchField.setText(bundle.getString("InternetSurfingPanel.IESearchField.text")); // NOI18N

        jLabel18.setText(bundle.getString("InternetSurfingPanel.jLabel18.text")); // NOI18N

        IEFilterComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] {
            "Filter By Date",
            "Filrer By URL Name"
        }));
        IEFilterComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IEFilterComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout IESearchPanelLayout = new javax.swing.GroupLayout(IESearchPanel);
        IESearchPanel.setLayout(IESearchPanelLayout);
        IESearchPanelLayout.setHorizontalGroup(
            IESearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IESearchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(IESearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel18)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(IESearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(IEFilterComboBox, 0, 651, Short.MAX_VALUE)
                    .addComponent(IESearchField, javax.swing.GroupLayout.DEFAULT_SIZE, 647, Short.MAX_VALUE))
                .addContainerGap())
        );
        IESearchPanelLayout.setVerticalGroup(
            IESearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IESearchPanelLayout.createSequentialGroup()
                .addGroup(IESearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(IESearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(IESearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(IEFilterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        IEPanel.add(IESearchPanel, java.awt.BorderLayout.SOUTH);

        IEResultPanel.setLayout(new java.awt.CardLayout());

        IEWebHistoryPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, bundle.getString("InternetSurfingPanel.IEWebHistoryPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        IEWebHistoryTable.setAutoCreateRowSorter(true);
        IEWebHistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "URL","TITLE","HITS","MODIFIED DATE","EXPIRATION DATE",
                "USER NAME"
            }
        ));
        IEWebHistoryTable.setFillsViewportHeight(true);
        IEWebHistoryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                IEWebHistoryTableMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                IEWebHistoryTableMouseReleased(evt);
            }
        });
        jScrollPane5.setViewportView(IEWebHistoryTable);

        javax.swing.GroupLayout IEWebHistoryPanelLayout = new javax.swing.GroupLayout(IEWebHistoryPanel);
        IEWebHistoryPanel.setLayout(IEWebHistoryPanelLayout);
        IEWebHistoryPanelLayout.setHorizontalGroup(
            IEWebHistoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IEWebHistoryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
                .addContainerGap())
        );
        IEWebHistoryPanelLayout.setVerticalGroup(
            IEWebHistoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
        );

        IEResultPanel.add(IEWebHistoryPanel, "IEWebHisrotyCard");

        IEBookmarkPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("InternetSurfingPanel.IEBookmarkPanel.border.title"))); // NOI18N

        IEBookmarkTable.setAutoCreateRowSorter(true);
        IEBookmarkTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] { } ,
            new String [] {
                "FILE NAME"
            }
        ));
        IEBookmarkTable.setFillsViewportHeight(true);
        IEBookmarkTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                IEBookmarkTableMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                IEBookmarkTableMouseReleased(evt);
            }
        });
        jScrollPane6.setViewportView(IEBookmarkTable);

        javax.swing.GroupLayout IEBookmarkPanelLayout = new javax.swing.GroupLayout(IEBookmarkPanel);
        IEBookmarkPanel.setLayout(IEBookmarkPanelLayout);
        IEBookmarkPanelLayout.setHorizontalGroup(
            IEBookmarkPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IEBookmarkPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
                .addContainerGap())
        );
        IEBookmarkPanelLayout.setVerticalGroup(
            IEBookmarkPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IEBookmarkPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                .addContainerGap())
        );

        IEResultPanel.add(IEBookmarkPanel, "IEBookmarkCard");

        IECookiesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("InternetSurfingPanel.IECookiesPanel.border.title"))); // NOI18N

        IECookiesTable.setAutoCreateRowSorter(true);
        IECookiesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "DATE","SITE","FILE"
            }
        ));
        IECookiesTable.setFillsViewportHeight(true);
        IECookiesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                IECookiesTableMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                IECookiesTableMouseReleased(evt);
            }
        });
        jScrollPane4.setViewportView(IECookiesTable);

        javax.swing.GroupLayout IECookiesPanelLayout = new javax.swing.GroupLayout(IECookiesPanel);
        IECookiesPanel.setLayout(IECookiesPanelLayout);
        IECookiesPanelLayout.setHorizontalGroup(
            IECookiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IECookiesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
                .addContainerGap())
        );
        IECookiesPanelLayout.setVerticalGroup(
            IECookiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IECookiesPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                .addContainerGap())
        );

        IEResultPanel.add(IECookiesPanel, "IECookiesCard");

        IECachePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("InternetSurfingPanel.IECachePanel.border.title"))); // NOI18N

        IECacheTable.setAutoCreateRowSorter(true);
        IECacheTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "DATE","URL","FILE"
            }
        ));
        IECacheTable.setFillsViewportHeight(true);
        IECacheTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                IECacheTableMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                IECacheTableMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(IECacheTable);

        javax.swing.GroupLayout IECachePanelLayout = new javax.swing.GroupLayout(IECachePanel);
        IECachePanel.setLayout(IECachePanelLayout);
        IECachePanelLayout.setHorizontalGroup(
            IECachePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IECachePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
                .addContainerGap())
        );
        IECachePanelLayout.setVerticalGroup(
            IECachePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IECachePanelLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                .addContainerGap())
        );

        IEResultPanel.add(IECachePanel, "IECacheCard");

        IELogginsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("InternetSurfingPanel.IELogginsPanel.border.title"))); // NOI18N

        IELogginsTable.setAutoCreateRowSorter(true);
        IELogginsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Entry Name","TYPE","STORED IN","USERNAME","PASSWORD"
            }
        ));
        IELogginsTable.setFillsViewportHeight(true);
        IELogginsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                IELogginsTableMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                IELogginsTableMouseReleased(evt);
            }
        });
        jScrollPane7.setViewportView(IELogginsTable);

        javax.swing.GroupLayout IELogginsPanelLayout = new javax.swing.GroupLayout(IELogginsPanel);
        IELogginsPanel.setLayout(IELogginsPanelLayout);
        IELogginsPanelLayout.setHorizontalGroup(
            IELogginsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IELogginsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
                .addContainerGap())
        );
        IELogginsPanelLayout.setVerticalGroup(
            IELogginsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IELogginsPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                .addContainerGap())
        );

        IEResultPanel.add(IELogginsPanel, "IELogginsCard");

        IEPanel.add(IEResultPanel, java.awt.BorderLayout.CENTER);

        IELoadPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        IELoadPanel.setLayout(new java.awt.BorderLayout());

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 70, 213));
        jLabel4.setText(bundle.getString("InternetSurfingPanel.jLabel4.text")); // NOI18N
        IELoadPanel.add(jLabel4, java.awt.BorderLayout.WEST);
        IELoadPanel.add(ieComboBox, java.awt.BorderLayout.CENTER);

        loadIEButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        loadIEButton.setText(bundle.getString("InternetSurfingPanel.loadIEButton.text")); // NOI18N
        loadIEButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadIEButtonActionPerformed(evt);
            }
        });
        IELoadPanel.add(loadIEButton, java.awt.BorderLayout.EAST);

        IEPanel.add(IELoadPanel, java.awt.BorderLayout.NORTH);

        internetSurfingTappedPane.addTab(bundle.getString("InternetSurfingPanel.IEPanel.TabConstraints.tabTitle"), IEPanel); // NOI18N

        add(internetSurfingTappedPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

private void ffSummaryButttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ffSummaryButttonActionPerformed
        GuiUtil.showPanel("ffSummaryCard",mozillaResultPanel);
        resetInternetSurfing(mozillaSearchField,mozillaFilterComboBox);
        try {
            String path = (String) ffComboBox.getSelectedItem() + "\\" ;
            fillTopHostTable(path);
            fillTopURLTable(path);
            fillSearchEngineTable(path);
        }
        catch (Exception e){
           logger.severe(String.format("error in firefox summary %s", e.getMessage()));
        }
}//GEN-LAST:event_ffSummaryButttonActionPerformed

private void webHistoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_webHistoryButtonActionPerformed
        GuiUtil.showPanel("webHistoryCard",mozillaResultPanel);
        resetInternetSurfing(mozillaSearchField,mozillaFilterComboBox);
         try {
             String path = (String) ffComboBox.getSelectedItem() + "\\" ;
             fillWebHistoryTable(path);
         }
        catch (Exception e){
           logger.log(Level.SEVERE, "Uncaught exception", e);
        }
}//GEN-LAST:event_webHistoryButtonActionPerformed

private void bookmarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookmarButtonActionPerformed
        GuiUtil.showPanel("bookmarkCard",mozillaResultPanel);
        resetInternetSurfing(mozillaSearchField,mozillaFilterComboBox);
        try {
            String path = (String) ffComboBox.getSelectedItem() + "\\" ;
            fillBookmarkTable(path);
        }
       catch (Exception e){
           logger.log(Level.SEVERE, "Uncaught exception", e);
       }
}//GEN-LAST:event_bookmarButtonActionPerformed

private void cookiesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cookiesButtonActionPerformed
       GuiUtil.showPanel("cookiesCard",mozillaResultPanel);
       resetInternetSurfing(mozillaSearchField,mozillaFilterComboBox);
       try {
           String path = (String) ffComboBox.getSelectedItem() + "\\" ;
           fillCookiesTable(path);
       }
       catch (Exception e){
           logger.log(Level.SEVERE, "Uncaught exception", e);
       }
}//GEN-LAST:event_cookiesButtonActionPerformed

private void downloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadButtonActionPerformed
       GuiUtil.showPanel("downloadCard",mozillaResultPanel);
        resetInternetSurfing(mozillaSearchField,mozillaFilterComboBox);
       try{
           String path = (String) ffComboBox.getSelectedItem() + "\\" ;
           fillDownloadTable(path);
           JTableUtil.scrollToVisible(downloadTable, 0, 0);
       }
       catch (Exception e){
           logger.log(Level.SEVERE, "Uncaught exception", e);
       }
}//GEN-LAST:event_downloadButtonActionPerformed

private void logginsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logginsButtonActionPerformed
       GuiUtil.showPanel("logginsCard",mozillaResultPanel);
       resetInternetSurfing(mozillaSearchField,mozillaFilterComboBox);
       try {
           String path = (String) ffComboBox.getSelectedItem() + "\\" ;
           fillLogginsTable(path);
       }
       catch (Exception e){
           logger.log(Level.SEVERE, "Uncaught exception", e);
       }
}//GEN-LAST:event_logginsButtonActionPerformed

private void webHistoryTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_webHistoryTableMousePressed
    GuiUtil.showPopUpForTableIfEnabled(this.webHistoryTable, evt);
}//GEN-LAST:event_webHistoryTableMousePressed

private void webHistoryTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_webHistoryTableMouseReleased
    GuiUtil.showPopUpForTableIfEnabled(this.webHistoryTable, evt);
}//GEN-LAST:event_webHistoryTableMouseReleased

private void bookmarkTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookmarkTableMousePressed
    GuiUtil.showPopUpForTableIfEnabled(this.bookmarkTable, evt);
}//GEN-LAST:event_bookmarkTableMousePressed

private void bookmarkTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookmarkTableMouseReleased
    GuiUtil.showPopUpForTableIfEnabled(this.bookmarkTable, evt);   
}//GEN-LAST:event_bookmarkTableMouseReleased

private void cookiesTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cookiesTableMousePressed
    GuiUtil.showPopUpForTableIfEnabled(this.cookiesTable, evt);
}//GEN-LAST:event_cookiesTableMousePressed

private void cookiesTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cookiesTableMouseReleased
    GuiUtil.showPopUpForTableIfEnabled(this.cookiesTable, evt);
}//GEN-LAST:event_cookiesTableMouseReleased

private void downloadTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_downloadTableMousePressed
    GuiUtil.showPopUpForTableIfEnabled(this.downloadTable, evt);
}//GEN-LAST:event_downloadTableMousePressed

private void downloadTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_downloadTableMouseReleased
    GuiUtil.showPopUpForTableIfEnabled(this.downloadTable, evt);
}//GEN-LAST:event_downloadTableMouseReleased

private void logginsTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logginsTableMousePressed
    GuiUtil.showPopUpForTableIfEnabled(this.logginsTable, evt);
}//GEN-LAST:event_logginsTableMousePressed

private void logginsTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logginsTableMouseReleased
    GuiUtil.showPopUpForTableIfEnabled(this.logginsTable, evt);
}//GEN-LAST:event_logginsTableMouseReleased

private void ffViewHTMLReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ffViewHTMLReportButtonActionPerformed
        StringBuilder result = new StringBuilder();
        String path = (String) ffComboBox.getSelectedItem() + "\\" ;
        String userName = Utilities.getFireFoxUserName(path);
            
        try {
            // get top visited host
            MozillaHandler mozillaHandler = new MozillaHandler();
            mozillaHandler.connectMozillaDB(path + MozillaHandler.PLCASES_DB);

            ArrayList<ArrayList<String>> rows = mozillaHandler.getMostVisitiedHost();
            mozillaHandler.closeDB();

            result.append(FireFoxHTMLReportGenerator.getHeader());
            result.append(FireFoxHTMLReportGenerator.getName(new Date().toString(), aCase.getInvestigatorName(), userName));
            result.append(FireFoxHTMLReportGenerator.getTopHostTable());
            
            for (ArrayList<String> row: rows){
                result.append(FireFoxHTMLReportGenerator.getTopHostRow(Utilities.reverseHost(row.get(0)), Integer.parseInt(row.get(1))+1));
            }

            // get top visited url
            mozillaHandler = new MozillaHandler();
            mozillaHandler.connectMozillaDB(path + MozillaHandler.PLCASES_DB);

            ArrayList<ArrayList<String>> rowsURL = mozillaHandler.getSummary();
            mozillaHandler.closeDB();
            
            result.append(FireFoxHTMLReportGenerator.getVisitedURLTable());
            int swap = 0 ;
            for (ArrayList<String> row: rowsURL){
                if ( swap%2 == 0 )
                    result.append(FireFoxHTMLReportGenerator.getVisitedBlackRow(Utilities.filterLine(row.get(0)), row.get(1), Utilities.filterLine(row.get(2)),
                        Boolean.parseBoolean(row.get(3))));
                else
                    result.append(FireFoxHTMLReportGenerator.getVisitedWhiteRow(Utilities.filterLine(row.get(0)), row.get(1), Utilities.filterLine(row.get(2)),
                        Boolean.parseBoolean(row.get(3))));

                swap++;
            }

            result.append(FireFoxHTMLReportGenerator.getFooter());
            
            ArrayList<String> data = new ArrayList<String>();
            data.add(result.toString());
            
            FileUtil.writeToFile(data, ApplicationConstants.FF_REPORT);
            
            // lunch browser
            Desktop desktop = null;
            if (Desktop.isDesktopSupported()) {
                desktop = Desktop.getDesktop();

                if ( desktop.isSupported(Desktop.Action.OPEN) ) {
                    desktop.open(new File(ApplicationConstants.FF_REPORT));
                }
            }
        }
        catch (Exception e){
            e.printStackTrace();
        }
}//GEN-LAST:event_ffViewHTMLReportButtonActionPerformed

private void ffVisualizingVisitedHostButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ffVisualizingVisitedHostButtonActionPerformed
        try{
            String path = (String) ffComboBox.getSelectedItem() + "\\" ;
            String userName = Utilities.getFireFoxUserName(path);
            
            MozillaHandler mozillaHandler = new MozillaHandler();
            mozillaHandler.connectMozillaDB(path + MozillaHandler.PLCASES_DB);

            ArrayList<ArrayList<String>> rows = mozillaHandler.getMostVisitiedHost();
            mozillaHandler.closeDB();
            
            HashMap<String,Integer> visitedMap = new HashMap<String,Integer>();

            if ( rows == null) {
                return ;
            }
            
            for (ArrayList<String> row: rows){
                visitedMap.put(Utilities.reverseHost(row.get(0)), Integer.parseInt(row.get(1))+1);
            }

            // show visulization
            CorrelationDialog cd = new CorrelationDialog(this.caseFrame, true, visitedMap,userName,"FireFox Top Visited Hosts");
            cd.setVisible(true);
        }
        catch (Exception e){
            e.printStackTrace();
        }
        
}//GEN-LAST:event_ffVisualizingVisitedHostButtonActionPerformed

private void mozillaFilterComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mozillaFilterComboBoxActionPerformed
        // date sorting for all tables in mozilla
        if (mozillaFilterComboBox.getSelectedIndex() == 0  ) {
            JTableUtil.sortTable(webHistoryTable,0);
            JTableUtil.sortTable(bookmarkTable,2);
            JTableUtil.sortTable(cookiesTable,4);
            JTableUtil.sortTable(logginsTable,3);
        }
        else if ( mozillaFilterComboBox.getSelectedIndex() == 1  ) {
            JTableUtil.sortTable(webHistoryTable,1);
            JTableUtil.sortTable(bookmarkTable,1);
            JTableUtil.sortTable(cookiesTable,0);
            JTableUtil.sortTable(downloadTable,1);
            JTableUtil.sortTable(logginsTable,0);
        }
}//GEN-LAST:event_mozillaFilterComboBoxActionPerformed

private void loadFFButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFFButtonActionPerformed

    FirefoxDetector detector = new FirefoxDetector();
    List<String> ffPaths = detector.getFilesInPathInternet(aCase.getEvidenceSourceLocation());
    
    if (ffPaths.isEmpty()) {
        GuiUtil.showErrorMessage(this, "Cannot Found Any FireFox Files", "Error");
        return;
    }
    
    ffComboBox.removeAllItems();
    
    ffSummaryButtton.setEnabled(true);
    bookmarButton.setEnabled(true);
    cookiesButton.setEnabled(true);
    downloadButton.setEnabled(true);
    logginsButton.setEnabled(true);
    webHistoryButton.setEnabled(true);
    
    for (String path : ffPaths) {
        ffComboBox.addItem(path);
    }

        
}//GEN-LAST:event_loadFFButtonActionPerformed

private void webHistoryButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_webHistoryButton1ActionPerformed
       GuiUtil.showPanel("IEWebHisrotyCard", IEResultPanel);

        // reset IE text field
        resetInternetSurfing(IESearchField,IEFilterComboBox);
        
       try {
           String userPath = (String) ieComboBox.getSelectedItem() ;
           if ( OpreatingSystemConstants.isValidPath(userPath, OpreatingSystemConstants.IE_HISTORY) ) {
               String path = OpreatingSystemConstants.getIEHistoryPath(userPath);

               fillIEWebHistoryTable(path);

               // Pack the all columns of the table
               int margin = 1;
               JTableUtil.packColumns(IEWebHistoryTable, margin);
           }
           else {
                System.out.println("not found in: " + userPath);
               
                // remove old data
                if ( IEWebHistoryTable.getModel().getRowCount() > 0 )
                     JTableUtil.removeAllRows(IEWebHistoryTable);
           }
       }
       catch (IOException e){
           e.printStackTrace();
           logger.log(Level.SEVERE, "Uncaught exception", e);
       }
       catch (InterruptedException e){
           e.printStackTrace();
           logger.log(Level.SEVERE, "Uncaught exception", e);
       }
}//GEN-LAST:event_webHistoryButton1ActionPerformed

private void bookmarButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookmarButton1ActionPerformed
       GuiUtil.showPanel("IEBookmarkCard", IEResultPanel);

        // reset IE text field
        resetInternetSurfing(IESearchField,IEFilterComboBox);

       try {
           String userPath = (String) ieComboBox.getSelectedItem() ;
           if ( OpreatingSystemConstants.isValidPath(userPath, OpreatingSystemConstants.IE_FAVORITE) ) {
               String path = OpreatingSystemConstants.getIEFavoritePath(userPath);

               fillIEBookmarkTable(path);

               // Pack the all columns of the table
               int margin = 1;
               JTableUtil.packColumns(IEBookmarkTable, margin);
           }
           else {
                System.out.println("not found in: " + userPath);

                // remove old data
                if ( IEBookmarkTable.getModel().getRowCount() > 0 )
                    JTableUtil.removeAllRows(IEBookmarkTable);
           }
       }
       catch (IOException e){
           e.printStackTrace();
           logger.log(Level.SEVERE, "Uncaught exception", e);
       }
}//GEN-LAST:event_bookmarButton1ActionPerformed

private void cookiesButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cookiesButton1ActionPerformed
        GuiUtil.showPanel("IECookiesCard", IEResultPanel);

        // reset IE text field
        resetInternetSurfing(IESearchField,IEFilterComboBox);
        try {
            String userPath = (String) ieComboBox.getSelectedItem() ;
            if ( OpreatingSystemConstants.isValidPath(userPath, OpreatingSystemConstants.IE_COOKIES) ) {
                String path = OpreatingSystemConstants.getIECookiesPath(userPath);
                System.out.println("cookies path: " + path);

                fillIECookiesTable(path);

                // Pack the all columns of the table
                int margin = 1;
                JTableUtil.packColumns(IECookiesTable, margin);
            }
            else {
                System.out.println("not found in: " + userPath);

                // remove old data
                if ( IECookiesTable.getModel().getRowCount() > 0 )
                     JTableUtil.removeAllRows(IECookiesTable);
           }
        }
        catch (IOException e){
            e.printStackTrace();
            logger.log(Level.SEVERE, "Uncaught exception", e);
        }
}//GEN-LAST:event_cookiesButton1ActionPerformed

private void cacheButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cacheButtonActionPerformed
        GuiUtil.showPanel("IECacheCard", IEResultPanel);

        // reset IE text field
        resetInternetSurfing(IESearchField,IEFilterComboBox);
        try {
            String userPath = (String) ieComboBox.getSelectedItem() ;
            if ( OpreatingSystemConstants.isValidPath(userPath, OpreatingSystemConstants.IE_CACHE) ) {
                String path = OpreatingSystemConstants.getIECachePath(userPath);
                //System.out.println("cache: " + path);

                fillIECacheTable(path);

                // Pack the all columns of the table
                int margin = 1;
                JTableUtil.packColumns(IECacheTable, margin);
            }
            else {
                System.out.println("not found in: " + userPath);

                // remove old data
                if ( IECacheTable.getModel().getRowCount() > 0 )
                     JTableUtil.removeAllRows(IECacheTable);
           }
        }
        catch (IOException e){
            e.printStackTrace();
            logger.log(Level.SEVERE, "Uncaught exception", e);
        }
}//GEN-LAST:event_cacheButtonActionPerformed

private void logginsButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logginsButton1ActionPerformed
        GuiUtil.showPanel("IELogginsCard", IEResultPanel);
        
        // reset IE text field
        resetInternetSurfing(IESearchField,IEFilterComboBox);
        try {
            String p = OpreatingSystemConstants.getIEPassword();
            System.out.println("loggin: " + p);

            fillIELogginsTable(p);

           // Pack the all columns of the table
           int margin = 1;
           JTableUtil.packColumns(IELogginsTable, margin);
        }
        catch (IOException e){
            e.printStackTrace();
            logger.log(Level.SEVERE, "Uncaught exception", e);
        }
        catch (InterruptedException e){
            e.printStackTrace();
            logger.log(Level.SEVERE, "Uncaught exception", e);
        }
}//GEN-LAST:event_logginsButton1ActionPerformed

private void IEFilterComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IEFilterComboBoxActionPerformed
        // date sorting for all tables in IE
        if (IEFilterComboBox.getSelectedIndex() == 0  ) {
            JTableUtil.sortTable(IEWebHistoryTable,3);
            JTableUtil.sortTable(IECacheTable,0);
            JTableUtil.sortTable(IECookiesTable,0);
        }
        else if ( IEFilterComboBox.getSelectedIndex() == 1  ) {
            JTableUtil.sortTable(IEWebHistoryTable,0);
            JTableUtil.sortTable(IEBookmarkTable,0);
            JTableUtil.sortTable(IECookiesTable,1);
            JTableUtil.sortTable(IECacheTable,1);
            JTableUtil.sortTable(IELogginsTable,0);
        }
}//GEN-LAST:event_IEFilterComboBoxActionPerformed

private void IEWebHistoryTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IEWebHistoryTableMousePressed
    GuiUtil.showPopUpForTableIfEnabled(this.IEWebHistoryTable, evt);
}//GEN-LAST:event_IEWebHistoryTableMousePressed

private void IEWebHistoryTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IEWebHistoryTableMouseReleased
    GuiUtil.showPopUpForTableIfEnabled(this.IEWebHistoryTable, evt);
}//GEN-LAST:event_IEWebHistoryTableMouseReleased

private void IEBookmarkTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IEBookmarkTableMousePressed
    GuiUtil.showPopUpForTableIfEnabled(this.IEBookmarkTable, evt);
}//GEN-LAST:event_IEBookmarkTableMousePressed

private void IEBookmarkTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IEBookmarkTableMouseReleased
    GuiUtil.showPopUpForTableIfEnabled(this.IEBookmarkTable, evt);
}//GEN-LAST:event_IEBookmarkTableMouseReleased

private void IECookiesTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IECookiesTableMousePressed
    GuiUtil.showPopUpForTableIfEnabled(this.IECookiesTable, evt);
}//GEN-LAST:event_IECookiesTableMousePressed

private void IECookiesTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IECookiesTableMouseReleased
    GuiUtil.showPopUpForTableIfEnabled(this.IECookiesTable, evt);
}//GEN-LAST:event_IECookiesTableMouseReleased

private void IECacheTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IECacheTableMousePressed
    GuiUtil.showPopUpForTableIfEnabled(this.IECacheTable, evt);
}//GEN-LAST:event_IECacheTableMousePressed

private void IECacheTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IECacheTableMouseReleased
    GuiUtil.showPopUpForTableIfEnabled(this.IECacheTable, evt);
}//GEN-LAST:event_IECacheTableMouseReleased

private void IELogginsTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IELogginsTableMousePressed
    GuiUtil.showPopUpForTableIfEnabled(this.IELogginsTable, evt);
}//GEN-LAST:event_IELogginsTableMousePressed

private void IELogginsTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IELogginsTableMouseReleased
    GuiUtil.showPopUpForTableIfEnabled(this.IELogginsTable, evt);
}//GEN-LAST:event_IELogginsTableMouseReleased

    private void loadIEButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadIEButtonActionPerformed
        String path_combo = (String) ieComboBox.getSelectedItem();
        
        UsersDetector detector = new UsersDetector();
        List<String> iePaths = detector.getFilesInPathInternet(aCase.getEvidenceSourceLocation());

        if (iePaths.isEmpty()) {
            GuiUtil.showErrorMessage(this, "Cannot Found Any IE Files","Error");
            return;
        }
        
        ieComboBox.removeAllItems();
        
        cacheButton.setEnabled(true);
        bookmarButton1.setEnabled(true);
        cookiesButton1.setEnabled(true);
        logginsButton1.setEnabled(true);
        webHistoryButton1.setEnabled(true);
        
        for (String path : iePaths) {
           ieComboBox.addItem(path);
        }
        
      
    }//GEN-LAST:event_loadIEButtonActionPerformed

    
private void ffComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ffComboBoxActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_ffComboBoxActionPerformed

    private void ffSummaryButtton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ffSummaryButtton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ffSummaryButtton1ActionPerformed

    private void webHistoryButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_webHistoryButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_webHistoryButton2ActionPerformed

    private void bookmarButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookmarButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bookmarButton2ActionPerformed

    private void cookiesButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cookiesButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cookiesButton2ActionPerformed

    private void downloadButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_downloadButton1ActionPerformed

    private void logginsButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logginsButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_logginsButton2ActionPerformed

   
    public ArrayList<InternetSummaryDate> getFFSummary (String path) throws Exception{
        ArrayList<InternetSummaryDate> result = new ArrayList<InternetSummaryDate>();
        MozillaHandler mozillaHandler = new MozillaHandler();
        mozillaHandler.connectMozillaDB(path + "\\" +  MozillaHandler.PLCASES_DB);

        ArrayList<ArrayList<String>> rows = mozillaHandler.getPlcaseHistory();

        for (int i=0 ; i<rows.size() ; i++) {
            if ( rows.get(i).get(1).startsWith("http://") ) {
                int number = Integer.parseInt(rows.get(i).get(3));
                InternetSummaryDate data = new InternetSummaryDate(rows.get(i).get(1),rows.get(i).get(0),
                   number );
                result.add(data);
            }
        }

        mozillaHandler.closeDB();
        return result ;
    }

    public ArrayList<InternetSummaryDate> getIESummary (String userPath) throws IOException,
    InterruptedException {

        ArrayList<InternetSummaryDate> result = new ArrayList<InternetSummaryDate>();

        if ( OpreatingSystemConstants.isValidPath(userPath, OpreatingSystemConstants.IE_HISTORY) ) {
            String path = OpreatingSystemConstants.getIEHistoryPath(userPath);

            IEHandler ieHandler = new IEHandler();
            ArrayList<String> rows = ieHandler.readProgramOutputFile(path,ApplicationConstants.HIS_TMP);

            for (int i=0 ; i<rows.size() ; i++) {
                 String[] str = rows.get(i).split("\t");

                if ( str.length >= 3  && str[0].startsWith("http://")) {
                    str[2] = str[2].replaceAll(",", "");
                    int number = Integer.parseInt(str[2]);
                    InternetSummaryDate data = new InternetSummaryDate(str[0],str[3],number);
                    result.add(data);
                }
            }
        }

        return result ;
    }

    public void fillWebHistoryTable (String path) throws SQLException,ClassNotFoundException, InstantiationException,
    IllegalAccessException {
        MozillaHandler mozillaHandler = new MozillaHandler();
        mozillaHandler.connectMozillaDB(path + MozillaHandler.PLCASES_DB);

        ArrayList<ArrayList<String>> rows = mozillaHandler.getPlcaseHistory();
        mozillaHandler.closeDB();

        // remove old data
        if ( webHistoryTable.getModel().getRowCount() > 0 ) {
             JTableUtil.removeAllRows(webHistoryTable);
        }
        
        for (int i=0 ; i<rows.size() ; i++) {
            ((DefaultTableModel)webHistoryTable.getModel()).addRow(new Object[] {
            rows.get(i).get(0),rows.get(i).get(1),rows.get(i).get(2),
            rows.get(i).get(3),rows.get(i).get(4)
            });
        }
    }

    public void fillBookmarkTable (String path) throws SQLException,ClassNotFoundException, InstantiationException,
    IllegalAccessException {
        MozillaHandler mozillaHandler = new MozillaHandler();
        mozillaHandler.connectMozillaDB(path + MozillaHandler.PLCASES_DB);

        ArrayList<ArrayList<String>> rows = mozillaHandler.getBookmark();
        mozillaHandler.closeDB();

        // remove old data
        if ( bookmarkTable.getModel().getRowCount() > 0 )
             JTableUtil.removeAllRows(bookmarkTable);
        
        for (int i=0 ; i<rows.size() ; i++) {
            ((DefaultTableModel)bookmarkTable.getModel()).addRow(new Object[] {
            rows.get(i).get(0),rows.get(i).get(1),rows.get(i).get(2)
            });
        }
    }

    public void fillCookiesTable (String path) throws SQLException,ClassNotFoundException, InstantiationException,
    IllegalAccessException {
        MozillaHandler mozillaHandler = new MozillaHandler();
        mozillaHandler.connectMozillaDB(path + MozillaHandler.COOKIES_DB);

        ArrayList<ArrayList<String>> rows = mozillaHandler.getCookies();
        mozillaHandler.closeDB();

        // remove old data
        if ( cookiesTable.getModel().getRowCount() > 0 )
             JTableUtil.removeAllRows(cookiesTable);

        for (int i=0 ; i<rows.size() ; i++) {
            ((DefaultTableModel)cookiesTable.getModel()).addRow(new Object[] {
                rows.get(i).get(0),rows.get(i).get(1),rows.get(i).get(2),
                rows.get(i).get(3),rows.get(i).get(4),rows.get(i).get(5),
                rows.get(i).get(6),rows.get(i).get(7)
            });
        }
    }

    public void fillDownloadTable (String path) throws SQLException,ClassNotFoundException, InstantiationException,
    IllegalAccessException {
        MozillaHandler mozillaHandler = new MozillaHandler();
        mozillaHandler.connectMozillaDB(path + MozillaHandler.DOWNLOAD_DB);

        ArrayList<ArrayList<String>> rows = mozillaHandler.getDownloads();
        mozillaHandler.closeDB();

        // remove old data
        if ( downloadTable.getModel().getRowCount() > 0 )
             JTableUtil.removeAllRows(downloadTable);

        for (int i=0 ; i<rows.size() ; i++) {
            ((DefaultTableModel) downloadTable.getModel()).addRow(new Object[] {
                rows.get(i).get(0),rows.get(i).get(1),rows.get(i).get(2),
                rows.get(i).get(3),rows.get(i).get(4)
            });
        }
    }

    public void fillLogginsTable (String path) throws SQLException,ClassNotFoundException, InstantiationException,
    IllegalAccessException {
        MozillaHandler mozillaHandler = new MozillaHandler();
        mozillaHandler.connectMozillaDB(path + MozillaHandler.LOGGIN_DB);

        ArrayList<ArrayList<String>> rows = mozillaHandler.getLoggins();
        mozillaHandler.closeDB();

        // remove old data
        if ( logginsTable.getModel().getRowCount() > 0 )
             JTableUtil.removeAllRows(logginsTable);
        
        for (int i=0 ; i<rows.size() ; i++) {
            ((DefaultTableModel) logginsTable.getModel()).addRow(new Object[] {
                rows.get(i).get(0),rows.get(i).get(1),rows.get(i).get(2),
                rows.get(i).get(3),rows.get(i).get(4)
            });
        }
    }

    public void fillSearchEngineTable (String path) throws SQLException,ClassNotFoundException, InstantiationException,
    IllegalAccessException {
        MozillaHandler mozillaHandler = new MozillaHandler();
        mozillaHandler.connectMozillaDB(path + MozillaHandler.PLCASES_DB);
        
        ArrayList<ArrayList<String>> rows = mozillaHandler.getSearching();
        mozillaHandler.closeDB();

        // remove old data
        if ( searchEngineTable.getModel().getRowCount() > 0 )
             JTableUtil.removeAllRows(searchEngineTable);

        for (int i=0 ; i<rows.size() ; i++) {
            ((DefaultTableModel) searchEngineTable.getModel()).addRow(new Object[] {
                rows.get(i).get(0),rows.get(i).get(1),
            });
        }
    }

    public void fillTopURLTable (String path) throws SQLException,ClassNotFoundException, InstantiationException,
    IllegalAccessException {
        MozillaHandler mozillaHandler = new MozillaHandler();
        mozillaHandler.connectMozillaDB(path + MozillaHandler.PLCASES_DB);
        
        ArrayList<ArrayList<String>> rows = mozillaHandler.getMostVisitiedURL();
        mozillaHandler.closeDB();
        
        // remove old data
        if ( topURLTable.getModel().getRowCount() > 0 )
             JTableUtil.removeAllRows(topURLTable);

        for (int i=0 ; i<rows.size() ; i++) {
            ((DefaultTableModel) topURLTable.getModel()).addRow(new Object[] {
                rows.get(i).get(0),rows.get(i).get(1),rows.get(i).get(2)
            });
        }
    }

    public void fillTopHostTable (String path) throws SQLException,ClassNotFoundException, InstantiationException,
    IllegalAccessException {
        MozillaHandler mozillaHandler = new MozillaHandler();
        mozillaHandler.connectMozillaDB(path + MozillaHandler.PLCASES_DB);
        
        ArrayList<ArrayList<String>> rows = mozillaHandler.getMostVisitiedHost();
        mozillaHandler.closeDB();

        // remove old data
        if ( topHostTable.getModel().getRowCount() > 0 )
             JTableUtil.removeAllRows(topHostTable);

        for (int i=0 ; i<rows.size() ; i++) {
            ((DefaultTableModel) topHostTable.getModel()).addRow(new Object[] {
                Utilities.reverseHost(rows.get(i).get(0)),rows.get(i).get(1),
            });
        }
    }

    public void fillIECacheTable (String path) throws IOException {
        List<String> rows = FileUtil.readProgramOutputStream(path);

         // remove old data
        if ( IECacheTable.getModel().getRowCount() > 0 )
             JTableUtil.removeAllRows(IECacheTable);
        
        for (int i=0 ; i<rows.size() ; i++) {
             String[] str = rows.get(i).split(",");
             Object[] object = new Object[str.length];

             for (int j=0 ; j<str.length ; j++)
                 object[j] = str[j] ;
             
            ((DefaultTableModel) IECacheTable.getModel()).addRow(object);
        }
    }

    public void fillIECookiesTable (String path) throws IOException {
        List<String> rows = FileUtil.readProgramOutputStream(path);

        for (int i=0 ; i<rows.size() ; i++) {
            if ( rows.get(i).isEmpty() || rows.get(i).length() <= 1 )
                continue;
            
             String[] str = rows.get(i).split(",");
             Object[] object = new Object[str.length];

             for (int j=0 ; j<str.length ; j++) {
                 object[j] = str[j] ;
             }

            ((DefaultTableModel) IECookiesTable.getModel()).addRow(object);
        }
    }

    public void fillIEWebHistoryTable (String path) throws IOException, InterruptedException {
        IEHandler ieHandler = new IEHandler();
        ArrayList<String> rows = ieHandler.readProgramOutputFile(path,ApplicationConstants.HIS_TMP);

        // remove old data
        if ( IEWebHistoryTable.getModel().getRowCount() > 0 )
             JTableUtil.removeAllRows(IEWebHistoryTable);
        
        for (int i=0 ; i<rows.size() ; i++) {
             String[] str = rows.get(i).split("\t");
             Object[] object = new Object[str.length];
             
             for (int j=0 ; j<str.length ; j++)
                 object[j] = str[j] ;

            ((DefaultTableModel) IEWebHistoryTable.getModel()).addRow(object);
        }
    }

    public void fillIEBookmarkTable (String path) throws IOException {
        ArrayList<String> filesName = new ArrayList<String>();
        IEHandler.getFiles(new File(path) , filesName);

        // remove old data
        if ( IEBookmarkTable.getModel().getRowCount() > 0 )
             JTableUtil.removeAllRows(IEBookmarkTable);
        
        for (int i=0; i<filesName.size() ; i++){
            ( (DefaultTableModel) IEBookmarkTable.getModel() ).addRow(
                    new Object[] { filesName.get(i) } );
        }
    }

    public void fillIELogginsTable (String path) throws IOException, InterruptedException {
        IEHandler ieHandler = new IEHandler();
        ArrayList<String> pass = ieHandler.readProgramOutputFile(path,ApplicationConstants.PASS_TMP);

        // remove old data
        if ( IELogginsTable.getModel().getRowCount() > 0 )
             JTableUtil.removeAllRows(IELogginsTable);
        
        for (int i=0 ; i<pass.size(); i++){
            String[] str = pass.get(i).split(",");
            Object[] object = new Object[str.length];

             for (int j=0 ; j<str.length ; j++)
                 object[j] = str[j] ;
            
            ( (DefaultTableModel) IELogginsTable.getModel() ).addRow(object);
        }
    }
        
    private class MozillaInputListener implements DocumentListener {
        public void changedUpdate(DocumentEvent e){filterMozillaTables();}
        public void removeUpdate (DocumentEvent e){filterMozillaTables();}
        public void insertUpdate (DocumentEvent e){filterMozillaTables();}
    }

    public void filterMozillaTables () {
        String text = mozillaSearchField.getText().trim();

        // search in all tables for mozilla text search and filetr result
        JTableUtil.filterTable(webHistoryTable, text);
        JTableUtil.filterTable(bookmarkTable, text);
        JTableUtil.filterTable(cookiesTable, text);
        JTableUtil.filterTable(downloadTable,text) ;
        JTableUtil.filterTable(logginsTable,text);
    }

    private class IEInputListener implements DocumentListener {
        public void changedUpdate(DocumentEvent e){filterIETables();}
        public void removeUpdate (DocumentEvent e){filterIETables();}
        public void insertUpdate (DocumentEvent e){filterIETables();}
    }

    public void filterIETables () {
        String text = IESearchField.getText().trim();

        // search in all tables for mozilla text search and filetr result
        JTableUtil.filterTable(IEWebHistoryTable, text);
        JTableUtil.filterTable(IEBookmarkTable, text);
        JTableUtil.filterTable(IECookiesTable, text);
        JTableUtil.filterTable(IECacheTable,text) ;
        JTableUtil.filterTable(IELogginsTable,text);
    }
    
    private void resetInternetSurfing (JTextField f, JComboBox box){
        f.setText("");
        box.setSelectedIndex(0);
    }

    private void disableNotIndexedComponent () {
//        // close web browers data
//        if ( index.getFFPath().isEmpty() ) {
//            mozillaPanel.setEnabled(false);
//            ffComboBox.setEnabled(false);
//            loadFFButton.setEnabled(false);
//            mozillaSearchField.setEnabled(false);
//            mozillaFilterComboBox.setEnabled(false);
//            webHistoryButton.setEnabled(false);
//            bookmarButton.setEnabled(false);
//            cookiesButton.setEnabled(false);
//            downloadButton.setEnabled(false);
//            logginsButton.setEnabled(false);
//            webHistoryTable.setEnabled(false);
//            ffSummaryButtton.setEnabled(false);
//            ffViewHTMLReportButton.setEnabled(false);
//            ffVisualizingVisitedHostButton.setEnabled(false);
//            bookmarkTable.setEnabled(false);
//            cookiesTable.setEnabled(false);
//            downloadTable.setEnabled(false);
//            logginsTable.setEnabled(false);
//        }
//
//        if ( index.getIePath().isEmpty() ) {
//            IEPanel.setEnabled(false);
//            ieComboBox.setEnabled(false);
//            loadIEButton.setEnabled(false);
//            IESearchField.setEnabled(false);
//            IEFilterComboBox.setEnabled(false);
//            webHistoryButton1.setEnabled(false);
//            bookmarButton1.setEnabled(false);
//            cookiesButton1.setEnabled(false);
//            cacheButton.setEnabled(false);
//            logginsButton1.setEnabled(false);
//            IEWebHistoryTable.setEnabled(false);
//            IEBookmarkTable.setEnabled(false);
//            IECookiesTable.setEnabled(false);
//            IECacheTable.setEnabled(false);
//            IELogginsTable.setEnabled(false);
//        }
//
//        if ( index.getFFPath().isEmpty() && index.getIePath().isEmpty() ) {
//            summaryInternetPanel.setEnabled(false);
//            summaryInternetButton.setEnabled(false);
//            summaryTable.setEnabled(false);
//        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel IEBookmarkPanel;
    private javax.swing.JTable IEBookmarkTable;
    private javax.swing.JPanel IEButtonsPanel;
    private javax.swing.JPanel IECachePanel;
    private javax.swing.JTable IECacheTable;
    private javax.swing.JPanel IECookiesPanel;
    private javax.swing.JTable IECookiesTable;
    private javax.swing.JComboBox IEFilterComboBox;
    private javax.swing.JPanel IELoadPanel;
    private javax.swing.JPanel IELogginsPanel;
    private javax.swing.JTable IELogginsTable;
    private javax.swing.JPanel IEPanel;
    private javax.swing.JPanel IEResultPanel;
    private javax.swing.JTextField IESearchField;
    private javax.swing.JPanel IESearchPanel;
    private javax.swing.JPanel IEWebHistoryPanel;
    private javax.swing.JTable IEWebHistoryTable;
    private javax.swing.JButton bookmarButton;
    private javax.swing.JButton bookmarButton1;
    private javax.swing.JButton bookmarButton2;
    private javax.swing.JPanel bookmarkHistory;
    private javax.swing.JScrollPane bookmarkScrollPane;
    private javax.swing.JTable bookmarkTable;
    private javax.swing.JButton cacheButton;
    private javax.swing.JButton cookiesButton;
    private javax.swing.JButton cookiesButton1;
    private javax.swing.JButton cookiesButton2;
    private javax.swing.JPanel cookiesPanel;
    private javax.swing.JScrollPane cookiesScrollPane;
    private javax.swing.JTable cookiesTable;
    private javax.swing.JButton downloadButton;
    private javax.swing.JButton downloadButton1;
    private javax.swing.JPanel downloadPanel;
    private javax.swing.JScrollPane downloadScrollPane;
    private javax.swing.JTable downloadTable;
    private javax.swing.JComboBox ffComboBox;
    private javax.swing.JTabbedPane ffSumarryTappnedPane;
    private javax.swing.JPanel ffSummaryButtonsPanel;
    private javax.swing.JButton ffSummaryButtton;
    private javax.swing.JButton ffSummaryButtton1;
    private javax.swing.JPanel ffSummaryDataPanel;
    private javax.swing.JPanel ffSummaryPanel;
    private javax.swing.JButton ffViewHTMLReportButton;
    private javax.swing.JButton ffVisualizingVisitedHostButton;
    private javax.swing.JComboBox ieComboBox;
    private javax.swing.JTabbedPane internetSurfingTappedPane;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane24;
    private javax.swing.JScrollPane jScrollPane25;
    private javax.swing.JScrollPane jScrollPane26;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JToolBar jToolBar3;
    private javax.swing.JToolBar jToolBar4;
    private javax.swing.JButton loadFFButton;
    private javax.swing.JButton loadIEButton;
    private javax.swing.JButton logginsButton;
    private javax.swing.JButton logginsButton1;
    private javax.swing.JButton logginsButton2;
    private javax.swing.JPanel logginsPanel;
    private javax.swing.JScrollPane logginsScrollPane;
    private javax.swing.JTable logginsTable;
    private javax.swing.JPanel mozillaButtonsPanel;
    private javax.swing.JPanel mozillaButtonsPanel1;
    private javax.swing.JComboBox mozillaFilterComboBox;
    private javax.swing.JPanel mozillaLoadPanel;
    private javax.swing.JPanel mozillaPanel;
    private javax.swing.JPanel mozillaResultPanel;
    private javax.swing.JTextField mozillaSearchField;
    private javax.swing.JPanel mozillaSearchPanel;
    private javax.swing.JPanel searchEnginePanel;
    private javax.swing.JTable searchEngineTable;
    private javax.swing.JPanel topHostPanel;
    private javax.swing.JTable topHostTable;
    private javax.swing.JPanel topURLPanel;
    private javax.swing.JTable topURLTable;
    private javax.swing.JButton webHistoryButton;
    private javax.swing.JButton webHistoryButton1;
    private javax.swing.JButton webHistoryButton2;
    private javax.swing.JPanel webHistoryPanel;
    private javax.swing.JScrollPane webHistoryScrollPane;
    private javax.swing.JTable webHistoryTable;
    // End of variables declaration//GEN-END:variables
}
