/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SourceViewerDialog.java
 *
 * Created on Nov 28, 2011, 2:20:54 PM
 */
package edu.coeia.main;

import edu.coeia.indexing.IndexingConstant;
import edu.coeia.searching.LuceneSearcher ;
import edu.coeia.util.FileUtil;
import edu.coeia.searching.AdvancedSearchPanel;
import edu.coeia.tags.Tag;
import edu.coeia.tags.TagsDialog;
import edu.coeia.tags.TagsManager;

import java.awt.BorderLayout;
import java.awt.Frame;

import java.io.File;
import java.io.FileInputStream;
import java.util.List; 

import javax.swing.JFileChooser;
import javax.swing.JPanel;

import org.apache.lucene.document.Document;

/**
 *
 * @author wajdyessam
 */
public class SourceViewerDialog extends javax.swing.JDialog {
    private String keyword ;
    private AdvancedSearchPanel advancedSearchPanel ;
    private LuceneSearcher searcher ;
    private Document currentDocument ;
    private Frame parent ;
    private TagsManager tagManger  ;
    
    /**
     * Lucene Document ID number list and the current id opened now
     */
    private List<Integer> documentsNumber;
    
    /*
     * the current index of the document list
     */
    private int currentListIndex ;
    
    /** Creates new form SourceViewerDialog */
    public SourceViewerDialog(java.awt.Frame parent, boolean modal, AdvancedSearchPanel panel) {
        super(parent, modal);
        initComponents();
        
        this.setLocationRelativeTo(parent);
        this.parent = parent ;
        this.tagManger = ((CaseFrame) parent).getTagsManager();
        this.advancedSearchPanel = panel;
        this.keyword = this.advancedSearchPanel.getQueryText();
        this.searcher = this.advancedSearchPanel.getLuceneSearcher();
        this.documentsNumber = this.advancedSearchPanel.getIds();
        this.currentListIndex = this.documentsNumber.indexOf(this.advancedSearchPanel.getCurrentId());
        this.showDocumentWithIndex(this.currentListIndex);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        controlPanel = new javax.swing.JPanel();
        movePanel = new javax.swing.JPanel();
        previousButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        itemsPanel = new javax.swing.JPanel();
        tagButton = new javax.swing.JButton();
        exportButton = new javax.swing.JButton();
        statusPanel = new javax.swing.JPanel();
        viewerPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Previewer Items Dialog");

        movePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Navigation"));

        previousButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/main/resources/Previous48.png"))); // NOI18N
        previousButton.setText("Previous");
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });

        nextButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/main/resources/next48.png"))); // NOI18N
        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout movePanelLayout = new javax.swing.GroupLayout(movePanel);
        movePanel.setLayout(movePanelLayout);
        movePanelLayout.setHorizontalGroup(
            movePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(movePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(previousButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nextButton)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        movePanelLayout.setVerticalGroup(
            movePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, movePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(movePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(nextButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
                    .addComponent(previousButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE))
                .addContainerGap())
        );

        controlPanel.add(movePanel);

        itemsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Tag and Export"));

        tagButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/main/resources/tag64.png"))); // NOI18N
        tagButton.setText("Tag Item");
        tagButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tagButtonActionPerformed(evt);
            }
        });

        exportButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/coeia/main/resources/export48.png"))); // NOI18N
        exportButton.setText("Export Item");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout itemsPanelLayout = new javax.swing.GroupLayout(itemsPanel);
        itemsPanel.setLayout(itemsPanelLayout);
        itemsPanelLayout.setHorizontalGroup(
            itemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(itemsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tagButton, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(exportButton)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        itemsPanelLayout.setVerticalGroup(
            itemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, itemsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(itemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(exportButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tagButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 62, Short.MAX_VALUE))
                .addContainerGap())
        );

        controlPanel.add(itemsPanel);

        getContentPane().add(controlPanel, java.awt.BorderLayout.NORTH);

        statusPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Status"));

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 723, Short.MAX_VALUE)
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        getContentPane().add(statusPanel, java.awt.BorderLayout.SOUTH);

        viewerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Viewer"));

        javax.swing.GroupLayout viewerPanelLayout = new javax.swing.GroupLayout(viewerPanel);
        viewerPanel.setLayout(viewerPanelLayout);
        viewerPanelLayout.setHorizontalGroup(
            viewerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 723, Short.MAX_VALUE)
        );
        viewerPanelLayout.setVerticalGroup(
            viewerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 512, Short.MAX_VALUE)
        );

        getContentPane().add(viewerPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        this.currentListIndex++;
        this.showDocumentWithIndex(this.currentListIndex);
    }//GEN-LAST:event_nextButtonActionPerformed

    private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButtonActionPerformed
        this.currentListIndex--;
        this.showDocumentWithIndex(this.currentListIndex);
    }//GEN-LAST:event_previousButtonActionPerformed

    private void tagButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tagButtonActionPerformed
        tagDocument(this.currentDocument);
    }//GEN-LAST:event_tagButtonActionPerformed

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        exportDocument(this.currentDocument);
    }//GEN-LAST:event_exportButtonActionPerformed

    private void tagDocument(final Document document) {
        StringBuilder result = new StringBuilder();
        
        if ( isFileDocument(document) ) {
            String fileName = document.get(IndexingConstant.FILE_TITLE);
            String filePath = document.get(IndexingConstant.FILE_NAME);
            String date = document.get(IndexingConstant.FILE_DATE);
            String embedded = document.get(IndexingConstant.DOCUMENT_PARENT_ID);
            String mime = document.get(IndexingConstant.FILE_MIME);
            
            result.append("File: ").append(fileName).append("\n")
                    .append("Location: ").append(filePath).append("\n")
                    .append("Modification Time: ").append(date).append("\n")
                    .append("Extension: ").append(mime).append("\n")
                    .append("Contain: ").append(embedded).append(" Document(s)").append("\n");
        }
        
        TagsDialog tagDialog = new TagsDialog(this.parent, true);
        tagDialog.setContent(result.toString());
        tagDialog.setVisible(true);
        
        Tag tag = tagDialog.getTag();
        
        if ( tag !=  null ) {
            this.tagManger.addTag(tag);
            ((CaseFrame)this.parent).refreshTagsList();
        }
    }
    
    private void exportDocument(final Document document) {
        if ( isFileDocument(document) ) {
            String filePath = document.get(IndexingConstant.FILE_NAME);
            JFileChooser fileChooser = new JFileChooser();
            int result = fileChooser.showSaveDialog(this.parent);
            if ( result == JFileChooser.APPROVE_OPTION ) {
                File file = fileChooser.getSelectedFile();
                try {
                    FileUtil.saveObject(new FileInputStream(filePath), file.getAbsolutePath());
                }
                catch(Exception e) { e.printStackTrace(); }
            }
        }
    }
    
    private void showDocumentWithIndex (final int id) {
        checkControlButtons();
        showDocumentWithID(this.documentsNumber.get(id));    
    }
    
    private void showDocumentWithID (final int docId ) {
        try {
            currentDocument = this.searcher.getDocument(String.valueOf(docId));
            showPanelForDocument(currentDocument);
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    private void showPanelForDocument (Document document) {
        JPanel panel = null;
        
        if ( isFileDocument(document) ) {
            panel = new FileSourceViewerPanel(this);
        }
        else if ( isChatDocument(document) ) {
            panel = new ChatSourceViewerPanel(this);
        }
        else if ( isEmailDocument(document) ) {
            panel = new EmailSourceViewerPanel(this);
        }
        
        this.viewerPanel.setLayout(new BorderLayout());
        this.viewerPanel.add(panel, BorderLayout.CENTER);
        this.viewerPanel.revalidate();
    }
    
    private boolean isFileDocument(final Document document) {
        return document.get(IndexingConstant.DOCUMENT)
                .equals(IndexingConstant.getDocumentType(IndexingConstant.DOCUMENT_TYPE.FILE));
    }
    
    private boolean isChatDocument(final Document document) {
        return document.get(IndexingConstant.DOCUMENT)
                .equals(IndexingConstant.getDocumentType(IndexingConstant.DOCUMENT_TYPE.CHAT));
    }
   
    private boolean isEmailDocument(final Document document) {
        return document.get(IndexingConstant.DOCUMENT)
                .equals(IndexingConstant.getDocumentType(IndexingConstant.DOCUMENT_TYPE.ONLINE_EMAIL));
    }
   
    /**
     * Enable or disable back/next button depend on current list id and max list id
     */
    private void checkControlButtons () {
        if ( this.documentsNumber.size() == 1 ) {
            this.previousButton.setEnabled(false);
            this.nextButton.setEnabled(false);
            return ;
        }
        
        if ( this.currentListIndex == 0 )
            this.previousButton.setEnabled(false);
        else
            this.previousButton.setEnabled(true);
        
        if ( this.currentListIndex == this.documentsNumber.size()-1 )
            this.nextButton.setEnabled(false);
        else
            this.nextButton.setEnabled(true);
        
        // remove any panel from render panel
        this.viewerPanel.removeAll();
    }
    
    /*
     * methods that used by custome panel (document, chat, email)
     * to get the current document and show it in a proper way 
     * specific to the type of the viewer
     */
    LuceneSearcher getLuceneSearch() { return this.searcher ; }
    String getQueryString() { return this.keyword ; }
    String getCurrentId() { return String.valueOf(this.documentsNumber.get(this.currentListIndex));  }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel controlPanel;
    private javax.swing.JButton exportButton;
    private javax.swing.JPanel itemsPanel;
    private javax.swing.JPanel movePanel;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton previousButton;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JButton tagButton;
    private javax.swing.JPanel viewerPanel;
    // End of variables declaration//GEN-END:variables
}
